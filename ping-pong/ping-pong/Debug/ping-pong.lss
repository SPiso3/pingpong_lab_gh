
ping-pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f4  00800100  00001e8e  00001f22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  008002f4  008002f4  00002116  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002116  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002174  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ebf  00000000  00000000  00002400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001368  00000000  00000000  000052bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016b2  00000000  00000000  00006627  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000684  00000000  00000000  00007cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c0  00000000  00000000  00008360  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a9d  00000000  00000000  00008c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000a6bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 02 	jmp	0x568	; 0x568 <__ctors_end>
       4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
       8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
       c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      10:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      14:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      18:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      1c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      20:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      24:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      28:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      2c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      30:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      34:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      38:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      3c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      40:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      44:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      48:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      4c:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__vector_19>
      50:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      54:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      58:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      5c:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__vector_23>
      60:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      64:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      68:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      6c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      d0:	00 00       	nop
      d2:	80 80       	ld	r8, Z
      d4:	c0 c0       	rjmp	.+384    	; 0x256 <__EEPROM_REGION_LENGTH__+0x56>
      d6:	c0 c0       	rjmp	.+384    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
      d8:	c0 c0       	rjmp	.+384    	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
      da:	c0 c0       	rjmp	.+384    	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
      de:	c0 c0       	rjmp	.+384    	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
      e0:	c0 c0       	rjmp	.+384    	; 0x262 <__EEPROM_REGION_LENGTH__+0x62>
      e2:	c0 c0       	rjmp	.+384    	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
      e4:	80 00       	.word	0x0080	; ????
	...
     10a:	00 00       	nop
     10c:	c0 f0       	brcs	.+48     	; 0x13e <__trampolines_end+0xce>
     10e:	7c 0e       	add	r7, r28
     110:	07 03       	mulsu	r16, r23
     112:	01 c1       	rjmp	.+514    	; 0x316 <font8+0xa6>
     114:	e0 e0       	ldi	r30, 0x00	; 0
     116:	70 70       	andi	r23, 0x00	; 0
     118:	30 30       	cpi	r19, 0x00	; 0
     11a:	30 30       	cpi	r19, 0x00	; 0
     11c:	30 30       	cpi	r19, 0x00	; 0
     11e:	30 30       	cpi	r19, 0x00	; 0
     120:	30 30       	cpi	r19, 0x00	; 0
     122:	30 39       	cpi	r19, 0x90	; 144
     124:	3f 1f       	adc	r19, r31
	...
     13a:	00 00       	nop
     13c:	00 80       	ld	r0, Z
     13e:	c0 e0       	ldi	r28, 0x00	; 0
     140:	60 60       	ori	r22, 0x00	; 0
     142:	30 30       	cpi	r19, 0x00	; 0
     144:	30 30       	cpi	r19, 0x00	; 0
     146:	30 30       	cpi	r19, 0x00	; 0
     148:	30 30       	cpi	r19, 0x00	; 0
     14a:	30 30       	cpi	r19, 0x00	; 0
     14c:	3f 3f       	cpi	r19, 0xFF	; 255
     14e:	30 30       	cpi	r19, 0x00	; 0
     150:	30 30       	cpi	r19, 0x00	; 0
     152:	3f 3f       	cpi	r19, 0xFF	; 255
     154:	3b 30       	cpi	r19, 0x0B	; 11
     156:	30 30       	cpi	r19, 0x00	; 0
     158:	30 30       	cpi	r19, 0x00	; 0
     15a:	30 30       	cpi	r19, 0x00	; 0
     15c:	30 30       	cpi	r19, 0x00	; 0
     15e:	60 60       	ori	r22, 0x00	; 0
     160:	e0 c0       	rjmp	.+448    	; 0x322 <font8+0xb2>
     162:	80 00       	.word	0x0080	; ????
	...
     178:	c0 f8       	bld	r12, 0
     17a:	3c 0e       	add	r3, r28
     17c:	03 01       	movw	r0, r6
     17e:	00 00       	nop
     180:	00 00       	nop
     182:	f0 f0       	brcs	.+60     	; 0x1c0 <__trampolines_end+0x150>
     184:	f0 f0       	brcs	.+60     	; 0x1c2 <__trampolines_end+0x152>
	...
     19a:	60 f0       	brcs	.+24     	; 0x1b4 <__trampolines_end+0x144>
     19c:	f0 60       	ori	r31, 0x00	; 0
     19e:	00 00       	nop
     1a0:	00 00       	nop
     1a2:	01 03       	mulsu	r16, r17
     1a4:	0f 3c       	cpi	r16, 0xCF	; 207
     1a6:	f8 e0       	ldi	r31, 0x08	; 8
	...
     1b8:	3f ff       	.word	0xff3f	; ????
     1ba:	c0 00       	.word	0x00c0	; ????
     1bc:	00 00       	nop
     1be:	0f 0f       	add	r16, r31
     1c0:	0f 0f       	add	r16, r31
     1c2:	7f ff       	.word	0xff7f	; ????
     1c4:	ff ff       	.word	0xffff	; ????
     1c6:	0f 0f       	add	r16, r31
     1c8:	0f 0f       	add	r16, r31
	...
     1d6:	06 0f       	add	r16, r22
     1d8:	0f 06       	cpc	r0, r31
     1da:	60 f0       	brcs	.+24     	; 0x1f4 <__trampolines_end+0x184>
     1dc:	f0 60       	ori	r31, 0x00	; 0
     1de:	06 0f       	add	r16, r22
     1e0:	0f 06       	cpc	r0, r31
     1e2:	00 00       	nop
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <__trampolines_end+0x176>
     1e6:	ff 7f       	andi	r31, 0xFF	; 255
	...
     1f8:	00 01       	movw	r0, r0
     1fa:	03 07       	cpc	r16, r19
     1fc:	0c 18       	sub	r0, r12
     1fe:	30 70       	andi	r19, 0x00	; 0
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	c0 c0       	rjmp	.+384    	; 0x384 <font8+0x114>
     204:	c0 c0       	rjmp	.+384    	; 0x386 <font8+0x116>
     206:	c0 c0       	rjmp	.+384    	; 0x388 <font8+0x118>
     208:	c0 c0       	rjmp	.+384    	; 0x38a <font8+0x11a>
     20a:	c0 c0       	rjmp	.+384    	; 0x38c <font8+0x11c>
     20c:	c0 c0       	rjmp	.+384    	; 0x38e <font8+0x11e>
     20e:	c0 c0       	rjmp	.+384    	; 0x390 <font8+0x120>
     210:	c0 c0       	rjmp	.+384    	; 0x392 <font8+0x122>
     212:	c0 c0       	rjmp	.+384    	; 0x394 <font8+0x124>
     214:	c0 c0       	rjmp	.+384    	; 0x396 <font8+0x126>
     216:	c0 c0       	rjmp	.+384    	; 0x398 <font8+0x128>
     218:	c0 c0       	rjmp	.+384    	; 0x39a <font8+0x12a>
     21a:	c0 c0       	rjmp	.+384    	; 0x39c <font8+0x12c>
     21c:	c0 c0       	rjmp	.+384    	; 0x39e <font8+0x12e>
     21e:	e0 60       	ori	r30, 0x00	; 0
     220:	70 30       	cpi	r23, 0x00	; 0
     222:	38 1c       	adc	r3, r8
     224:	0f 07       	cpc	r16, r31
     226:	01 00       	.word	0x0001	; ????
	...

00000270 <font8>:
	...
     278:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     288:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     298:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     2a8:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     2b8:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     2c8:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     2d8:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2e8:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2f8:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     308:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     318:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     328:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     338:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     348:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     358:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     368:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     378:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     388:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     398:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     3a8:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     3b8:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     3c8:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     3d8:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3e8:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3f8:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     408:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     418:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     428:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     438:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     448:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     458:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     468:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     478:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     488:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     498:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     4a8:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     4b8:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     4c8:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     4d8:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4e8:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4f8:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     508:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     518:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     528:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     538:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     548:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     558:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............

00000568 <__ctors_end>:
     568:	11 24       	eor	r1, r1
     56a:	1f be       	out	0x3f, r1	; 63
     56c:	cf ef       	ldi	r28, 0xFF	; 255
     56e:	d4 e0       	ldi	r29, 0x04	; 4
     570:	de bf       	out	0x3e, r29	; 62
     572:	cd bf       	out	0x3d, r28	; 61

00000574 <__do_copy_data>:
     574:	12 e0       	ldi	r17, 0x02	; 2
     576:	a0 e0       	ldi	r26, 0x00	; 0
     578:	b1 e0       	ldi	r27, 0x01	; 1
     57a:	ee e8       	ldi	r30, 0x8E	; 142
     57c:	fe e1       	ldi	r31, 0x1E	; 30
     57e:	02 c0       	rjmp	.+4      	; 0x584 <__do_copy_data+0x10>
     580:	05 90       	lpm	r0, Z+
     582:	0d 92       	st	X+, r0
     584:	a4 3f       	cpi	r26, 0xF4	; 244
     586:	b1 07       	cpc	r27, r17
     588:	d9 f7       	brne	.-10     	; 0x580 <__do_copy_data+0xc>

0000058a <__do_clear_bss>:
     58a:	23 e0       	ldi	r18, 0x03	; 3
     58c:	a4 ef       	ldi	r26, 0xF4	; 244
     58e:	b2 e0       	ldi	r27, 0x02	; 2
     590:	01 c0       	rjmp	.+2      	; 0x594 <.do_clear_bss_start>

00000592 <.do_clear_bss_loop>:
     592:	1d 92       	st	X+, r1

00000594 <.do_clear_bss_start>:
     594:	a8 30       	cpi	r26, 0x08	; 8
     596:	b2 07       	cpc	r27, r18
     598:	e1 f7       	brne	.-8      	; 0x592 <.do_clear_bss_loop>
     59a:	0e 94 03 07 	call	0xe06	; 0xe06 <main>
     59e:	0c 94 45 0f 	jmp	0x1e8a	; 0x1e8a <_exit>

000005a2 <__bad_interrupt>:
     5a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005a6 <ADC_init>:
	uint8_t ret_val = 0;
	for(uint8_t i=0; (i<ADC_CHANNELS) && (i<=channel); i++){
		ret_val = adc[0x0000]; //discard first channel-1 values
	}
	return ret_val;	//return last one
}
     5a6:	87 b3       	in	r24, 0x17	; 23
     5a8:	81 60       	ori	r24, 0x01	; 1
     5aa:	87 bb       	out	0x17, r24	; 23
     5ac:	81 b3       	in	r24, 0x11	; 17
     5ae:	8f 7e       	andi	r24, 0xEF	; 239
     5b0:	81 bb       	out	0x11, r24	; 17
     5b2:	82 b3       	in	r24, 0x12	; 18
     5b4:	80 61       	ori	r24, 0x10	; 16
     5b6:	82 bb       	out	0x12, r24	; 18
     5b8:	08 95       	ret

000005ba <ADC_sample4>:
     5ba:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x10f8>
     5be:	08 95       	ret

000005c0 <ADC_is_busy>:
     5c0:	80 b3       	in	r24, 0x10	; 16
     5c2:	82 95       	swap	r24
     5c4:	81 70       	andi	r24, 0x01	; 1
     5c6:	08 95       	ret

000005c8 <ADC_read>:

uint8_t ADC_read(void){
	volatile char *adc = (char *) ADC_BASE_ADDR;
	while(!ADC_is_busy()); //wait till busy goes up
     5c8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <ADC_is_busy>
     5cc:	88 23       	and	r24, r24
     5ce:	e1 f3       	breq	.-8      	; 0x5c8 <ADC_read>
	return adc[0x0000];
     5d0:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x10f8>
     5d4:	08 95       	ret

000005d6 <image_1>:
#include "../include/menu.h"

extern FILE *oled_output;

void image_1(){
	OLED_clear();
     5d6:	0e 94 c1 05 	call	0xb82	; 0xb82 <OLED_clear>
	OLED_print_figure(32,0,64,64);
     5da:	20 e4       	ldi	r18, 0x40	; 64
     5dc:	40 e4       	ldi	r20, 0x40	; 64
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	80 e2       	ldi	r24, 0x20	; 32
     5e2:	0e 94 53 06 	call	0xca6	; 0xca6 <OLED_print_figure>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5e6:	2f ef       	ldi	r18, 0xFF	; 255
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	9d e1       	ldi	r25, 0x1D	; 29
     5ec:	21 50       	subi	r18, 0x01	; 1
     5ee:	80 40       	sbci	r24, 0x00	; 0
     5f0:	90 40       	sbci	r25, 0x00	; 0
     5f2:	e1 f7       	brne	.-8      	; 0x5ec <image_1+0x16>
     5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <image_1+0x20>
     5f6:	00 00       	nop
     5f8:	08 95       	ret

000005fa <image_2v2>:
	_delay_ms(2000);
}

void image_2v2(){
	OLED_clear();
     5fa:	0e 94 c1 05 	call	0xb82	; 0xb82 <OLED_clear>
	OLED_print_figure(0,0,64,64);
     5fe:	20 e4       	ldi	r18, 0x40	; 64
     600:	40 e4       	ldi	r20, 0x40	; 64
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	0e 94 53 06 	call	0xca6	; 0xca6 <OLED_print_figure>
	OLED_print_figure(64,0,64,64);
     60a:	20 e4       	ldi	r18, 0x40	; 64
     60c:	40 e4       	ldi	r20, 0x40	; 64
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	80 e4       	ldi	r24, 0x40	; 64
     612:	0e 94 53 06 	call	0xca6	; 0xca6 <OLED_print_figure>
     616:	2f ef       	ldi	r18, 0xFF	; 255
     618:	8f ef       	ldi	r24, 0xFF	; 255
     61a:	9d e1       	ldi	r25, 0x1D	; 29
     61c:	21 50       	subi	r18, 0x01	; 1
     61e:	80 40       	sbci	r24, 0x00	; 0
     620:	90 40       	sbci	r25, 0x00	; 0
     622:	e1 f7       	brne	.-8      	; 0x61c <image_2v2+0x22>
     624:	00 c0       	rjmp	.+0      	; 0x626 <image_2v2+0x2c>
     626:	00 00       	nop
     628:	08 95       	ret

0000062a <multiplayer>:
	_delay_ms(2000);
}

void multiplayer(){
	OLED_clear();
     62a:	0e 94 c1 05 	call	0xb82	; 0xb82 <OLED_clear>
	OLED_print_figure(0,0,64,64);
     62e:	20 e4       	ldi	r18, 0x40	; 64
     630:	40 e4       	ldi	r20, 0x40	; 64
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	0e 94 53 06 	call	0xca6	; 0xca6 <OLED_print_figure>
	OLED_print_figure(64,0,64,64);
     63a:	20 e4       	ldi	r18, 0x40	; 64
     63c:	40 e4       	ldi	r20, 0x40	; 64
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	80 e4       	ldi	r24, 0x40	; 64
     642:	0e 94 53 06 	call	0xca6	; 0xca6 <OLED_print_figure>
	OLED_print_figure(32,0,64,64);
     646:	20 e4       	ldi	r18, 0x40	; 64
     648:	40 e4       	ldi	r20, 0x40	; 64
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	80 e2       	ldi	r24, 0x20	; 32
     64e:	0e 94 53 06 	call	0xca6	; 0xca6 <OLED_print_figure>
     652:	2f ef       	ldi	r18, 0xFF	; 255
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	9d e1       	ldi	r25, 0x1D	; 29
     658:	21 50       	subi	r18, 0x01	; 1
     65a:	80 40       	sbci	r24, 0x00	; 0
     65c:	90 40       	sbci	r25, 0x00	; 0
     65e:	e1 f7       	brne	.-8      	; 0x658 <multiplayer+0x2e>
     660:	00 c0       	rjmp	.+0      	; 0x662 <multiplayer+0x38>
     662:	00 00       	nop
     664:	08 95       	ret

00000666 <display_menu>:
	
}

//--private

void display_menu(menu_ptr m, uint8_t arrow_pos){
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
     66a:	cf 93       	push	r28
     66c:	8c 01       	movw	r16, r24
     66e:	c6 2f       	mov	r28, r22
	OLED_clear();
     670:	0e 94 c1 05 	call	0xb82	; 0xb82 <OLED_clear>
	
	OLED_goto_pos(arrow_pos, 0);
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	8c 2f       	mov	r24, r28
     678:	0e 94 75 05 	call	0xaea	; 0xaea <OLED_goto_pos>
	fprintf(oled_output,"> ");
     67c:	20 91 f9 02 	lds	r18, 0x02F9	; 0x8002f9 <oled_output>
     680:	30 91 fa 02 	lds	r19, 0x02FA	; 0x8002fa <oled_output+0x1>
     684:	42 e0       	ldi	r20, 0x02	; 2
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	61 e0       	ldi	r22, 0x01	; 1
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	8a e0       	ldi	r24, 0x0A	; 10
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <fwrite>
	printf("%u\n\r", arrow_pos);
     694:	1f 92       	push	r1
     696:	cf 93       	push	r28
     698:	8d e0       	ldi	r24, 0x0D	; 13
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	9f 93       	push	r25
     69e:	8f 93       	push	r24
     6a0:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
	
	for(uint8_t i = 0; i < m->subM_n; i++){
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	c0 e0       	ldi	r28, 0x00	; 0
     6ae:	17 c0       	rjmp	.+46     	; 0x6de <display_menu+0x78>
		OLED_goto_pos(i,16);
     6b0:	60 e1       	ldi	r22, 0x10	; 16
     6b2:	8c 2f       	mov	r24, r28
     6b4:	0e 94 75 05 	call	0xaea	; 0xaea <OLED_goto_pos>
		fprintf(oled_output,"%s",m->subMenu[i]->text);
     6b8:	ec 2f       	mov	r30, r28
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	33 96       	adiw	r30, 0x03	; 3
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	e0 0f       	add	r30, r16
     6c4:	f1 1f       	adc	r31, r17
     6c6:	01 90       	ld	r0, Z+
     6c8:	f0 81       	ld	r31, Z
     6ca:	e0 2d       	mov	r30, r0
     6cc:	60 91 f9 02 	lds	r22, 0x02F9	; 0x8002f9 <oled_output>
     6d0:	70 91 fa 02 	lds	r23, 0x02FA	; 0x8002fa <oled_output+0x1>
     6d4:	80 81       	ld	r24, Z
     6d6:	91 81       	ldd	r25, Z+1	; 0x01
     6d8:	0e 94 bf 0b 	call	0x177e	; 0x177e <fputs>
	
	OLED_goto_pos(arrow_pos, 0);
	fprintf(oled_output,"> ");
	printf("%u\n\r", arrow_pos);
	
	for(uint8_t i = 0; i < m->subM_n; i++){
     6dc:	cf 5f       	subi	r28, 0xFF	; 255
     6de:	f8 01       	movw	r30, r16
     6e0:	86 89       	ldd	r24, Z+22	; 0x16
     6e2:	c8 17       	cp	r28, r24
     6e4:	28 f3       	brcs	.-54     	; 0x6b0 <display_menu+0x4a>
		OLED_goto_pos(i,16);
		fprintf(oled_output,"%s",m->subMenu[i]->text);
	}
}
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	08 95       	ret

000006ee <menu_loop>:
	
	menu_ptr current = &menu_null;
	menu_loop(current);
}

void menu_loop(menu_ptr current){
     6ee:	8c 01       	movw	r16, r24
	uint8_t selected_subM = 0;
     6f0:	c0 e0       	ldi	r28, 0x00	; 0
     6f2:	2f ef       	ldi	r18, 0xFF	; 255
     6f4:	8f e7       	ldi	r24, 0x7F	; 127
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	21 50       	subi	r18, 0x01	; 1
     6fa:	80 40       	sbci	r24, 0x00	; 0
     6fc:	90 40       	sbci	r25, 0x00	; 0
     6fe:	e1 f7       	brne	.-8      	; 0x6f8 <menu_loop+0xa>
     700:	00 c0       	rjmp	.+0      	; 0x702 <menu_loop+0x14>
     702:	00 c0       	rjmp	.+0      	; 0x704 <menu_loop+0x16>
	while(1){
		_delay_ms(100);
		
		dir direction = JOY_get_dir();
     704:	0e 94 21 05 	call	0xa42	; 0xa42 <JOY_get_dir>
		switch(direction){
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	51 f0       	breq	.+20     	; 0x720 <menu_loop+0x32>
     70c:	28 f0       	brcs	.+10     	; 0x718 <menu_loop+0x2a>
     70e:	82 30       	cpi	r24, 0x02	; 2
     710:	b1 f0       	breq	.+44     	; 0x73e <menu_loop+0x50>
     712:	83 30       	cpi	r24, 0x03	; 3
     714:	d1 f0       	breq	.+52     	; 0x74a <menu_loop+0x5c>
     716:	36 c0       	rjmp	.+108    	; 0x784 <menu_loop+0x96>
			case UP:
				if (selected_subM>0)
     718:	cc 23       	and	r28, r28
     71a:	a1 f1       	breq	.+104    	; 0x784 <menu_loop+0x96>
					selected_subM--;
     71c:	c1 50       	subi	r28, 0x01	; 1
     71e:	32 c0       	rjmp	.+100    	; 0x784 <menu_loop+0x96>
				else
					selected_subM = 0;
				break;
			case DOWN:
				if (selected_subM<(current->subM_n)-1)
     720:	2c 2f       	mov	r18, r28
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	f8 01       	movw	r30, r16
     726:	46 89       	ldd	r20, Z+22	; 0x16
     728:	84 2f       	mov	r24, r20
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	28 17       	cp	r18, r24
     730:	39 07       	cpc	r19, r25
     732:	14 f4       	brge	.+4      	; 0x738 <menu_loop+0x4a>
					selected_subM++;
     734:	cf 5f       	subi	r28, 0xFF	; 255
     736:	26 c0       	rjmp	.+76     	; 0x784 <menu_loop+0x96>
				else
					selected_subM = (current->subM_n)-1;
     738:	cf ef       	ldi	r28, 0xFF	; 255
     73a:	c4 0f       	add	r28, r20
     73c:	23 c0       	rjmp	.+70     	; 0x784 <menu_loop+0x96>
				break;
			case LEFT:
				if(current->parent != NULL){
     73e:	f8 01       	movw	r30, r16
     740:	84 81       	ldd	r24, Z+4	; 0x04
     742:	95 81       	ldd	r25, Z+5	; 0x05
     744:	00 97       	sbiw	r24, 0x00	; 0
     746:	c9 f4       	brne	.+50     	; 0x77a <menu_loop+0x8c>
     748:	1d c0       	rjmp	.+58     	; 0x784 <menu_loop+0x96>
					current = current->parent;
					selected_subM = 0;
				}
				break;
			case RIGHT:
				if(current->subMenu[selected_subM]->function != NULL)
     74a:	ec 2f       	mov	r30, r28
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	33 96       	adiw	r30, 0x03	; 3
     750:	ee 0f       	add	r30, r30
     752:	ff 1f       	adc	r31, r31
     754:	e0 0f       	add	r30, r16
     756:	f1 1f       	adc	r31, r17
     758:	a0 81       	ld	r26, Z
     75a:	b1 81       	ldd	r27, Z+1	; 0x01
     75c:	12 96       	adiw	r26, 0x02	; 2
     75e:	ed 91       	ld	r30, X+
     760:	fc 91       	ld	r31, X
     762:	13 97       	sbiw	r26, 0x03	; 3
     764:	30 97       	sbiw	r30, 0x00	; 0
     766:	11 f0       	breq	.+4      	; 0x76c <menu_loop+0x7e>
					current->subMenu[selected_subM]->function();
     768:	09 95       	icall
     76a:	0c c0       	rjmp	.+24     	; 0x784 <menu_loop+0x96>
				else{
					if(current->subMenu[selected_subM]->subMenu[0] != NULL){
     76c:	16 96       	adiw	r26, 0x06	; 6
     76e:	8d 91       	ld	r24, X+
     770:	9c 91       	ld	r25, X
     772:	17 97       	sbiw	r26, 0x07	; 7
     774:	89 2b       	or	r24, r25
     776:	21 f4       	brne	.+8      	; 0x780 <menu_loop+0x92>
     778:	05 c0       	rjmp	.+10     	; 0x784 <menu_loop+0x96>
				else
					selected_subM = (current->subM_n)-1;
				break;
			case LEFT:
				if(current->parent != NULL){
					current = current->parent;
     77a:	8c 01       	movw	r16, r24
					selected_subM = 0;
     77c:	c0 e0       	ldi	r28, 0x00	; 0
     77e:	02 c0       	rjmp	.+4      	; 0x784 <menu_loop+0x96>
			case RIGHT:
				if(current->subMenu[selected_subM]->function != NULL)
					current->subMenu[selected_subM]->function();
				else{
					if(current->subMenu[selected_subM]->subMenu[0] != NULL){
						current = current->subMenu[selected_subM];
     780:	8d 01       	movw	r16, r26
						selected_subM = 0;
     782:	c0 e0       	ldi	r28, 0x00	; 0
				break;
			default:
				break;
		}
		
		OLED_reset();
     784:	0e 94 cc 05 	call	0xb98	; 0xb98 <OLED_reset>
		display_menu(current, selected_subM);
     788:	6c 2f       	mov	r22, r28
     78a:	c8 01       	movw	r24, r16
     78c:	0e 94 33 03 	call	0x666	; 0x666 <display_menu>
	}
     790:	b0 cf       	rjmp	.-160    	; 0x6f2 <menu_loop+0x4>

00000792 <menu_add>:
		OLED_goto_pos(i,16);
		fprintf(oled_output,"%s",m->subMenu[i]->text);
	}
}

menu_ptr menu_add(menu_ptr parent, char * text, void (*function)()) {
     792:	ef 92       	push	r14
     794:	ff 92       	push	r15
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	ec 01       	movw	r28, r24
     7a0:	7b 01       	movw	r14, r22
     7a2:	8a 01       	movw	r16, r20
	menu_ptr subMenu = (menu_ptr)malloc(sizeof(menu_t));
     7a4:	87 e1       	ldi	r24, 0x17	; 23
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 bb 09 	call	0x1376	; 0x1376 <malloc>
	subMenu->text = text;
     7ac:	fc 01       	movw	r30, r24
     7ae:	f1 82       	std	Z+1, r15	; 0x01
     7b0:	e0 82       	st	Z, r14
	subMenu->function = function;
     7b2:	13 83       	std	Z+3, r17	; 0x03
     7b4:	02 83       	std	Z+2, r16	; 0x02
	subMenu->parent = parent;
     7b6:	d5 83       	std	Z+5, r29	; 0x05
     7b8:	c4 83       	std	Z+4, r28	; 0x04
	subMenu->subM_n = 0;
     7ba:	16 8a       	std	Z+22, r1	; 0x16
	
	if (parent != NULL){
     7bc:	20 97       	sbiw	r28, 0x00	; 0
     7be:	61 f0       	breq	.+24     	; 0x7d8 <menu_add+0x46>
		parent->subMenu[parent->subM_n++] = subMenu;
     7c0:	ee 89       	ldd	r30, Y+22	; 0x16
     7c2:	21 e0       	ldi	r18, 0x01	; 1
     7c4:	2e 0f       	add	r18, r30
     7c6:	2e 8b       	std	Y+22, r18	; 0x16
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	33 96       	adiw	r30, 0x03	; 3
     7cc:	ee 0f       	add	r30, r30
     7ce:	ff 1f       	adc	r31, r31
     7d0:	ec 0f       	add	r30, r28
     7d2:	fd 1f       	adc	r31, r29
     7d4:	91 83       	std	Z+1, r25	; 0x01
     7d6:	80 83       	st	Z, r24
	}
	return subMenu;
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	08 95       	ret

000007e6 <menu_init>:
	OLED_print_figure(64,0,64,64);
	OLED_print_figure(32,0,64,64);
	_delay_ms(2000);
}

void menu_init(){
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	67 97       	sbiw	r28, 0x17	; 23
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
	menu_t menu_null = {"root",NULL,NULL,{NULL},0};
     7fa:	ce 01       	movw	r24, r28
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	7c 01       	movw	r14, r24
     800:	87 e1       	ldi	r24, 0x17	; 23
     802:	f7 01       	movw	r30, r14
     804:	11 92       	st	Z+, r1
     806:	8a 95       	dec	r24
     808:	e9 f7       	brne	.-6      	; 0x804 <menu_init+0x1e>
     80a:	82 e1       	ldi	r24, 0x12	; 18
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	9a 83       	std	Y+2, r25	; 0x02
     810:	89 83       	std	Y+1, r24	; 0x01
	
	menu_add(&menu_null, "HIGH SCORE", NULL);
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	67 e1       	ldi	r22, 0x17	; 23
     818:	71 e0       	ldi	r23, 0x01	; 1
     81a:	c7 01       	movw	r24, r14
     81c:	0e 94 c9 03 	call	0x792	; 0x792 <menu_add>
	menu_ptr menu_play = menu_add(&menu_null, "PLAY", NULL);
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	62 e2       	ldi	r22, 0x22	; 34
     826:	71 e0       	ldi	r23, 0x01	; 1
     828:	c7 01       	movw	r24, r14
     82a:	0e 94 c9 03 	call	0x792	; 0x792 <menu_add>
     82e:	6c 01       	movw	r12, r24
	menu_ptr menu_test = menu_add(&menu_null, "TEST", NULL);
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	67 e2       	ldi	r22, 0x27	; 39
     836:	71 e0       	ldi	r23, 0x01	; 1
     838:	c7 01       	movw	r24, r14
     83a:	0e 94 c9 03 	call	0x792	; 0x792 <menu_add>
     83e:	8c 01       	movw	r16, r24
	
	menu_add(menu_play, "1v1", &image_1);
     840:	4b ee       	ldi	r20, 0xEB	; 235
     842:	52 e0       	ldi	r21, 0x02	; 2
     844:	6c e2       	ldi	r22, 0x2C	; 44
     846:	71 e0       	ldi	r23, 0x01	; 1
     848:	c6 01       	movw	r24, r12
     84a:	0e 94 c9 03 	call	0x792	; 0x792 <menu_add>
	menu_add(menu_play, "2v2", &image_2v2);
     84e:	4d ef       	ldi	r20, 0xFD	; 253
     850:	52 e0       	ldi	r21, 0x02	; 2
     852:	60 e3       	ldi	r22, 0x30	; 48
     854:	71 e0       	ldi	r23, 0x01	; 1
     856:	c6 01       	movw	r24, r12
     858:	0e 94 c9 03 	call	0x792	; 0x792 <menu_add>
	menu_add(menu_play, "multiplayer", &multiplayer);
     85c:	45 e1       	ldi	r20, 0x15	; 21
     85e:	53 e0       	ldi	r21, 0x03	; 3
     860:	64 e3       	ldi	r22, 0x34	; 52
     862:	71 e0       	ldi	r23, 0x01	; 1
     864:	c6 01       	movw	r24, r12
     866:	0e 94 c9 03 	call	0x792	; 0x792 <menu_add>
	
	menu_add(menu_test, "UART", &test_UART);
     86a:	48 e0       	ldi	r20, 0x08	; 8
     86c:	57 e0       	ldi	r21, 0x07	; 7
     86e:	60 e4       	ldi	r22, 0x40	; 64
     870:	71 e0       	ldi	r23, 0x01	; 1
     872:	c8 01       	movw	r24, r16
     874:	0e 94 c9 03 	call	0x792	; 0x792 <menu_add>
	menu_add(menu_test, "SRAM", &test_SRAM);
     878:	4f e2       	ldi	r20, 0x2F	; 47
     87a:	57 e0       	ldi	r21, 0x07	; 7
     87c:	65 e4       	ldi	r22, 0x45	; 69
     87e:	71 e0       	ldi	r23, 0x01	; 1
     880:	c8 01       	movw	r24, r16
     882:	0e 94 c9 03 	call	0x792	; 0x792 <menu_add>
	menu_add(menu_test, "XMEM", &test_XMEM);
     886:	4a e8       	ldi	r20, 0x8A	; 138
     888:	57 e0       	ldi	r21, 0x07	; 7
     88a:	6a e4       	ldi	r22, 0x4A	; 74
     88c:	71 e0       	ldi	r23, 0x01	; 1
     88e:	c8 01       	movw	r24, r16
     890:	0e 94 c9 03 	call	0x792	; 0x792 <menu_add>
	menu_add(menu_test, "ADC", &test_ADC);
     894:	4f e1       	ldi	r20, 0x1F	; 31
     896:	58 e0       	ldi	r21, 0x08	; 8
     898:	6f e4       	ldi	r22, 0x4F	; 79
     89a:	71 e0       	ldi	r23, 0x01	; 1
     89c:	c8 01       	movw	r24, r16
     89e:	0e 94 c9 03 	call	0x792	; 0x792 <menu_add>
	menu_add(menu_test, "JOYSTICK", &test_JOYSTICK);
     8a2:	49 e6       	ldi	r20, 0x69	; 105
     8a4:	58 e0       	ldi	r21, 0x08	; 8
     8a6:	63 e5       	ldi	r22, 0x53	; 83
     8a8:	71 e0       	ldi	r23, 0x01	; 1
     8aa:	c8 01       	movw	r24, r16
     8ac:	0e 94 c9 03 	call	0x792	; 0x792 <menu_add>
	menu_add(menu_test, "OLED", &test_OLED);
     8b0:	47 ee       	ldi	r20, 0xE7	; 231
     8b2:	58 e0       	ldi	r21, 0x08	; 8
     8b4:	6c e5       	ldi	r22, 0x5C	; 92
     8b6:	71 e0       	ldi	r23, 0x01	; 1
     8b8:	c8 01       	movw	r24, r16
     8ba:	0e 94 c9 03 	call	0x792	; 0x792 <menu_add>
	void test_OLED();
	void test_MENU();
	*/
	
	menu_ptr current = &menu_null;
	menu_loop(current);
     8be:	c7 01       	movw	r24, r14
     8c0:	0e 94 77 03 	call	0x6ee	; 0x6ee <menu_loop>

000008c4 <JOY_calibrate>:
	DDRD &= ~(1<<JOY_BUTTON); //busy input active low
	PORTD |= (1<<JOY_BUTTON); //pull-up resistor
	JOY_calibrate();
	}

void JOY_calibrate(){
     8c4:	ef 92       	push	r14
     8c6:	ff 92       	push	r15
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
	//should have already initialized XMEM, UART, ADC
	printf("\n\rcalibrating gamepad... ");
     8ce:	81 e6       	ldi	r24, 0x61	; 97
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	9f 93       	push	r25
     8d4:	8f 93       	push	r24
     8d6:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
	uint16_t x = 0;
	uint16_t y = 0;
	
	for(uint8_t i=0; i<CALIB_SAMPLES; i++){
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	c0 e0       	ldi	r28, 0x00	; 0

void JOY_calibrate(){
	//should have already initialized XMEM, UART, ADC
	printf("\n\rcalibrating gamepad... ");
	uint16_t x = 0;
	uint16_t y = 0;
     8e0:	00 e0       	ldi	r16, 0x00	; 0
     8e2:	10 e0       	ldi	r17, 0x00	; 0
	}

void JOY_calibrate(){
	//should have already initialized XMEM, UART, ADC
	printf("\n\rcalibrating gamepad... ");
	uint16_t x = 0;
     8e4:	e1 2c       	mov	r14, r1
     8e6:	f1 2c       	mov	r15, r1
	uint16_t y = 0;
	
	for(uint8_t i=0; i<CALIB_SAMPLES; i++){
     8e8:	0b c0       	rjmp	.+22     	; 0x900 <JOY_calibrate+0x3c>
		ADC_sample4();
     8ea:	0e 94 dd 02 	call	0x5ba	; 0x5ba <ADC_sample4>
		y += ADC_read(); //in order: vert-horiz- ...
     8ee:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ADC_read>
     8f2:	08 0f       	add	r16, r24
     8f4:	11 1d       	adc	r17, r1
		x += ADC_read();
     8f6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ADC_read>
     8fa:	e8 0e       	add	r14, r24
     8fc:	f1 1c       	adc	r15, r1
	//should have already initialized XMEM, UART, ADC
	printf("\n\rcalibrating gamepad... ");
	uint16_t x = 0;
	uint16_t y = 0;
	
	for(uint8_t i=0; i<CALIB_SAMPLES; i++){
     8fe:	cf 5f       	subi	r28, 0xFF	; 255
     900:	c8 30       	cpi	r28, 0x08	; 8
     902:	98 f3       	brcs	.-26     	; 0x8ea <JOY_calibrate+0x26>
		ADC_sample4();
		y += ADC_read(); //in order: vert-horiz- ...
		x += ADC_read();
	}
	y /= CALIB_SAMPLES;
     904:	16 95       	lsr	r17
     906:	07 95       	ror	r16
     908:	16 95       	lsr	r17
     90a:	07 95       	ror	r16
     90c:	16 95       	lsr	r17
     90e:	07 95       	ror	r16
	x /= CALIB_SAMPLES;
     910:	f6 94       	lsr	r15
     912:	e7 94       	ror	r14
     914:	f6 94       	lsr	r15
     916:	e7 94       	ror	r14
     918:	f6 94       	lsr	r15
     91a:	e7 94       	ror	r14
	
	printf("done. CENTER = [%d,%d]\n\r",x,y);
     91c:	1f 93       	push	r17
     91e:	0f 93       	push	r16
     920:	ff 92       	push	r15
     922:	ef 92       	push	r14
     924:	8b e7       	ldi	r24, 0x7B	; 123
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	9f 93       	push	r25
     92a:	8f 93       	push	r24
     92c:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
	gamepad_center.x = x;
     930:	e5 ef       	ldi	r30, 0xF5	; 245
     932:	f2 e0       	ldi	r31, 0x02	; 2
     934:	f1 82       	std	Z+1, r15	; 0x01
     936:	e0 82       	st	Z, r14
	gamepad_center.y = y;
     938:	13 83       	std	Z+3, r17	; 0x03
     93a:	02 83       	std	Z+2, r16	; 0x02
}
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <JOY_init>:
#include "../include/gamepad.h"
#include "../../misc/utils.h"
extern pos_t gamepad_center;

void JOY_init(){
	DDRD &= ~(1<<JOY_BUTTON); //busy input active low
     954:	81 b3       	in	r24, 0x11	; 17
     956:	8f 7d       	andi	r24, 0xDF	; 223
     958:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<JOY_BUTTON); //pull-up resistor
     95a:	82 b3       	in	r24, 0x12	; 18
     95c:	80 62       	ori	r24, 0x20	; 32
     95e:	82 bb       	out	0x12, r24	; 18
	JOY_calibrate();
     960:	0e 94 62 04 	call	0x8c4	; 0x8c4 <JOY_calibrate>
     964:	08 95       	ret

00000966 <JOY_get_rel_pos>:
	printf("done. CENTER = [%d,%d]\n\r",x,y);
	gamepad_center.x = x;
	gamepad_center.y = y;
}

pos_t JOY_get_rel_pos(){
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
	ADC_sample4();
     96e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <ADC_sample4>
	int16_t y = ADC_read() - gamepad_center.y;
     972:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ADC_read>
     976:	08 2f       	mov	r16, r24
     978:	10 e0       	ldi	r17, 0x00	; 0
     97a:	c5 ef       	ldi	r28, 0xF5	; 245
     97c:	d2 e0       	ldi	r29, 0x02	; 2
     97e:	8a 81       	ldd	r24, Y+2	; 0x02
     980:	9b 81       	ldd	r25, Y+3	; 0x03
     982:	08 1b       	sub	r16, r24
     984:	19 0b       	sbc	r17, r25
	int16_t x = ADC_read() - gamepad_center.x;
     986:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ADC_read>
     98a:	28 2f       	mov	r18, r24
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	09 90       	ld	r0, Y+
     990:	d8 81       	ld	r29, Y
     992:	c0 2d       	mov	r28, r0
     994:	2c 1b       	sub	r18, r28
     996:	3d 0b       	sbc	r19, r29

	y = y * POS_SCALE / ((y > 0) ? (255-gamepad_center.y) : (0+gamepad_center.y));
     998:	c8 01       	movw	r24, r16
     99a:	96 95       	lsr	r25
     99c:	98 2f       	mov	r25, r24
     99e:	88 27       	eor	r24, r24
     9a0:	97 95       	ror	r25
     9a2:	87 95       	ror	r24
     9a4:	80 1b       	sub	r24, r16
     9a6:	91 0b       	sbc	r25, r17
     9a8:	10 16       	cp	r1, r16
     9aa:	11 06       	cpc	r1, r17
     9ac:	4c f4       	brge	.+18     	; 0x9c0 <JOY_get_rel_pos+0x5a>
     9ae:	40 91 f7 02 	lds	r20, 0x02F7	; 0x8002f7 <gamepad_center+0x2>
     9b2:	50 91 f8 02 	lds	r21, 0x02F8	; 0x8002f8 <gamepad_center+0x3>
     9b6:	6f ef       	ldi	r22, 0xFF	; 255
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	64 1b       	sub	r22, r20
     9bc:	75 0b       	sbc	r23, r21
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <JOY_get_rel_pos+0x62>
     9c0:	60 91 f7 02 	lds	r22, 0x02F7	; 0x8002f7 <gamepad_center+0x2>
     9c4:	70 91 f8 02 	lds	r23, 0x02F8	; 0x8002f8 <gamepad_center+0x3>
     9c8:	0e 94 93 09 	call	0x1326	; 0x1326 <__divmodhi4>
     9cc:	16 2f       	mov	r17, r22
     9ce:	47 2f       	mov	r20, r23
     9d0:	e6 2f       	mov	r30, r22
     9d2:	f7 2f       	mov	r31, r23
	x = x * POS_SCALE / ((x > 0) ? (255-gamepad_center.x) : (0+gamepad_center.x));
     9d4:	c9 01       	movw	r24, r18
     9d6:	96 95       	lsr	r25
     9d8:	98 2f       	mov	r25, r24
     9da:	88 27       	eor	r24, r24
     9dc:	97 95       	ror	r25
     9de:	87 95       	ror	r24
     9e0:	82 1b       	sub	r24, r18
     9e2:	93 0b       	sbc	r25, r19
     9e4:	12 16       	cp	r1, r18
     9e6:	13 06       	cpc	r1, r19
     9e8:	34 f4       	brge	.+12     	; 0x9f6 <JOY_get_rel_pos+0x90>
     9ea:	2f ef       	ldi	r18, 0xFF	; 255
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	b9 01       	movw	r22, r18
     9f0:	6c 1b       	sub	r22, r28
     9f2:	7d 0b       	sbc	r23, r29
     9f4:	eb 01       	movw	r28, r22
     9f6:	be 01       	movw	r22, r28
     9f8:	0e 94 93 09 	call	0x1326	; 0x1326 <__divmodhi4>
     9fc:	86 2f       	mov	r24, r22
     9fe:	97 2f       	mov	r25, r23
	
	
	y = MAX(-POS_SCALE,MIN(y,POS_SCALE));
     a00:	e2 38       	cpi	r30, 0x82	; 130
     a02:	ff 4f       	sbci	r31, 0xFF	; 255
     a04:	44 f0       	brlt	.+16     	; 0xa16 <JOY_get_rel_pos+0xb0>
     a06:	21 2f       	mov	r18, r17
     a08:	34 2f       	mov	r19, r20
     a0a:	20 38       	cpi	r18, 0x80	; 128
     a0c:	31 05       	cpc	r19, r1
     a0e:	2c f0       	brlt	.+10     	; 0xa1a <JOY_get_rel_pos+0xb4>
     a10:	2f e7       	ldi	r18, 0x7F	; 127
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <JOY_get_rel_pos+0xb4>
     a16:	21 e8       	ldi	r18, 0x81	; 129
     a18:	3f ef       	ldi	r19, 0xFF	; 255
	x = MAX(-POS_SCALE,MIN(x,POS_SCALE));
     a1a:	82 38       	cpi	r24, 0x82	; 130
     a1c:	9f 4f       	sbci	r25, 0xFF	; 255
     a1e:	44 f0       	brlt	.+16     	; 0xa30 <JOY_get_rel_pos+0xca>
     a20:	46 2f       	mov	r20, r22
     a22:	57 2f       	mov	r21, r23
     a24:	40 38       	cpi	r20, 0x80	; 128
     a26:	51 05       	cpc	r21, r1
     a28:	2c f0       	brlt	.+10     	; 0xa34 <JOY_get_rel_pos+0xce>
     a2a:	4f e7       	ldi	r20, 0x7F	; 127
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <JOY_get_rel_pos+0xce>
     a30:	41 e8       	ldi	r20, 0x81	; 129
     a32:	5f ef       	ldi	r21, 0xFF	; 255
	
	return (pos_t){x, y};
     a34:	ba 01       	movw	r22, r20
     a36:	c9 01       	movw	r24, r18
}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	08 95       	ret

00000a42 <JOY_get_dir>:

dir JOY_get_dir(){
	pos_t rel_pos = JOY_get_rel_pos();
     a42:	0e 94 b3 04 	call	0x966	; 0x966 <JOY_get_rel_pos>
	
	if ((abs(rel_pos.x) <= IDLE_VAL) && (abs(rel_pos.y) <= IDLE_VAL)){
     a46:	ab 01       	movw	r20, r22
     a48:	9b 01       	movw	r18, r22
     a4a:	21 5c       	subi	r18, 0xC1	; 193
     a4c:	3f 4f       	sbci	r19, 0xFF	; 255
     a4e:	2f 37       	cpi	r18, 0x7F	; 127
     a50:	31 05       	cpc	r19, r1
     a52:	30 f4       	brcc	.+12     	; 0xa60 <JOY_get_dir+0x1e>
     a54:	9c 01       	movw	r18, r24
     a56:	21 5c       	subi	r18, 0xC1	; 193
     a58:	3f 4f       	sbci	r19, 0xFF	; 255
     a5a:	2f 37       	cpi	r18, 0x7F	; 127
     a5c:	31 05       	cpc	r19, r1
     a5e:	e8 f0       	brcs	.+58     	; 0xa9a <JOY_get_dir+0x58>
		return IDLE;
	}
	else if (abs(rel_pos.y) > abs(rel_pos.x)){
     a60:	fc 01       	movw	r30, r24
     a62:	9c 01       	movw	r18, r24
     a64:	99 23       	and	r25, r25
     a66:	24 f4       	brge	.+8      	; 0xa70 <JOY_get_dir+0x2e>
     a68:	22 27       	eor	r18, r18
     a6a:	33 27       	eor	r19, r19
     a6c:	28 1b       	sub	r18, r24
     a6e:	39 0b       	sbc	r19, r25
     a70:	db 01       	movw	r26, r22
     a72:	55 23       	and	r21, r21
     a74:	24 f4       	brge	.+8      	; 0xa7e <JOY_get_dir+0x3c>
     a76:	aa 27       	eor	r26, r26
     a78:	bb 27       	eor	r27, r27
     a7a:	a6 1b       	sub	r26, r22
     a7c:	b7 0b       	sbc	r27, r23
     a7e:	a2 17       	cp	r26, r18
     a80:	b3 07       	cpc	r27, r19
     a82:	34 f4       	brge	.+12     	; 0xa90 <JOY_get_dir+0x4e>
		return (rel_pos.y > 0) ? UP : DOWN;
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	1e 16       	cp	r1, r30
     a88:	1f 06       	cpc	r1, r31
     a8a:	54 f4       	brge	.+20     	; 0xaa0 <JOY_get_dir+0x5e>
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 95       	ret
	}
	return (rel_pos.x > 0) ? RIGHT : LEFT;
     a90:	14 16       	cp	r1, r20
     a92:	15 06       	cpc	r1, r21
     a94:	24 f4       	brge	.+8      	; 0xa9e <JOY_get_dir+0x5c>
     a96:	83 e0       	ldi	r24, 0x03	; 3
     a98:	08 95       	ret

dir JOY_get_dir(){
	pos_t rel_pos = JOY_get_rel_pos();
	
	if ((abs(rel_pos.x) <= IDLE_VAL) && (abs(rel_pos.y) <= IDLE_VAL)){
		return IDLE;
     a9a:	84 e0       	ldi	r24, 0x04	; 4
     a9c:	08 95       	ret
	}
	else if (abs(rel_pos.y) > abs(rel_pos.x)){
		return (rel_pos.y > 0) ? UP : DOWN;
	}
	return (rel_pos.x > 0) ? RIGHT : LEFT;
     a9e:	82 e0       	ldi	r24, 0x02	; 2
}
     aa0:	08 95       	ret

00000aa2 <JOY_get_sliders>:

sliders_t JOY_get_sliders(){
     aa2:	cf 93       	push	r28
	ADC_sample4();
     aa4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <ADC_sample4>
	ADC_read(); ADC_read(); //trash the first two
     aa8:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ADC_read>
     aac:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ADC_read>
	
	uint8_t left = ADC_read();
     ab0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ADC_read>
     ab4:	c8 2f       	mov	r28, r24
	uint8_t right = ADC_read();
     ab6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ADC_read>
     aba:	98 2f       	mov	r25, r24
	return (sliders_t){left,right};
     abc:	8c 2f       	mov	r24, r28
     abe:	cf 91       	pop	r28
     ac0:	08 95       	ret

00000ac2 <OLED_write_cmd>:

//--private

void OLED_write_cmd(uint8_t cmd){
	volatile char *ext_mem = (char *) OLED_CMD_ADDR;
	ext_mem[0x0000] = cmd;
     ac2:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xcf8>
     ac6:	08 95       	ret

00000ac8 <OLED_goto_row>:
}

//--positioning

void OLED_goto_row(uint8_t row){
	OLED_write_cmd(0xB0 + row);
     ac8:	80 55       	subi	r24, 0x50	; 80
     aca:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
     ace:	08 95       	ret

00000ad0 <OLED_goto_col>:
}
void OLED_goto_col(uint8_t col){
     ad0:	cf 93       	push	r28
     ad2:	c8 2f       	mov	r28, r24
	OLED_write_cmd(col & 0x0F);			// Set low nibble col address : 00-0F
     ad4:	8f 70       	andi	r24, 0x0F	; 15
     ad6:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0x10 | (col >> 4));	// Set high nibble col address : 10-1F
     ada:	8c 2f       	mov	r24, r28
     adc:	82 95       	swap	r24
     ade:	8f 70       	andi	r24, 0x0F	; 15
     ae0:	80 61       	ori	r24, 0x10	; 16
     ae2:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
}
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <OLED_goto_pos>:
void OLED_goto_pos(uint8_t row, uint8_t col) {
     aea:	cf 93       	push	r28
     aec:	c6 2f       	mov	r28, r22
	OLED_goto_row(row);
     aee:	0e 94 64 05 	call	0xac8	; 0xac8 <OLED_goto_row>
	OLED_goto_col(col);
     af2:	8c 2f       	mov	r24, r28
     af4:	0e 94 68 05 	call	0xad0	; 0xad0 <OLED_goto_col>
}
     af8:	cf 91       	pop	r28
     afa:	08 95       	ret

00000afc <OLED_invert>:
	OLED_restrict_pages(0,7);
	OLED_goto_pos(0,0);
}

void OLED_invert() {
	OLED_INVERTED ? OLED_write_cmd(0xA6) : OLED_write_cmd(0xA7); //normal : inverted
     afc:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <__data_end>
     b00:	88 23       	and	r24, r24
     b02:	21 f0       	breq	.+8      	; 0xb0c <OLED_invert+0x10>
     b04:	86 ea       	ldi	r24, 0xA6	; 166
     b06:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
     b0a:	03 c0       	rjmp	.+6      	; 0xb12 <OLED_invert+0x16>
     b0c:	87 ea       	ldi	r24, 0xA7	; 167
     b0e:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_INVERTED = !OLED_INVERTED;
     b12:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <__data_end>
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	89 27       	eor	r24, r25
     b1a:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <__data_end>
     b1e:	08 95       	ret

00000b20 <OLED_restrict_cols>:
}

void OLED_restrict_cols(uint8_t init_col, uint8_t end_col) {
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	d8 2f       	mov	r29, r24
     b26:	c6 2f       	mov	r28, r22
	OLED_write_cmd(0x21);
     b28:	81 e2       	ldi	r24, 0x21	; 33
     b2a:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(init_col);
     b2e:	8d 2f       	mov	r24, r29
     b30:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(end_col);
     b34:	8c 2f       	mov	r24, r28
     b36:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
}
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	08 95       	ret

00000b40 <OLED_restrict_pages>:

void OLED_restrict_pages(uint8_t init_page, uint8_t end_page) {
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	d8 2f       	mov	r29, r24
     b46:	c6 2f       	mov	r28, r22
	OLED_write_cmd(0x22);
     b48:	82 e2       	ldi	r24, 0x22	; 34
     b4a:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(init_page);
     b4e:	8d 2f       	mov	r24, r29
     b50:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(end_page);
     b54:	8c 2f       	mov	r24, r28
     b56:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
}
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <OLED_write_data>:
	volatile char *ext_mem = (char *) OLED_CMD_ADDR;
	ext_mem[0x0000] = cmd;
}
void OLED_write_data(uint8_t data){
	volatile char *ext_mem = (char *) OLED_DATA_ADDR;
	ext_mem[0x0000] = data;
     b60:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xef8>
     b64:	08 95       	ret

00000b66 <OLED_clear_row>:
	return (oled_pos_t){col, row, bit};
}

//--clearing

void OLED_clear_row(uint8_t row) {
     b66:	cf 93       	push	r28
	OLED_goto_pos(row,0);
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	0e 94 75 05 	call	0xaea	; 0xaea <OLED_goto_pos>
	for (uint8_t col = 0; col < 128; col++) {
     b6e:	c0 e0       	ldi	r28, 0x00	; 0
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <OLED_clear_row+0x14>
		OLED_write_data(0x00);
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	0e 94 b0 05 	call	0xb60	; 0xb60 <OLED_write_data>

//--clearing

void OLED_clear_row(uint8_t row) {
	OLED_goto_pos(row,0);
	for (uint8_t col = 0; col < 128; col++) {
     b78:	cf 5f       	subi	r28, 0xFF	; 255
     b7a:	cc 23       	and	r28, r28
     b7c:	d4 f7       	brge	.-12     	; 0xb72 <OLED_clear_row+0xc>
		OLED_write_data(0x00);
	}
}
     b7e:	cf 91       	pop	r28
     b80:	08 95       	ret

00000b82 <OLED_clear>:
void OLED_clear(){
     b82:	cf 93       	push	r28
	//OLED_restrict_cols(0,127);
	//OLED_restrict_pages(0,7);
	for (uint8_t page = 0; page < 8; page++) {
     b84:	c0 e0       	ldi	r28, 0x00	; 0
     b86:	04 c0       	rjmp	.+8      	; 0xb90 <OLED_clear+0xe>
		OLED_clear_row(page);
     b88:	8c 2f       	mov	r24, r28
     b8a:	0e 94 b3 05 	call	0xb66	; 0xb66 <OLED_clear_row>
	}
}
void OLED_clear(){
	//OLED_restrict_cols(0,127);
	//OLED_restrict_pages(0,7);
	for (uint8_t page = 0; page < 8; page++) {
     b8e:	cf 5f       	subi	r28, 0xFF	; 255
     b90:	c8 30       	cpi	r28, 0x08	; 8
     b92:	d0 f3       	brcs	.-12     	; 0xb88 <OLED_clear+0x6>
		OLED_clear_row(page);
	}
}
     b94:	cf 91       	pop	r28
     b96:	08 95       	ret

00000b98 <OLED_reset>:

//--utilities

void OLED_reset() {
	OLED_clear();
     b98:	0e 94 c1 05 	call	0xb82	; 0xb82 <OLED_clear>
	OLED_restrict_cols(0,127);
     b9c:	6f e7       	ldi	r22, 0x7F	; 127
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	0e 94 90 05 	call	0xb20	; 0xb20 <OLED_restrict_cols>
	OLED_restrict_pages(0,7);
     ba4:	67 e0       	ldi	r22, 0x07	; 7
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	0e 94 a0 05 	call	0xb40	; 0xb40 <OLED_restrict_pages>
	OLED_goto_pos(0,0);
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	0e 94 75 05 	call	0xaea	; 0xaea <OLED_goto_pos>
     bb4:	08 95       	ret

00000bb6 <OLED_init>:
//printf redirection
FILE *oled_output;
bool OLED_INVERTED = false;

void OLED_init(){
	OLED_write_cmd(0xAE);    //OFF
     bb6:	8e ea       	ldi	r24, 0xAE	; 174
     bb8:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	
	//!!! DONT TOUCH THESE SETTINGS !!! --------- (from datasheet)
	OLED_write_cmd(0xa1);    //segment remap
     bbc:	81 ea       	ldi	r24, 0xA1	; 161
     bbe:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0xda);    //common pads hardware: alternative
     bc2:	8a ed       	ldi	r24, 0xDA	; 218
     bc4:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0x12);
     bc8:	82 e1       	ldi	r24, 0x12	; 18
     bca:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0xc8);    //common output scan direction:com63~com0
     bce:	88 ec       	ldi	r24, 0xC8	; 200
     bd0:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0xa8);    //multiplex ration mode:63
     bd4:	88 ea       	ldi	r24, 0xA8	; 168
     bd6:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0x3f);
     bda:	8f e3       	ldi	r24, 0x3F	; 63
     bdc:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0xd5);    //display divide ratio/osc. freq. mode
     be0:	85 ed       	ldi	r24, 0xD5	; 213
     be2:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0x80);
     be6:	80 e8       	ldi	r24, 0x80	; 128
     be8:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0xd9);	 //set pre-charge period
     bec:	89 ed       	ldi	r24, 0xD9	; 217
     bee:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0x21);
     bf2:	81 e2       	ldi	r24, 0x21	; 33
     bf4:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0xdb);    //VCOM deselect level mode
     bf8:	8b ed       	ldi	r24, 0xDB	; 219
     bfa:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0x30);
     bfe:	80 e3       	ldi	r24, 0x30	; 48
     c00:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0xad);    //master configuration
     c04:	8d ea       	ldi	r24, 0xAD	; 173
     c06:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0x00);
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	//-------------------------------------------	
	
	OLED_write_cmd(0xD3);	//set display offset
     c10:	83 ed       	ldi	r24, 0xD3	; 211
     c12:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0x00);	
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0x40);
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	
	OLED_write_cmd(0x20);   //Set Memory Addressing Mode
     c22:	80 e2       	ldi	r24, 0x20	; 32
     c24:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0b00);	//PAGE addressing mode => HORIZ -- all auto
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	
	OLED_write_cmd(0x81);   //contrast control
     c2e:	81 e8       	ldi	r24, 0x81	; 129
     c30:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0xFF);	//contr lvl : 0-255
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	
	OLED_write_cmd(0xA6);    //A6 = normal B&W (A7 = inverse W&B)
     c3a:	86 ea       	ldi	r24, 0xA6	; 166
     c3c:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0xA4);    //resume GDDRAM content (A5 = blank screen ON)
     c40:	84 ea       	ldi	r24, 0xA4	; 164
     c42:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	OLED_write_cmd(0xAF);    //ON
     c46:	8f ea       	ldi	r24, 0xAF	; 175
     c48:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_write_cmd>
	
	oled_output = fdevopen(OLED_putchar8, NULL);
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	8e e4       	ldi	r24, 0x4E	; 78
     c52:	96 e0       	ldi	r25, 0x06	; 6
     c54:	0e 94 38 0b 	call	0x1670	; 0x1670 <fdevopen>
     c58:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <oled_output+0x1>
     c5c:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <oled_output>
	OLED_reset();
     c60:	0e 94 cc 05 	call	0xb98	; 0xb98 <OLED_reset>
     c64:	08 95       	ret

00000c66 <OLED_print_8char>:
	OLED_write_cmd(end_page);
}

//----

void OLED_print_8char(char c){
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
	c = c - 32;
     c6a:	d0 ee       	ldi	r29, 0xE0	; 224
     c6c:	d8 0f       	add	r29, r24
	for (uint8_t i=0; i<8; i++){
     c6e:	c0 e0       	ldi	r28, 0x00	; 0
     c70:	10 c0       	rjmp	.+32     	; 0xc92 <OLED_print_8char+0x2c>
		unsigned char byte = pgm_read_byte(&font8[(uint8_t)c][i]);
     c72:	ed 2f       	mov	r30, r29
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	ee 0f       	add	r30, r30
     c78:	ff 1f       	adc	r31, r31
     c7a:	ee 0f       	add	r30, r30
     c7c:	ff 1f       	adc	r31, r31
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	ec 0f       	add	r30, r28
     c84:	f1 1d       	adc	r31, r1
     c86:	e0 59       	subi	r30, 0x90	; 144
     c88:	fd 4f       	sbci	r31, 0xFD	; 253
     c8a:	84 91       	lpm	r24, Z
		OLED_write_data((uint8_t)byte);
     c8c:	0e 94 b0 05 	call	0xb60	; 0xb60 <OLED_write_data>

//----

void OLED_print_8char(char c){
	c = c - 32;
	for (uint8_t i=0; i<8; i++){
     c90:	cf 5f       	subi	r28, 0xFF	; 255
     c92:	c8 30       	cpi	r28, 0x08	; 8
     c94:	70 f3       	brcs	.-36     	; 0xc72 <OLED_print_8char+0xc>
		unsigned char byte = pgm_read_byte(&font8[(uint8_t)c][i]);
		OLED_write_data((uint8_t)byte);
	}
}
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	08 95       	ret

00000c9c <OLED_putchar8>:
int OLED_putchar8(char c, FILE *stream){
	OLED_print_8char(c);
     c9c:	0e 94 33 06 	call	0xc66	; 0xc66 <OLED_print_8char>
	return 0;
}
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	08 95       	ret

00000ca6 <OLED_print_figure>:

void OLED_print_figure(uint8_t x, uint8_t y, uint8_t width, uint8_t height) {
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	c6 2f       	mov	r28, r22
     cb0:	04 2f       	mov	r16, r20
     cb2:	12 2f       	mov	r17, r18
	OLED_restrict_cols(x,x+width-1);
     cb4:	68 2f       	mov	r22, r24
     cb6:	64 0f       	add	r22, r20
     cb8:	61 50       	subi	r22, 0x01	; 1
     cba:	0e 94 90 05 	call	0xb20	; 0xb20 <OLED_restrict_cols>
	OLED_restrict_pages(y,y+height/8-1);
     cbe:	61 2f       	mov	r22, r17
     cc0:	66 95       	lsr	r22
     cc2:	66 95       	lsr	r22
     cc4:	66 95       	lsr	r22
     cc6:	6c 0f       	add	r22, r28
     cc8:	61 50       	subi	r22, 0x01	; 1
     cca:	8c 2f       	mov	r24, r28
     ccc:	0e 94 a0 05 	call	0xb40	; 0xb40 <OLED_restrict_pages>
	for(int i=0; i<width*height/8; i++){
     cd0:	c0 e0       	ldi	r28, 0x00	; 0
     cd2:	d0 e0       	ldi	r29, 0x00	; 0
     cd4:	07 c0       	rjmp	.+14     	; 0xce4 <OLED_print_figure+0x3e>
		unsigned char byte = pgm_read_byte(&joystick_img[i]);
     cd6:	fe 01       	movw	r30, r28
     cd8:	e0 59       	subi	r30, 0x90	; 144
     cda:	ff 4f       	sbci	r31, 0xFF	; 255
     cdc:	84 91       	lpm	r24, Z
		OLED_write_data(byte);
     cde:	0e 94 b0 05 	call	0xb60	; 0xb60 <OLED_write_data>
}

void OLED_print_figure(uint8_t x, uint8_t y, uint8_t width, uint8_t height) {
	OLED_restrict_cols(x,x+width-1);
	OLED_restrict_pages(y,y+height/8-1);
	for(int i=0; i<width*height/8; i++){
     ce2:	21 96       	adiw	r28, 0x01	; 1
     ce4:	01 9f       	mul	r16, r17
     ce6:	c0 01       	movw	r24, r0
     ce8:	11 24       	eor	r1, r1
     cea:	99 23       	and	r25, r25
     cec:	0c f4       	brge	.+2      	; 0xcf0 <OLED_print_figure+0x4a>
     cee:	07 96       	adiw	r24, 0x07	; 7
     cf0:	95 95       	asr	r25
     cf2:	87 95       	ror	r24
     cf4:	95 95       	asr	r25
     cf6:	87 95       	ror	r24
     cf8:	95 95       	asr	r25
     cfa:	87 95       	ror	r24
     cfc:	c8 17       	cp	r28, r24
     cfe:	d9 07       	cpc	r29, r25
     d00:	54 f3       	brlt	.-44     	; 0xcd6 <OLED_print_figure+0x30>
		unsigned char byte = pgm_read_byte(&joystick_img[i]);
		OLED_write_data(byte);
	}
}
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	08 95       	ret

00000d0c <UART_init>:

//--------

void UART_init(unsigned int ubrr) {

	cli(); //disable interrupts
     d0c:	f8 94       	cli

	UBRR0H = (unsigned char)(ubrr>>8);	//set baud rate
     d0e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     d10:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<TXCIE0) | (1<<RXCIE0);  //enable RX,TX and TXC,RXC interrupts
     d12:	88 ed       	ldi	r24, 0xD8	; 216
     d14:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3<<UCSZ00); //frame format: 8 data bits, 2 stop bit, parity: none
     d16:	8e e8       	ldi	r24, 0x8E	; 142
     d18:	80 bd       	out	0x20, r24	; 32
	
	uart_output = fdevopen(UART_putchar, NULL);
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	89 eb       	ldi	r24, 0xB9	; 185
     d20:	96 e0       	ldi	r25, 0x06	; 6
     d22:	0e 94 38 0b 	call	0x1670	; 0x1670 <fdevopen>
     d26:	90 93 fc 02 	sts	0x02FC, r25	; 0x8002fc <uart_output+0x1>
     d2a:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <uart_output>
	stdout = uart_output;
     d2e:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <__iob+0x3>
     d32:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <__iob+0x2>
	
	sei();  //re-enable global interrupt
     d36:	78 94       	sei
	
	//set led pins
	DDRB |= (1<<TXLED) | (1<<RXLED);	//direction: output
     d38:	87 b3       	in	r24, 0x17	; 23
     d3a:	86 60       	ori	r24, 0x06	; 6
     d3c:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<TXLED) | (1<<RXLED);	//turn them off (sink-mode)
     d3e:	88 b3       	in	r24, 0x18	; 24
     d40:	86 60       	ori	r24, 0x06	; 6
     d42:	88 bb       	out	0x18, r24	; 24
     d44:	08 95       	ret

00000d46 <__vector_23>:
}

//-------- TRANSMISSION -----------

ISR(USART0_TXC_vect) {
     d46:	1f 92       	push	r1
     d48:	0f 92       	push	r0
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	0f 92       	push	r0
     d4e:	11 24       	eor	r1, r1
     d50:	8f 93       	push	r24
     d52:	9f 93       	push	r25
	PORTB ^= (1<<TXLED); //blink as response of successful transmission
     d54:	98 b3       	in	r25, 0x18	; 24
     d56:	84 e0       	ldi	r24, 0x04	; 4
     d58:	89 27       	eor	r24, r25
     d5a:	88 bb       	out	0x18, r24	; 24
}
     d5c:	9f 91       	pop	r25
     d5e:	8f 91       	pop	r24
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	0f 90       	pop	r0
     d66:	1f 90       	pop	r1
     d68:	18 95       	reti

00000d6a <UART_transmit>:

void UART_transmit(char data){
	while (!(UCSR0A & (1<<UDRE0))); //wait until UDRE->1 = ready
     d6a:	5d 9b       	sbis	0x0b, 5	; 11
     d6c:	fe cf       	rjmp	.-4      	; 0xd6a <UART_transmit>
	UDR0 = data;
     d6e:	8c b9       	out	0x0c, r24	; 12
     d70:	08 95       	ret

00000d72 <UART_putchar>:
}

// using two different functions transmit data (maybe unify them under putchar) / maybe adding ring buffer to write data also
int UART_putchar(char c, FILE *stream)
{	UART_transmit(c);
     d72:	0e 94 b5 06 	call	0xd6a	; 0xd6a <UART_transmit>
	return 0;
}
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	08 95       	ret

00000d7c <UART_receive>:

//---------- RECEIVING ------------

char UART_receive(){
	//frame-error OR data-over-run OR parity-error
	if ( UCSR0A & ((1<<FE0)|(1<<DOR0)|(1<<UPE0)) )
     d7c:	8b b1       	in	r24, 0x0b	; 11
     d7e:	8c 71       	andi	r24, 0x1C	; 28
     d80:	31 f4       	brne	.+12     	; 0xd8e <UART_receive+0x12>
		return -1;
	
	PORTB ^= (1<<RXLED); //blink led to report success of rx
     d82:	98 b3       	in	r25, 0x18	; 24
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	89 27       	eor	r24, r25
     d88:	88 bb       	out	0x18, r24	; 24
	return UDR0;
     d8a:	8c b1       	in	r24, 0x0c	; 12
     d8c:	08 95       	ret
//---------- RECEIVING ------------

char UART_receive(){
	//frame-error OR data-over-run OR parity-error
	if ( UCSR0A & ((1<<FE0)|(1<<DOR0)|(1<<UPE0)) )
		return -1;
     d8e:	8f ef       	ldi	r24, 0xFF	; 255
	
	PORTB ^= (1<<RXLED); //blink led to report success of rx
	return UDR0;
}
     d90:	08 95       	ret

00000d92 <__vector_19>:

// Interrupt service routine for receiving data
ISR(USART0_RXC_vect) {
     d92:	1f 92       	push	r1
     d94:	0f 92       	push	r0
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	0f 92       	push	r0
     d9a:	11 24       	eor	r1, r1
     d9c:	2f 93       	push	r18
     d9e:	3f 93       	push	r19
     da0:	4f 93       	push	r20
     da2:	5f 93       	push	r21
     da4:	6f 93       	push	r22
     da6:	7f 93       	push	r23
     da8:	8f 93       	push	r24
     daa:	9f 93       	push	r25
     dac:	af 93       	push	r26
     dae:	bf 93       	push	r27
     db0:	ef 93       	push	r30
     db2:	ff 93       	push	r31
	received_data = UART_receive();
     db4:	0e 94 be 06 	call	0xd7c	; 0xd7c <UART_receive>
     db8:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <received_data>
	printf("@echo: %c\n\r", received_data);
     dbc:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <received_data>
     dc0:	1f 92       	push	r1
     dc2:	8f 93       	push	r24
     dc4:	84 e9       	ldi	r24, 0x94	; 148
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	9f 93       	push	r25
     dca:	8f 93       	push	r24
     dcc:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	ff 91       	pop	r31
     dda:	ef 91       	pop	r30
     ddc:	bf 91       	pop	r27
     dde:	af 91       	pop	r26
     de0:	9f 91       	pop	r25
     de2:	8f 91       	pop	r24
     de4:	7f 91       	pop	r23
     de6:	6f 91       	pop	r22
     de8:	5f 91       	pop	r21
     dea:	4f 91       	pop	r20
     dec:	3f 91       	pop	r19
     dee:	2f 91       	pop	r18
     df0:	0f 90       	pop	r0
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	0f 90       	pop	r0
     df6:	1f 90       	pop	r1
     df8:	18 95       	reti

00000dfa <XMEM_init>:
#include "../include/XMEM.h"

void XMEM_init(){
	MCUCR |= (1<<SRE);
     dfa:	85 b7       	in	r24, 0x35	; 53
     dfc:	80 68       	ori	r24, 0x80	; 128
     dfe:	85 bf       	out	0x35, r24	; 53
	SFIOR = (1<<XMM2); //XMM=100 - mask PA7-4 for jtag
     e00:	80 e2       	ldi	r24, 0x20	; 32
     e02:	80 bf       	out	0x30, r24	; 48
     e04:	08 95       	ret

00000e06 <main>:
#include "utils.h"
#include "../drivers/include/OLED.h"

int main(void) {
	test_MENU();
     e06:	0e 94 82 09 	call	0x1304	; 0x1304 <test_MENU>
}
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	08 95       	ret

00000e10 <test_UART>:
#include "utils.h"

extern FILE *oled_output;

void test_UART(){
	UART_init(MYUBRR);
     e10:	8f e1       	ldi	r24, 0x1F	; 31
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 86 06 	call	0xd0c	; 0xd0c <UART_init>
	printf("\nProva trasmissione\n\r");
     e18:	80 ea       	ldi	r24, 0xA0	; 160
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	9f 93       	push	r25
     e1e:	8f 93       	push	r24
     e20:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
	int n = 0;
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
	while(1){
		printf("%d\n\r",n++);
     e2c:	ec 01       	movw	r28, r24
     e2e:	21 96       	adiw	r28, 0x01	; 1
     e30:	9f 93       	push	r25
     e32:	8f 93       	push	r24
     e34:	84 ee       	ldi	r24, 0xE4	; 228
     e36:	92 e0       	ldi	r25, 0x02	; 2
     e38:	9f 93       	push	r25
     e3a:	8f 93       	push	r24
     e3c:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
     e40:	2f ef       	ldi	r18, 0xFF	; 255
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	92 e0       	ldi	r25, 0x02	; 2
     e46:	21 50       	subi	r18, 0x01	; 1
     e48:	80 40       	sbci	r24, 0x00	; 0
     e4a:	90 40       	sbci	r25, 0x00	; 0
     e4c:	e1 f7       	brne	.-8      	; 0xe46 <test_UART+0x36>
     e4e:	00 c0       	rjmp	.+0      	; 0xe50 <test_UART+0x40>
     e50:	00 c0       	rjmp	.+0      	; 0xe52 <test_UART+0x42>
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	ce 01       	movw	r24, r28
     e5c:	e7 cf       	rjmp	.-50     	; 0xe2c <test_UART+0x1c>

00000e5e <test_SRAM>:
		_delay_ms(200);
	}
}

void test_SRAM(void)
{	
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
	XMEM_init();
     e6a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <XMEM_init>
	UART_init(MYUBRR);
     e6e:	8f e1       	ldi	r24, 0x1F	; 31
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 86 06 	call	0xd0c	; 0xd0c <UART_init>
	volatile char *ext_ram = (char *) SRAM_BASE_ADDR; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n\r");
     e76:	86 eb       	ldi	r24, 0xB6	; 182
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	9f 93       	push	r25
     e7c:	8f 93       	push	r24
     e7e:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     e82:	0e 94 28 0b 	call	0x1650	; 0x1650 <rand>
     e86:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     e88:	0e 94 2d 0b 	call	0x165a	; 0x165a <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	c0 e0       	ldi	r28, 0x00	; 0
     e92:	d0 e0       	ldi	r29, 0x00	; 0
{	
	XMEM_init();
	UART_init(MYUBRR);
	volatile char *ext_ram = (char *) SRAM_BASE_ADDR; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     e94:	00 e0       	ldi	r16, 0x00	; 0
     e96:	10 e0       	ldi	r17, 0x00	; 0
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     e98:	0b c0       	rjmp	.+22     	; 0xeb0 <test_SRAM+0x52>
		uint8_t some_value = rand();
     e9a:	0e 94 28 0b 	call	0x1650	; 0x1650 <rand>
		ext_ram[i] = some_value;
     e9e:	fe 01       	movw	r30, r28
     ea0:	f8 5e       	subi	r31, 0xE8	; 232
     ea2:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     ea4:	90 81       	ld	r25, Z
		if (retreived_value != some_value) {
     ea6:	89 17       	cp	r24, r25
     ea8:	11 f0       	breq	.+4      	; 0xeae <test_SRAM+0x50>
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			write_errors++;
     eaa:	0f 5f       	subi	r16, 0xFF	; 255
     eac:	1f 4f       	sbci	r17, 0xFF	; 255
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     eae:	21 96       	adiw	r28, 0x01	; 1
     eb0:	c1 15       	cp	r28, r1
     eb2:	88 e0       	ldi	r24, 0x08	; 8
     eb4:	d8 07       	cpc	r29, r24
     eb6:	88 f3       	brcs	.-30     	; 0xe9a <test_SRAM+0x3c>
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
     eb8:	c7 01       	movw	r24, r14
     eba:	0e 94 2d 0b 	call	0x165a	; 0x165a <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     ebe:	c0 e0       	ldi	r28, 0x00	; 0
     ec0:	d0 e0       	ldi	r29, 0x00	; 0
	XMEM_init();
	UART_init(MYUBRR);
	volatile char *ext_ram = (char *) SRAM_BASE_ADDR; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     ec2:	e1 2c       	mov	r14, r1
     ec4:	f1 2c       	mov	r15, r1
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     ec6:	0b c0       	rjmp	.+22     	; 0xede <test_SRAM+0x80>
		uint8_t some_value = rand();
     ec8:	0e 94 28 0b 	call	0x1650	; 0x1650 <rand>
		uint8_t retreived_value = ext_ram[i];
     ecc:	fe 01       	movw	r30, r28
     ece:	f8 5e       	subi	r31, 0xE8	; 232
     ed0:	90 81       	ld	r25, Z
		if (retreived_value != some_value) {
     ed2:	89 17       	cp	r24, r25
     ed4:	19 f0       	breq	.+6      	; 0xedc <test_SRAM+0x7e>
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			retrieval_errors++;
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	e8 1a       	sub	r14, r24
     eda:	f8 0a       	sbc	r15, r24
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     edc:	21 96       	adiw	r28, 0x01	; 1
     ede:	c1 15       	cp	r28, r1
     ee0:	88 e0       	ldi	r24, 0x08	; 8
     ee2:	d8 07       	cpc	r29, r24
     ee4:	88 f3       	brcs	.-30     	; 0xec8 <test_SRAM+0x6a>
		if (retreived_value != some_value) {
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase\n\r\n\r", write_errors, retrieval_errors);
     ee6:	ff 92       	push	r15
     ee8:	ef 92       	push	r14
     eea:	1f 93       	push	r17
     eec:	0f 93       	push	r16
     eee:	8e ec       	ldi	r24, 0xCE	; 206
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	9f 93       	push	r25
     ef4:	8f 93       	push	r24
     ef6:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
}
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	ff 90       	pop	r15
     f10:	ef 90       	pop	r14
     f12:	08 95       	ret

00000f14 <test_XMEM>:

void test_XMEM(void){
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
	XMEM_init();
     f18:	0e 94 fd 06 	call	0xdfa	; 0xdfa <XMEM_init>
	UART_init(MYUBRR);
     f1c:	8f e1       	ldi	r24, 0x1F	; 31
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 86 06 	call	0xd0c	; 0xd0c <UART_init>
	volatile char *ext_mem = (char *) XMEM_BASE_ADDR;
	
	printf("\nOLED ZONE...\n\r");
     f24:	8b e2       	ldi	r24, 0x2B	; 43
     f26:	92 e0       	ldi	r25, 0x02	; 2
     f28:	9f 93       	push	r25
     f2a:	8f 93       	push	r24
     f2c:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
     f30:	2f ef       	ldi	r18, 0xFF	; 255
     f32:	8f ef       	ldi	r24, 0xFF	; 255
     f34:	9d e1       	ldi	r25, 0x1D	; 29
     f36:	21 50       	subi	r18, 0x01	; 1
     f38:	80 40       	sbci	r24, 0x00	; 0
     f3a:	90 40       	sbci	r25, 0x00	; 0
     f3c:	e1 f7       	brne	.-8      	; 0xf36 <test_XMEM+0x22>
     f3e:	00 c0       	rjmp	.+0      	; 0xf40 <test_XMEM+0x2c>
     f40:	00 00       	nop
	_delay_ms(2000);
	for(uint16_t addr = 0x100; addr<0x3FF; addr += 0x02){
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	c0 e0       	ldi	r28, 0x00	; 0
     f48:	d1 e0       	ldi	r29, 0x01	; 1
     f4a:	16 c0       	rjmp	.+44     	; 0xf78 <test_XMEM+0x64>
		ext_mem[addr] = 0xAB;
     f4c:	fe 01       	movw	r30, r28
     f4e:	f0 5f       	subi	r31, 0xF0	; 240
     f50:	8b ea       	ldi	r24, 0xAB	; 171
     f52:	80 83       	st	Z, r24
		uint8_t ret_val = ext_mem[addr];
     f54:	80 81       	ld	r24, Z
		printf("addr[%4x] = %02X\n\r", addr, ret_val);
     f56:	1f 92       	push	r1
     f58:	8f 93       	push	r24
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	8b e3       	ldi	r24, 0x3B	; 59
     f60:	92 e0       	ldi	r25, 0x02	; 2
     f62:	9f 93       	push	r25
     f64:	8f 93       	push	r24
     f66:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
	UART_init(MYUBRR);
	volatile char *ext_mem = (char *) XMEM_BASE_ADDR;
	
	printf("\nOLED ZONE...\n\r");
	_delay_ms(2000);
	for(uint16_t addr = 0x100; addr<0x3FF; addr += 0x02){
     f6a:	22 96       	adiw	r28, 0x02	; 2
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	cf 3f       	cpi	r28, 0xFF	; 255
     f7a:	93 e0       	ldi	r25, 0x03	; 3
     f7c:	d9 07       	cpc	r29, r25
     f7e:	30 f3       	brcs	.-52     	; 0xf4c <test_XMEM+0x38>
		ext_mem[addr] = 0xAB;
		uint8_t ret_val = ext_mem[addr];
		printf("addr[%4x] = %02X\n\r", addr, ret_val);
	}
	
	printf("\nADC ZONE...\n\r");
     f80:	8e e4       	ldi	r24, 0x4E	; 78
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	9f 93       	push	r25
     f86:	8f 93       	push	r24
     f88:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
     f8c:	2f ef       	ldi	r18, 0xFF	; 255
     f8e:	8f ef       	ldi	r24, 0xFF	; 255
     f90:	9d e1       	ldi	r25, 0x1D	; 29
     f92:	21 50       	subi	r18, 0x01	; 1
     f94:	80 40       	sbci	r24, 0x00	; 0
     f96:	90 40       	sbci	r25, 0x00	; 0
     f98:	e1 f7       	brne	.-8      	; 0xf92 <test_XMEM+0x7e>
     f9a:	00 c0       	rjmp	.+0      	; 0xf9c <test_XMEM+0x88>
     f9c:	00 00       	nop
	_delay_ms(2000);
	for(uint16_t addr = 0x400; addr<0x7FF; addr += 0x02){
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	c0 e0       	ldi	r28, 0x00	; 0
     fa4:	d4 e0       	ldi	r29, 0x04	; 4
     fa6:	16 c0       	rjmp	.+44     	; 0xfd4 <test_XMEM+0xc0>
		ext_mem[addr] = 0xAB;
     fa8:	fe 01       	movw	r30, r28
     faa:	f0 5f       	subi	r31, 0xF0	; 240
     fac:	8b ea       	ldi	r24, 0xAB	; 171
     fae:	80 83       	st	Z, r24
		uint8_t ret_val = ext_mem[addr];
     fb0:	80 81       	ld	r24, Z
		printf("addr[%4x] = %02X\n\r", addr, ret_val);
     fb2:	1f 92       	push	r1
     fb4:	8f 93       	push	r24
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	8b e3       	ldi	r24, 0x3B	; 59
     fbc:	92 e0       	ldi	r25, 0x02	; 2
     fbe:	9f 93       	push	r25
     fc0:	8f 93       	push	r24
     fc2:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
		printf("addr[%4x] = %02X\n\r", addr, ret_val);
	}
	
	printf("\nADC ZONE...\n\r");
	_delay_ms(2000);
	for(uint16_t addr = 0x400; addr<0x7FF; addr += 0x02){
     fc6:	22 96       	adiw	r28, 0x02	; 2
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	cf 3f       	cpi	r28, 0xFF	; 255
     fd6:	97 e0       	ldi	r25, 0x07	; 7
     fd8:	d9 07       	cpc	r29, r25
     fda:	30 f3       	brcs	.-52     	; 0xfa8 <test_XMEM+0x94>
		ext_mem[addr] = 0xAB;
		uint8_t ret_val = ext_mem[addr];
		printf("addr[%4x] = %02X\n\r", addr, ret_val);
	}
	
	printf("\nSRAM ZONE...\n\r");
     fdc:	8d e5       	ldi	r24, 0x5D	; 93
     fde:	92 e0       	ldi	r25, 0x02	; 2
     fe0:	9f 93       	push	r25
     fe2:	8f 93       	push	r24
     fe4:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
     fe8:	2f ef       	ldi	r18, 0xFF	; 255
     fea:	8f ef       	ldi	r24, 0xFF	; 255
     fec:	9d e1       	ldi	r25, 0x1D	; 29
     fee:	21 50       	subi	r18, 0x01	; 1
     ff0:	80 40       	sbci	r24, 0x00	; 0
     ff2:	90 40       	sbci	r25, 0x00	; 0
     ff4:	e1 f7       	brne	.-8      	; 0xfee <test_XMEM+0xda>
     ff6:	00 c0       	rjmp	.+0      	; 0xff8 <test_XMEM+0xe4>
     ff8:	00 00       	nop
	_delay_ms(2000);
	for(uint16_t addr = 0x800; addr<0xFFF; addr += 0x02){
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	c0 e0       	ldi	r28, 0x00	; 0
    1000:	d8 e0       	ldi	r29, 0x08	; 8
    1002:	16 c0       	rjmp	.+44     	; 0x1030 <test_XMEM+0x11c>
		ext_mem[addr] = 0xAB;
    1004:	fe 01       	movw	r30, r28
    1006:	f0 5f       	subi	r31, 0xF0	; 240
    1008:	8b ea       	ldi	r24, 0xAB	; 171
    100a:	80 83       	st	Z, r24
		uint8_t ret_val = ext_mem[addr];
    100c:	80 81       	ld	r24, Z
		printf("addr[%4x] = %02X\n\r", addr, ret_val);
    100e:	1f 92       	push	r1
    1010:	8f 93       	push	r24
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	8b e3       	ldi	r24, 0x3B	; 59
    1018:	92 e0       	ldi	r25, 0x02	; 2
    101a:	9f 93       	push	r25
    101c:	8f 93       	push	r24
    101e:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
		printf("addr[%4x] = %02X\n\r", addr, ret_val);
	}
	
	printf("\nSRAM ZONE...\n\r");
	_delay_ms(2000);
	for(uint16_t addr = 0x800; addr<0xFFF; addr += 0x02){
    1022:	22 96       	adiw	r28, 0x02	; 2
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	cf 3f       	cpi	r28, 0xFF	; 255
    1032:	9f e0       	ldi	r25, 0x0F	; 15
    1034:	d9 07       	cpc	r29, r25
    1036:	30 f3       	brcs	.-52     	; 0x1004 <test_XMEM+0xf0>
		ext_mem[addr] = 0xAB;
		uint8_t ret_val = ext_mem[addr];
		printf("addr[%4x] = %02X\n\r", addr, ret_val);
	}
}
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <test_ADC>:

void test_ADC(){
	UART_init(MYUBRR);
    103e:	8f e1       	ldi	r24, 0x1F	; 31
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 86 06 	call	0xd0c	; 0xd0c <UART_init>
	XMEM_init();
    1046:	0e 94 fd 06 	call	0xdfa	; 0xdfa <XMEM_init>
	ADC_init();
    104a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <ADC_init>
	
	while(1){
		ADC_sample4();
    104e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <ADC_sample4>
		
		printf("\033[2J\033[H");
    1052:	8d e6       	ldi	r24, 0x6D	; 109
    1054:	92 e0       	ldi	r25, 0x02	; 2
    1056:	9f 93       	push	r25
    1058:	8f 93       	push	r24
    105a:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
		printf("vertical %d\n\r",ADC_read());
    105e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ADC_read>
    1062:	1f 92       	push	r1
    1064:	8f 93       	push	r24
    1066:	85 e7       	ldi	r24, 0x75	; 117
    1068:	92 e0       	ldi	r25, 0x02	; 2
    106a:	9f 93       	push	r25
    106c:	8f 93       	push	r24
    106e:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
		printf("horizont %d\n\r",ADC_read());
    1072:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ADC_read>
    1076:	1f 92       	push	r1
    1078:	8f 93       	push	r24
    107a:	83 e8       	ldi	r24, 0x83	; 131
    107c:	92 e0       	ldi	r25, 0x02	; 2
    107e:	9f 93       	push	r25
    1080:	8f 93       	push	r24
    1082:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
		printf("slider L %d\n\r",ADC_read());
    1086:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ADC_read>
    108a:	1f 92       	push	r1
    108c:	8f 93       	push	r24
    108e:	81 e9       	ldi	r24, 0x91	; 145
    1090:	92 e0       	ldi	r25, 0x02	; 2
    1092:	9f 93       	push	r25
    1094:	8f 93       	push	r24
    1096:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
		printf("slider R %d\n\r",ADC_read());
    109a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ADC_read>
    109e:	1f 92       	push	r1
    10a0:	8f 93       	push	r24
    10a2:	8f e9       	ldi	r24, 0x9F	; 159
    10a4:	92 e0       	ldi	r25, 0x02	; 2
    10a6:	9f 93       	push	r25
    10a8:	8f 93       	push	r24
    10aa:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
    10ae:	2f ef       	ldi	r18, 0xFF	; 255
    10b0:	8f e7       	ldi	r24, 0x7F	; 127
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	21 50       	subi	r18, 0x01	; 1
    10b6:	80 40       	sbci	r24, 0x00	; 0
    10b8:	90 40       	sbci	r25, 0x00	; 0
    10ba:	e1 f7       	brne	.-8      	; 0x10b4 <test_ADC+0x76>
    10bc:	00 c0       	rjmp	.+0      	; 0x10be <test_ADC+0x80>
    10be:	00 c0       	rjmp	.+0      	; 0x10c0 <test_ADC+0x82>
    10c0:	8d b7       	in	r24, 0x3d	; 61
    10c2:	9e b7       	in	r25, 0x3e	; 62
    10c4:	42 96       	adiw	r24, 0x12	; 18
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	9e bf       	out	0x3e, r25	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	8d bf       	out	0x3d, r24	; 61
    10d0:	be cf       	rjmp	.-132    	; 0x104e <test_ADC+0x10>

000010d2 <test_JOYSTICK>:
		_delay_ms(100);
	}
}

void test_JOYSTICK(){
	UART_init(MYUBRR);
    10d2:	8f e1       	ldi	r24, 0x1F	; 31
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 86 06 	call	0xd0c	; 0xd0c <UART_init>
	XMEM_init();
    10da:	0e 94 fd 06 	call	0xdfa	; 0xdfa <XMEM_init>
	ADC_init();
    10de:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <ADC_init>
    10e2:	2f ef       	ldi	r18, 0xFF	; 255
    10e4:	8f ef       	ldi	r24, 0xFF	; 255
    10e6:	9e e0       	ldi	r25, 0x0E	; 14
    10e8:	21 50       	subi	r18, 0x01	; 1
    10ea:	80 40       	sbci	r24, 0x00	; 0
    10ec:	90 40       	sbci	r25, 0x00	; 0
    10ee:	e1 f7       	brne	.-8      	; 0x10e8 <test_JOYSTICK+0x16>
    10f0:	00 c0       	rjmp	.+0      	; 0x10f2 <test_JOYSTICK+0x20>
    10f2:	00 00       	nop
	
	_delay_ms(1000);
	JOY_init();
    10f4:	0e 94 aa 04 	call	0x954	; 0x954 <JOY_init>
    10f8:	2f ef       	ldi	r18, 0xFF	; 255
    10fa:	8f ef       	ldi	r24, 0xFF	; 255
    10fc:	9e e0       	ldi	r25, 0x0E	; 14
    10fe:	21 50       	subi	r18, 0x01	; 1
    1100:	80 40       	sbci	r24, 0x00	; 0
    1102:	90 40       	sbci	r25, 0x00	; 0
    1104:	e1 f7       	brne	.-8      	; 0x10fe <test_JOYSTICK+0x2c>
    1106:	00 c0       	rjmp	.+0      	; 0x1108 <test_JOYSTICK+0x36>
    1108:	00 00       	nop
	_delay_ms(1000);
	
	while(1){
		pos_t pos = JOY_get_rel_pos();
    110a:	0e 94 b3 04 	call	0x966	; 0x966 <JOY_get_rel_pos>
    110e:	e6 2e       	mov	r14, r22
    1110:	d7 2e       	mov	r13, r23
    1112:	08 2f       	mov	r16, r24
    1114:	f9 2e       	mov	r15, r25
		dir direction = JOY_get_dir();
    1116:	0e 94 21 05 	call	0xa42	; 0xa42 <JOY_get_dir>
    111a:	18 2f       	mov	r17, r24
		sliders_t sliders = JOY_get_sliders();
    111c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <JOY_get_sliders>
    1120:	d8 2f       	mov	r29, r24
    1122:	c9 2f       	mov	r28, r25
		
		printf("\033[2J\033[H");
    1124:	8d e6       	ldi	r24, 0x6D	; 109
    1126:	92 e0       	ldi	r25, 0x02	; 2
    1128:	9f 93       	push	r25
    112a:	8f 93       	push	r24
    112c:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
		printf("x %d\n\r",pos.x);
    1130:	df 92       	push	r13
    1132:	ef 92       	push	r14
    1134:	8d ea       	ldi	r24, 0xAD	; 173
    1136:	92 e0       	ldi	r25, 0x02	; 2
    1138:	9f 93       	push	r25
    113a:	8f 93       	push	r24
    113c:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
		printf("y %d\n\r",pos.y);
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	84 eb       	ldi	r24, 0xB4	; 180
    1146:	92 e0       	ldi	r25, 0x02	; 2
    1148:	9f 93       	push	r25
    114a:	8f 93       	push	r24
    114c:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
		
		printf("DIR: %d\n\r",direction);
    1150:	1f 92       	push	r1
    1152:	1f 93       	push	r17
    1154:	8b eb       	ldi	r24, 0xBB	; 187
    1156:	92 e0       	ldi	r25, 0x02	; 2
    1158:	9f 93       	push	r25
    115a:	8f 93       	push	r24
    115c:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
		
		printf("sliderL %d\n\r",sliders.left);
    1160:	1f 92       	push	r1
    1162:	df 93       	push	r29
    1164:	85 ec       	ldi	r24, 0xC5	; 197
    1166:	92 e0       	ldi	r25, 0x02	; 2
    1168:	9f 93       	push	r25
    116a:	8f 93       	push	r24
    116c:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
		printf("sliderR %d\n\r",sliders.right);
    1170:	1f 92       	push	r1
    1172:	cf 93       	push	r28
    1174:	82 ed       	ldi	r24, 0xD2	; 210
    1176:	92 e0       	ldi	r25, 0x02	; 2
    1178:	9f 93       	push	r25
    117a:	8f 93       	push	r24
    117c:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
		
		printf("BTN: %d\n\r",(PIND & (1<<JOY_BUTTON))>>JOY_BUTTON);
    1180:	80 b3       	in	r24, 0x10	; 16
    1182:	80 72       	andi	r24, 0x20	; 32
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	95 95       	asr	r25
    1188:	87 95       	ror	r24
    118a:	95 95       	asr	r25
    118c:	87 95       	ror	r24
    118e:	95 95       	asr	r25
    1190:	87 95       	ror	r24
    1192:	95 95       	asr	r25
    1194:	87 95       	ror	r24
    1196:	95 95       	asr	r25
    1198:	87 95       	ror	r24
    119a:	9f 93       	push	r25
    119c:	8f 93       	push	r24
    119e:	8f ed       	ldi	r24, 0xDF	; 223
    11a0:	92 e0       	ldi	r25, 0x02	; 2
    11a2:	9f 93       	push	r25
    11a4:	8f 93       	push	r24
    11a6:	0e 94 1d 0c 	call	0x183a	; 0x183a <printf>
    11aa:	2f ef       	ldi	r18, 0xFF	; 255
    11ac:	8f e7       	ldi	r24, 0x7F	; 127
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	21 50       	subi	r18, 0x01	; 1
    11b2:	80 40       	sbci	r24, 0x00	; 0
    11b4:	90 40       	sbci	r25, 0x00	; 0
    11b6:	e1 f7       	brne	.-8      	; 0x11b0 <test_JOYSTICK+0xde>
    11b8:	00 c0       	rjmp	.+0      	; 0x11ba <test_JOYSTICK+0xe8>
    11ba:	00 c0       	rjmp	.+0      	; 0x11bc <test_JOYSTICK+0xea>
    11bc:	8d b7       	in	r24, 0x3d	; 61
    11be:	9e b7       	in	r25, 0x3e	; 62
    11c0:	4a 96       	adiw	r24, 0x1a	; 26
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	9e bf       	out	0x3e, r25	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	8d bf       	out	0x3d, r24	; 61
    11cc:	9e cf       	rjmp	.-196    	; 0x110a <test_JOYSTICK+0x38>

000011ce <test_OLED>:
		
		_delay_ms(100);
	}
}

void test_OLED(){
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
	UART_init(MYUBRR);
    11d6:	8f e1       	ldi	r24, 0x1F	; 31
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 86 06 	call	0xd0c	; 0xd0c <UART_init>
	XMEM_init();
    11de:	0e 94 fd 06 	call	0xdfa	; 0xdfa <XMEM_init>
	OLED_init();
    11e2:	0e 94 db 05 	call	0xbb6	; 0xbb6 <OLED_init>
	OLED_reset();
    11e6:	0e 94 cc 05 	call	0xb98	; 0xb98 <OLED_reset>
	
	for(int p=0; p<8; p++){
    11ea:	00 e0       	ldi	r16, 0x00	; 0
    11ec:	10 e0       	ldi	r17, 0x00	; 0
    11ee:	17 c0       	rjmp	.+46     	; 0x121e <test_OLED+0x50>
		OLED_goto_pos(p,p*8);
    11f0:	60 2f       	mov	r22, r16
    11f2:	66 0f       	add	r22, r22
    11f4:	66 0f       	add	r22, r22
    11f6:	66 0f       	add	r22, r22
    11f8:	80 2f       	mov	r24, r16
    11fa:	0e 94 75 05 	call	0xaea	; 0xaea <OLED_goto_pos>
		for(int c=0; c<8; c++){
    11fe:	c0 e0       	ldi	r28, 0x00	; 0
    1200:	d0 e0       	ldi	r29, 0x00	; 0
    1202:	08 c0       	rjmp	.+16     	; 0x1214 <test_OLED+0x46>
			OLED_write_data(0xFF);
    1204:	8f ef       	ldi	r24, 0xFF	; 255
    1206:	0e 94 b0 05 	call	0xb60	; 0xb60 <OLED_write_data>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 ef       	ldi	r25, 0xF0	; 240
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <test_OLED+0x40>
	OLED_init();
	OLED_reset();
	
	for(int p=0; p<8; p++){
		OLED_goto_pos(p,p*8);
		for(int c=0; c<8; c++){
    1212:	21 96       	adiw	r28, 0x01	; 1
    1214:	c8 30       	cpi	r28, 0x08	; 8
    1216:	d1 05       	cpc	r29, r1
    1218:	ac f3       	brlt	.-22     	; 0x1204 <test_OLED+0x36>
	UART_init(MYUBRR);
	XMEM_init();
	OLED_init();
	OLED_reset();
	
	for(int p=0; p<8; p++){
    121a:	0f 5f       	subi	r16, 0xFF	; 255
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	08 30       	cpi	r16, 0x08	; 8
    1220:	11 05       	cpc	r17, r1
    1222:	34 f3       	brlt	.-52     	; 0x11f0 <test_OLED+0x22>
			OLED_write_data(0xFF);
			_delay_ms(50);
		}
	}
	
	OLED_goto_pos(7,128-8);
    1224:	68 e7       	ldi	r22, 0x78	; 120
    1226:	87 e0       	ldi	r24, 0x07	; 7
    1228:	0e 94 75 05 	call	0xaea	; 0xaea <OLED_goto_pos>
	for(int c=0; c<8; c++)
    122c:	c0 e0       	ldi	r28, 0x00	; 0
    122e:	d0 e0       	ldi	r29, 0x00	; 0
    1230:	04 c0       	rjmp	.+8      	; 0x123a <test_OLED+0x6c>
		OLED_write_data(0xFF);
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	0e 94 b0 05 	call	0xb60	; 0xb60 <OLED_write_data>
			_delay_ms(50);
		}
	}
	
	OLED_goto_pos(7,128-8);
	for(int c=0; c<8; c++)
    1238:	21 96       	adiw	r28, 0x01	; 1
    123a:	c8 30       	cpi	r28, 0x08	; 8
    123c:	d1 05       	cpc	r29, r1
    123e:	cc f3       	brlt	.-14     	; 0x1232 <test_OLED+0x64>
    1240:	9f ef       	ldi	r25, 0xFF	; 255
    1242:	2f e7       	ldi	r18, 0x7F	; 127
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	91 50       	subi	r25, 0x01	; 1
    1248:	20 40       	sbci	r18, 0x00	; 0
    124a:	80 40       	sbci	r24, 0x00	; 0
    124c:	e1 f7       	brne	.-8      	; 0x1246 <test_OLED+0x78>
    124e:	00 c0       	rjmp	.+0      	; 0x1250 <test_OLED+0x82>
    1250:	00 c0       	rjmp	.+0      	; 0x1252 <test_OLED+0x84>
		OLED_write_data(0xFF);
	_delay_ms(100);
	
	OLED_goto_pos(0,128-8);
    1252:	68 e7       	ldi	r22, 0x78	; 120
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	0e 94 75 05 	call	0xaea	; 0xaea <OLED_goto_pos>
	for(int c=0; c<8; c++)
    125a:	c0 e0       	ldi	r28, 0x00	; 0
    125c:	d0 e0       	ldi	r29, 0x00	; 0
    125e:	04 c0       	rjmp	.+8      	; 0x1268 <test_OLED+0x9a>
	OLED_write_data(0xFF);
    1260:	8f ef       	ldi	r24, 0xFF	; 255
    1262:	0e 94 b0 05 	call	0xb60	; 0xb60 <OLED_write_data>
	for(int c=0; c<8; c++)
		OLED_write_data(0xFF);
	_delay_ms(100);
	
	OLED_goto_pos(0,128-8);
	for(int c=0; c<8; c++)
    1266:	21 96       	adiw	r28, 0x01	; 1
    1268:	c8 30       	cpi	r28, 0x08	; 8
    126a:	d1 05       	cpc	r29, r1
    126c:	cc f3       	brlt	.-14     	; 0x1260 <test_OLED+0x92>
    126e:	9f ef       	ldi	r25, 0xFF	; 255
    1270:	2f e7       	ldi	r18, 0x7F	; 127
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	91 50       	subi	r25, 0x01	; 1
    1276:	20 40       	sbci	r18, 0x00	; 0
    1278:	80 40       	sbci	r24, 0x00	; 0
    127a:	e1 f7       	brne	.-8      	; 0x1274 <test_OLED+0xa6>
    127c:	00 c0       	rjmp	.+0      	; 0x127e <test_OLED+0xb0>
    127e:	00 c0       	rjmp	.+0      	; 0x1280 <test_OLED+0xb2>
	OLED_write_data(0xFF);
	_delay_ms(100);
	
	for(uint8_t i=0; i<4; i++){
    1280:	c0 e0       	ldi	r28, 0x00	; 0
    1282:	0c c0       	rjmp	.+24     	; 0x129c <test_OLED+0xce>
    1284:	9f ef       	ldi	r25, 0xFF	; 255
    1286:	2f ef       	ldi	r18, 0xFF	; 255
    1288:	82 e0       	ldi	r24, 0x02	; 2
    128a:	91 50       	subi	r25, 0x01	; 1
    128c:	20 40       	sbci	r18, 0x00	; 0
    128e:	80 40       	sbci	r24, 0x00	; 0
    1290:	e1 f7       	brne	.-8      	; 0x128a <test_OLED+0xbc>
    1292:	00 c0       	rjmp	.+0      	; 0x1294 <test_OLED+0xc6>
    1294:	00 c0       	rjmp	.+0      	; 0x1296 <test_OLED+0xc8>
		_delay_ms(200);
		OLED_invert();
    1296:	0e 94 7e 05 	call	0xafc	; 0xafc <OLED_invert>
	OLED_goto_pos(0,128-8);
	for(int c=0; c<8; c++)
	OLED_write_data(0xFF);
	_delay_ms(100);
	
	for(uint8_t i=0; i<4; i++){
    129a:	cf 5f       	subi	r28, 0xFF	; 255
    129c:	c4 30       	cpi	r28, 0x04	; 4
    129e:	90 f3       	brcs	.-28     	; 0x1284 <test_OLED+0xb6>
		_delay_ms(200);
		OLED_invert();
	}
	
	OLED_reset();
    12a0:	0e 94 cc 05 	call	0xb98	; 0xb98 <OLED_reset>
	fprintf(oled_output, "prova ...");
    12a4:	20 91 f9 02 	lds	r18, 0x02F9	; 0x8002f9 <oled_output>
    12a8:	30 91 fa 02 	lds	r19, 0x02FA	; 0x8002fa <oled_output+0x1>
    12ac:	49 e0       	ldi	r20, 0x09	; 9
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	89 ee       	ldi	r24, 0xE9	; 233
    12b6:	92 e0       	ldi	r25, 0x02	; 2
    12b8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <fwrite>
    12bc:	9f ef       	ldi	r25, 0xFF	; 255
    12be:	2f ef       	ldi	r18, 0xFF	; 255
    12c0:	8e e0       	ldi	r24, 0x0E	; 14
    12c2:	91 50       	subi	r25, 0x01	; 1
    12c4:	20 40       	sbci	r18, 0x00	; 0
    12c6:	80 40       	sbci	r24, 0x00	; 0
    12c8:	e1 f7       	brne	.-8      	; 0x12c2 <test_OLED+0xf4>
    12ca:	00 c0       	rjmp	.+0      	; 0x12cc <test_OLED+0xfe>
    12cc:	00 00       	nop
	_delay_ms(1000);
	OLED_reset();
    12ce:	0e 94 cc 05 	call	0xb98	; 0xb98 <OLED_reset>
	
	OLED_reset();
    12d2:	0e 94 cc 05 	call	0xb98	; 0xb98 <OLED_reset>
	char value = ' ';
    12d6:	80 e2       	ldi	r24, 0x20	; 32
	while(value < ' ' + 95){
    12d8:	0e c0       	rjmp	.+28     	; 0x12f6 <test_OLED+0x128>
		fprintf(oled_output, "%c",value++);
    12da:	c1 e0       	ldi	r28, 0x01	; 1
    12dc:	c8 0f       	add	r28, r24
    12de:	60 91 f9 02 	lds	r22, 0x02F9	; 0x8002f9 <oled_output>
    12e2:	70 91 fa 02 	lds	r23, 0x02FA	; 0x8002fa <oled_output+0x1>
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 83 0b 	call	0x1706	; 0x1706 <fputc>
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 ef       	ldi	r25, 0xF0	; 240
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <test_OLED+0x122>
    12f4:	8c 2f       	mov	r24, r28
	_delay_ms(1000);
	OLED_reset();
	
	OLED_reset();
	char value = ' ';
	while(value < ' ' + 95){
    12f6:	8f 37       	cpi	r24, 0x7F	; 127
    12f8:	80 f3       	brcs	.-32     	; 0x12da <test_OLED+0x10c>
		fprintf(oled_output, "%c",value++);
		_delay_ms(50);
	}
}
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	08 95       	ret

00001304 <test_MENU>:

void test_MENU(){
	UART_init(MYUBRR);
    1304:	8f e1       	ldi	r24, 0x1F	; 31
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 86 06 	call	0xd0c	; 0xd0c <UART_init>
	XMEM_init();
    130c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <XMEM_init>
	ADC_init();
    1310:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <ADC_init>
	JOY_init();
    1314:	0e 94 aa 04 	call	0x954	; 0x954 <JOY_init>
	
	OLED_init();
    1318:	0e 94 db 05 	call	0xbb6	; 0xbb6 <OLED_init>
	OLED_reset();
    131c:	0e 94 cc 05 	call	0xb98	; 0xb98 <OLED_reset>
	
	menu_init();
    1320:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <menu_init>
    1324:	08 95       	ret

00001326 <__divmodhi4>:
    1326:	97 fb       	bst	r25, 7
    1328:	07 2e       	mov	r0, r23
    132a:	16 f4       	brtc	.+4      	; 0x1330 <__divmodhi4+0xa>
    132c:	00 94       	com	r0
    132e:	07 d0       	rcall	.+14     	; 0x133e <__divmodhi4_neg1>
    1330:	77 fd       	sbrc	r23, 7
    1332:	09 d0       	rcall	.+18     	; 0x1346 <__divmodhi4_neg2>
    1334:	0e 94 a7 09 	call	0x134e	; 0x134e <__udivmodhi4>
    1338:	07 fc       	sbrc	r0, 7
    133a:	05 d0       	rcall	.+10     	; 0x1346 <__divmodhi4_neg2>
    133c:	3e f4       	brtc	.+14     	; 0x134c <__divmodhi4_exit>

0000133e <__divmodhi4_neg1>:
    133e:	90 95       	com	r25
    1340:	81 95       	neg	r24
    1342:	9f 4f       	sbci	r25, 0xFF	; 255
    1344:	08 95       	ret

00001346 <__divmodhi4_neg2>:
    1346:	70 95       	com	r23
    1348:	61 95       	neg	r22
    134a:	7f 4f       	sbci	r23, 0xFF	; 255

0000134c <__divmodhi4_exit>:
    134c:	08 95       	ret

0000134e <__udivmodhi4>:
    134e:	aa 1b       	sub	r26, r26
    1350:	bb 1b       	sub	r27, r27
    1352:	51 e1       	ldi	r21, 0x11	; 17
    1354:	07 c0       	rjmp	.+14     	; 0x1364 <__udivmodhi4_ep>

00001356 <__udivmodhi4_loop>:
    1356:	aa 1f       	adc	r26, r26
    1358:	bb 1f       	adc	r27, r27
    135a:	a6 17       	cp	r26, r22
    135c:	b7 07       	cpc	r27, r23
    135e:	10 f0       	brcs	.+4      	; 0x1364 <__udivmodhi4_ep>
    1360:	a6 1b       	sub	r26, r22
    1362:	b7 0b       	sbc	r27, r23

00001364 <__udivmodhi4_ep>:
    1364:	88 1f       	adc	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	5a 95       	dec	r21
    136a:	a9 f7       	brne	.-22     	; 0x1356 <__udivmodhi4_loop>
    136c:	80 95       	com	r24
    136e:	90 95       	com	r25
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	08 95       	ret

00001376 <malloc>:
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	82 30       	cpi	r24, 0x02	; 2
    1380:	91 05       	cpc	r25, r1
    1382:	10 f4       	brcc	.+4      	; 0x1388 <malloc+0x12>
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	e0 91 00 03 	lds	r30, 0x0300	; 0x800300 <__flp>
    138c:	f0 91 01 03 	lds	r31, 0x0301	; 0x800301 <__flp+0x1>
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	a0 e0       	ldi	r26, 0x00	; 0
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	30 97       	sbiw	r30, 0x00	; 0
    139a:	19 f1       	breq	.+70     	; 0x13e2 <malloc+0x6c>
    139c:	40 81       	ld	r20, Z
    139e:	51 81       	ldd	r21, Z+1	; 0x01
    13a0:	02 81       	ldd	r16, Z+2	; 0x02
    13a2:	13 81       	ldd	r17, Z+3	; 0x03
    13a4:	48 17       	cp	r20, r24
    13a6:	59 07       	cpc	r21, r25
    13a8:	c8 f0       	brcs	.+50     	; 0x13dc <malloc+0x66>
    13aa:	84 17       	cp	r24, r20
    13ac:	95 07       	cpc	r25, r21
    13ae:	69 f4       	brne	.+26     	; 0x13ca <malloc+0x54>
    13b0:	10 97       	sbiw	r26, 0x00	; 0
    13b2:	31 f0       	breq	.+12     	; 0x13c0 <malloc+0x4a>
    13b4:	12 96       	adiw	r26, 0x02	; 2
    13b6:	0c 93       	st	X, r16
    13b8:	12 97       	sbiw	r26, 0x02	; 2
    13ba:	13 96       	adiw	r26, 0x03	; 3
    13bc:	1c 93       	st	X, r17
    13be:	27 c0       	rjmp	.+78     	; 0x140e <malloc+0x98>
    13c0:	00 93 00 03 	sts	0x0300, r16	; 0x800300 <__flp>
    13c4:	10 93 01 03 	sts	0x0301, r17	; 0x800301 <__flp+0x1>
    13c8:	22 c0       	rjmp	.+68     	; 0x140e <malloc+0x98>
    13ca:	21 15       	cp	r18, r1
    13cc:	31 05       	cpc	r19, r1
    13ce:	19 f0       	breq	.+6      	; 0x13d6 <malloc+0x60>
    13d0:	42 17       	cp	r20, r18
    13d2:	53 07       	cpc	r21, r19
    13d4:	18 f4       	brcc	.+6      	; 0x13dc <malloc+0x66>
    13d6:	9a 01       	movw	r18, r20
    13d8:	bd 01       	movw	r22, r26
    13da:	ef 01       	movw	r28, r30
    13dc:	df 01       	movw	r26, r30
    13de:	f8 01       	movw	r30, r16
    13e0:	db cf       	rjmp	.-74     	; 0x1398 <malloc+0x22>
    13e2:	21 15       	cp	r18, r1
    13e4:	31 05       	cpc	r19, r1
    13e6:	f9 f0       	breq	.+62     	; 0x1426 <malloc+0xb0>
    13e8:	28 1b       	sub	r18, r24
    13ea:	39 0b       	sbc	r19, r25
    13ec:	24 30       	cpi	r18, 0x04	; 4
    13ee:	31 05       	cpc	r19, r1
    13f0:	80 f4       	brcc	.+32     	; 0x1412 <malloc+0x9c>
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	9b 81       	ldd	r25, Y+3	; 0x03
    13f6:	61 15       	cp	r22, r1
    13f8:	71 05       	cpc	r23, r1
    13fa:	21 f0       	breq	.+8      	; 0x1404 <malloc+0x8e>
    13fc:	fb 01       	movw	r30, r22
    13fe:	93 83       	std	Z+3, r25	; 0x03
    1400:	82 83       	std	Z+2, r24	; 0x02
    1402:	04 c0       	rjmp	.+8      	; 0x140c <malloc+0x96>
    1404:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <__flp+0x1>
    1408:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__flp>
    140c:	fe 01       	movw	r30, r28
    140e:	32 96       	adiw	r30, 0x02	; 2
    1410:	44 c0       	rjmp	.+136    	; 0x149a <malloc+0x124>
    1412:	fe 01       	movw	r30, r28
    1414:	e2 0f       	add	r30, r18
    1416:	f3 1f       	adc	r31, r19
    1418:	81 93       	st	Z+, r24
    141a:	91 93       	st	Z+, r25
    141c:	22 50       	subi	r18, 0x02	; 2
    141e:	31 09       	sbc	r19, r1
    1420:	39 83       	std	Y+1, r19	; 0x01
    1422:	28 83       	st	Y, r18
    1424:	3a c0       	rjmp	.+116    	; 0x149a <malloc+0x124>
    1426:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <__brkval>
    142a:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <__brkval+0x1>
    142e:	23 2b       	or	r18, r19
    1430:	41 f4       	brne	.+16     	; 0x1442 <malloc+0xcc>
    1432:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1436:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    143a:	30 93 ff 02 	sts	0x02FF, r19	; 0x8002ff <__brkval+0x1>
    143e:	20 93 fe 02 	sts	0x02FE, r18	; 0x8002fe <__brkval>
    1442:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1446:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    144a:	21 15       	cp	r18, r1
    144c:	31 05       	cpc	r19, r1
    144e:	41 f4       	brne	.+16     	; 0x1460 <malloc+0xea>
    1450:	2d b7       	in	r18, 0x3d	; 61
    1452:	3e b7       	in	r19, 0x3e	; 62
    1454:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1458:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    145c:	24 1b       	sub	r18, r20
    145e:	35 0b       	sbc	r19, r21
    1460:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <__brkval>
    1464:	f0 91 ff 02 	lds	r31, 0x02FF	; 0x8002ff <__brkval+0x1>
    1468:	e2 17       	cp	r30, r18
    146a:	f3 07       	cpc	r31, r19
    146c:	a0 f4       	brcc	.+40     	; 0x1496 <malloc+0x120>
    146e:	2e 1b       	sub	r18, r30
    1470:	3f 0b       	sbc	r19, r31
    1472:	28 17       	cp	r18, r24
    1474:	39 07       	cpc	r19, r25
    1476:	78 f0       	brcs	.+30     	; 0x1496 <malloc+0x120>
    1478:	ac 01       	movw	r20, r24
    147a:	4e 5f       	subi	r20, 0xFE	; 254
    147c:	5f 4f       	sbci	r21, 0xFF	; 255
    147e:	24 17       	cp	r18, r20
    1480:	35 07       	cpc	r19, r21
    1482:	48 f0       	brcs	.+18     	; 0x1496 <malloc+0x120>
    1484:	4e 0f       	add	r20, r30
    1486:	5f 1f       	adc	r21, r31
    1488:	50 93 ff 02 	sts	0x02FF, r21	; 0x8002ff <__brkval+0x1>
    148c:	40 93 fe 02 	sts	0x02FE, r20	; 0x8002fe <__brkval>
    1490:	81 93       	st	Z+, r24
    1492:	91 93       	st	Z+, r25
    1494:	02 c0       	rjmp	.+4      	; 0x149a <malloc+0x124>
    1496:	e0 e0       	ldi	r30, 0x00	; 0
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	cf 01       	movw	r24, r30
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	1f 91       	pop	r17
    14a2:	0f 91       	pop	r16
    14a4:	08 95       	ret

000014a6 <free>:
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <free+0xa>
    14ae:	81 c0       	rjmp	.+258    	; 0x15b2 <free+0x10c>
    14b0:	fc 01       	movw	r30, r24
    14b2:	32 97       	sbiw	r30, 0x02	; 2
    14b4:	13 82       	std	Z+3, r1	; 0x03
    14b6:	12 82       	std	Z+2, r1	; 0x02
    14b8:	a0 91 00 03 	lds	r26, 0x0300	; 0x800300 <__flp>
    14bc:	b0 91 01 03 	lds	r27, 0x0301	; 0x800301 <__flp+0x1>
    14c0:	10 97       	sbiw	r26, 0x00	; 0
    14c2:	81 f4       	brne	.+32     	; 0x14e4 <free+0x3e>
    14c4:	20 81       	ld	r18, Z
    14c6:	31 81       	ldd	r19, Z+1	; 0x01
    14c8:	82 0f       	add	r24, r18
    14ca:	93 1f       	adc	r25, r19
    14cc:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <__brkval>
    14d0:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <__brkval+0x1>
    14d4:	28 17       	cp	r18, r24
    14d6:	39 07       	cpc	r19, r25
    14d8:	51 f5       	brne	.+84     	; 0x152e <free+0x88>
    14da:	f0 93 ff 02 	sts	0x02FF, r31	; 0x8002ff <__brkval+0x1>
    14de:	e0 93 fe 02 	sts	0x02FE, r30	; 0x8002fe <__brkval>
    14e2:	67 c0       	rjmp	.+206    	; 0x15b2 <free+0x10c>
    14e4:	ed 01       	movw	r28, r26
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	ce 17       	cp	r28, r30
    14ec:	df 07       	cpc	r29, r31
    14ee:	40 f4       	brcc	.+16     	; 0x1500 <free+0x5a>
    14f0:	4a 81       	ldd	r20, Y+2	; 0x02
    14f2:	5b 81       	ldd	r21, Y+3	; 0x03
    14f4:	9e 01       	movw	r18, r28
    14f6:	41 15       	cp	r20, r1
    14f8:	51 05       	cpc	r21, r1
    14fa:	f1 f0       	breq	.+60     	; 0x1538 <free+0x92>
    14fc:	ea 01       	movw	r28, r20
    14fe:	f5 cf       	rjmp	.-22     	; 0x14ea <free+0x44>
    1500:	d3 83       	std	Z+3, r29	; 0x03
    1502:	c2 83       	std	Z+2, r28	; 0x02
    1504:	40 81       	ld	r20, Z
    1506:	51 81       	ldd	r21, Z+1	; 0x01
    1508:	84 0f       	add	r24, r20
    150a:	95 1f       	adc	r25, r21
    150c:	c8 17       	cp	r28, r24
    150e:	d9 07       	cpc	r29, r25
    1510:	59 f4       	brne	.+22     	; 0x1528 <free+0x82>
    1512:	88 81       	ld	r24, Y
    1514:	99 81       	ldd	r25, Y+1	; 0x01
    1516:	84 0f       	add	r24, r20
    1518:	95 1f       	adc	r25, r21
    151a:	02 96       	adiw	r24, 0x02	; 2
    151c:	91 83       	std	Z+1, r25	; 0x01
    151e:	80 83       	st	Z, r24
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	9b 81       	ldd	r25, Y+3	; 0x03
    1524:	93 83       	std	Z+3, r25	; 0x03
    1526:	82 83       	std	Z+2, r24	; 0x02
    1528:	21 15       	cp	r18, r1
    152a:	31 05       	cpc	r19, r1
    152c:	29 f4       	brne	.+10     	; 0x1538 <free+0x92>
    152e:	f0 93 01 03 	sts	0x0301, r31	; 0x800301 <__flp+0x1>
    1532:	e0 93 00 03 	sts	0x0300, r30	; 0x800300 <__flp>
    1536:	3d c0       	rjmp	.+122    	; 0x15b2 <free+0x10c>
    1538:	e9 01       	movw	r28, r18
    153a:	fb 83       	std	Y+3, r31	; 0x03
    153c:	ea 83       	std	Y+2, r30	; 0x02
    153e:	49 91       	ld	r20, Y+
    1540:	59 91       	ld	r21, Y+
    1542:	c4 0f       	add	r28, r20
    1544:	d5 1f       	adc	r29, r21
    1546:	ec 17       	cp	r30, r28
    1548:	fd 07       	cpc	r31, r29
    154a:	61 f4       	brne	.+24     	; 0x1564 <free+0xbe>
    154c:	80 81       	ld	r24, Z
    154e:	91 81       	ldd	r25, Z+1	; 0x01
    1550:	84 0f       	add	r24, r20
    1552:	95 1f       	adc	r25, r21
    1554:	02 96       	adiw	r24, 0x02	; 2
    1556:	e9 01       	movw	r28, r18
    1558:	99 83       	std	Y+1, r25	; 0x01
    155a:	88 83       	st	Y, r24
    155c:	82 81       	ldd	r24, Z+2	; 0x02
    155e:	93 81       	ldd	r25, Z+3	; 0x03
    1560:	9b 83       	std	Y+3, r25	; 0x03
    1562:	8a 83       	std	Y+2, r24	; 0x02
    1564:	e0 e0       	ldi	r30, 0x00	; 0
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	12 96       	adiw	r26, 0x02	; 2
    156a:	8d 91       	ld	r24, X+
    156c:	9c 91       	ld	r25, X
    156e:	13 97       	sbiw	r26, 0x03	; 3
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	19 f0       	breq	.+6      	; 0x157a <free+0xd4>
    1574:	fd 01       	movw	r30, r26
    1576:	dc 01       	movw	r26, r24
    1578:	f7 cf       	rjmp	.-18     	; 0x1568 <free+0xc2>
    157a:	8d 91       	ld	r24, X+
    157c:	9c 91       	ld	r25, X
    157e:	11 97       	sbiw	r26, 0x01	; 1
    1580:	9d 01       	movw	r18, r26
    1582:	2e 5f       	subi	r18, 0xFE	; 254
    1584:	3f 4f       	sbci	r19, 0xFF	; 255
    1586:	82 0f       	add	r24, r18
    1588:	93 1f       	adc	r25, r19
    158a:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <__brkval>
    158e:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <__brkval+0x1>
    1592:	28 17       	cp	r18, r24
    1594:	39 07       	cpc	r19, r25
    1596:	69 f4       	brne	.+26     	; 0x15b2 <free+0x10c>
    1598:	30 97       	sbiw	r30, 0x00	; 0
    159a:	29 f4       	brne	.+10     	; 0x15a6 <free+0x100>
    159c:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <__flp+0x1>
    15a0:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <__flp>
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <free+0x104>
    15a6:	13 82       	std	Z+3, r1	; 0x03
    15a8:	12 82       	std	Z+2, r1	; 0x02
    15aa:	b0 93 ff 02 	sts	0x02FF, r27	; 0x8002ff <__brkval+0x1>
    15ae:	a0 93 fe 02 	sts	0x02FE, r26	; 0x8002fe <__brkval>
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	08 95       	ret

000015b8 <do_rand>:
    15b8:	8f 92       	push	r8
    15ba:	9f 92       	push	r9
    15bc:	af 92       	push	r10
    15be:	bf 92       	push	r11
    15c0:	cf 92       	push	r12
    15c2:	df 92       	push	r13
    15c4:	ef 92       	push	r14
    15c6:	ff 92       	push	r15
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	ec 01       	movw	r28, r24
    15ce:	68 81       	ld	r22, Y
    15d0:	79 81       	ldd	r23, Y+1	; 0x01
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	9b 81       	ldd	r25, Y+3	; 0x03
    15d6:	61 15       	cp	r22, r1
    15d8:	71 05       	cpc	r23, r1
    15da:	81 05       	cpc	r24, r1
    15dc:	91 05       	cpc	r25, r1
    15de:	21 f4       	brne	.+8      	; 0x15e8 <do_rand+0x30>
    15e0:	64 e2       	ldi	r22, 0x24	; 36
    15e2:	79 ed       	ldi	r23, 0xD9	; 217
    15e4:	8b e5       	ldi	r24, 0x5B	; 91
    15e6:	97 e0       	ldi	r25, 0x07	; 7
    15e8:	2d e1       	ldi	r18, 0x1D	; 29
    15ea:	33 ef       	ldi	r19, 0xF3	; 243
    15ec:	41 e0       	ldi	r20, 0x01	; 1
    15ee:	50 e0       	ldi	r21, 0x00	; 0
    15f0:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__divmodsi4>
    15f4:	49 01       	movw	r8, r18
    15f6:	5a 01       	movw	r10, r20
    15f8:	9b 01       	movw	r18, r22
    15fa:	ac 01       	movw	r20, r24
    15fc:	a7 ea       	ldi	r26, 0xA7	; 167
    15fe:	b1 e4       	ldi	r27, 0x41	; 65
    1600:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__muluhisi3>
    1604:	6b 01       	movw	r12, r22
    1606:	7c 01       	movw	r14, r24
    1608:	ac ee       	ldi	r26, 0xEC	; 236
    160a:	b4 ef       	ldi	r27, 0xF4	; 244
    160c:	a5 01       	movw	r20, r10
    160e:	94 01       	movw	r18, r8
    1610:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__mulohisi3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	8c 0d       	add	r24, r12
    161a:	9d 1d       	adc	r25, r13
    161c:	ae 1d       	adc	r26, r14
    161e:	bf 1d       	adc	r27, r15
    1620:	b7 ff       	sbrs	r27, 7
    1622:	03 c0       	rjmp	.+6      	; 0x162a <do_rand+0x72>
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	a1 09       	sbc	r26, r1
    1628:	b0 48       	sbci	r27, 0x80	; 128
    162a:	88 83       	st	Y, r24
    162c:	99 83       	std	Y+1, r25	; 0x01
    162e:	aa 83       	std	Y+2, r26	; 0x02
    1630:	bb 83       	std	Y+3, r27	; 0x03
    1632:	9f 77       	andi	r25, 0x7F	; 127
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	ff 90       	pop	r15
    163a:	ef 90       	pop	r14
    163c:	df 90       	pop	r13
    163e:	cf 90       	pop	r12
    1640:	bf 90       	pop	r11
    1642:	af 90       	pop	r10
    1644:	9f 90       	pop	r9
    1646:	8f 90       	pop	r8
    1648:	08 95       	ret

0000164a <rand_r>:
    164a:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <do_rand>
    164e:	08 95       	ret

00001650 <rand>:
    1650:	86 e0       	ldi	r24, 0x06	; 6
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <do_rand>
    1658:	08 95       	ret

0000165a <srand>:
    165a:	a0 e0       	ldi	r26, 0x00	; 0
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    1662:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    1666:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    166a:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    166e:	08 95       	ret

00001670 <fdevopen>:
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	31 f4       	brne	.+12     	; 0x1688 <fdevopen+0x18>
    167c:	61 15       	cp	r22, r1
    167e:	71 05       	cpc	r23, r1
    1680:	19 f4       	brne	.+6      	; 0x1688 <fdevopen+0x18>
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	3a c0       	rjmp	.+116    	; 0x16fc <fdevopen+0x8c>
    1688:	8b 01       	movw	r16, r22
    168a:	ec 01       	movw	r28, r24
    168c:	6e e0       	ldi	r22, 0x0E	; 14
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <calloc>
    1698:	fc 01       	movw	r30, r24
    169a:	89 2b       	or	r24, r25
    169c:	91 f3       	breq	.-28     	; 0x1682 <fdevopen+0x12>
    169e:	80 e8       	ldi	r24, 0x80	; 128
    16a0:	83 83       	std	Z+3, r24	; 0x03
    16a2:	01 15       	cp	r16, r1
    16a4:	11 05       	cpc	r17, r1
    16a6:	71 f0       	breq	.+28     	; 0x16c4 <fdevopen+0x54>
    16a8:	13 87       	std	Z+11, r17	; 0x0b
    16aa:	02 87       	std	Z+10, r16	; 0x0a
    16ac:	81 e8       	ldi	r24, 0x81	; 129
    16ae:	83 83       	std	Z+3, r24	; 0x03
    16b0:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <__iob>
    16b4:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <__iob+0x1>
    16b8:	89 2b       	or	r24, r25
    16ba:	21 f4       	brne	.+8      	; 0x16c4 <fdevopen+0x54>
    16bc:	f0 93 03 03 	sts	0x0303, r31	; 0x800303 <__iob+0x1>
    16c0:	e0 93 02 03 	sts	0x0302, r30	; 0x800302 <__iob>
    16c4:	20 97       	sbiw	r28, 0x00	; 0
    16c6:	c9 f0       	breq	.+50     	; 0x16fa <fdevopen+0x8a>
    16c8:	d1 87       	std	Z+9, r29	; 0x09
    16ca:	c0 87       	std	Z+8, r28	; 0x08
    16cc:	83 81       	ldd	r24, Z+3	; 0x03
    16ce:	82 60       	ori	r24, 0x02	; 2
    16d0:	83 83       	std	Z+3, r24	; 0x03
    16d2:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <__iob+0x2>
    16d6:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <__iob+0x3>
    16da:	89 2b       	or	r24, r25
    16dc:	71 f4       	brne	.+28     	; 0x16fa <fdevopen+0x8a>
    16de:	f0 93 05 03 	sts	0x0305, r31	; 0x800305 <__iob+0x3>
    16e2:	e0 93 04 03 	sts	0x0304, r30	; 0x800304 <__iob+0x2>
    16e6:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <__iob+0x4>
    16ea:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <__iob+0x5>
    16ee:	89 2b       	or	r24, r25
    16f0:	21 f4       	brne	.+8      	; 0x16fa <fdevopen+0x8a>
    16f2:	f0 93 07 03 	sts	0x0307, r31	; 0x800307 <__iob+0x5>
    16f6:	e0 93 06 03 	sts	0x0306, r30	; 0x800306 <__iob+0x4>
    16fa:	cf 01       	movw	r24, r30
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	08 95       	ret

00001706 <fputc>:
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	fb 01       	movw	r30, r22
    1710:	23 81       	ldd	r18, Z+3	; 0x03
    1712:	21 fd       	sbrc	r18, 1
    1714:	03 c0       	rjmp	.+6      	; 0x171c <fputc+0x16>
    1716:	8f ef       	ldi	r24, 0xFF	; 255
    1718:	9f ef       	ldi	r25, 0xFF	; 255
    171a:	2c c0       	rjmp	.+88     	; 0x1774 <fputc+0x6e>
    171c:	22 ff       	sbrs	r18, 2
    171e:	16 c0       	rjmp	.+44     	; 0x174c <fputc+0x46>
    1720:	46 81       	ldd	r20, Z+6	; 0x06
    1722:	57 81       	ldd	r21, Z+7	; 0x07
    1724:	24 81       	ldd	r18, Z+4	; 0x04
    1726:	35 81       	ldd	r19, Z+5	; 0x05
    1728:	42 17       	cp	r20, r18
    172a:	53 07       	cpc	r21, r19
    172c:	44 f4       	brge	.+16     	; 0x173e <fputc+0x38>
    172e:	a0 81       	ld	r26, Z
    1730:	b1 81       	ldd	r27, Z+1	; 0x01
    1732:	9d 01       	movw	r18, r26
    1734:	2f 5f       	subi	r18, 0xFF	; 255
    1736:	3f 4f       	sbci	r19, 0xFF	; 255
    1738:	31 83       	std	Z+1, r19	; 0x01
    173a:	20 83       	st	Z, r18
    173c:	8c 93       	st	X, r24
    173e:	26 81       	ldd	r18, Z+6	; 0x06
    1740:	37 81       	ldd	r19, Z+7	; 0x07
    1742:	2f 5f       	subi	r18, 0xFF	; 255
    1744:	3f 4f       	sbci	r19, 0xFF	; 255
    1746:	37 83       	std	Z+7, r19	; 0x07
    1748:	26 83       	std	Z+6, r18	; 0x06
    174a:	14 c0       	rjmp	.+40     	; 0x1774 <fputc+0x6e>
    174c:	8b 01       	movw	r16, r22
    174e:	ec 01       	movw	r28, r24
    1750:	fb 01       	movw	r30, r22
    1752:	00 84       	ldd	r0, Z+8	; 0x08
    1754:	f1 85       	ldd	r31, Z+9	; 0x09
    1756:	e0 2d       	mov	r30, r0
    1758:	09 95       	icall
    175a:	89 2b       	or	r24, r25
    175c:	e1 f6       	brne	.-72     	; 0x1716 <fputc+0x10>
    175e:	d8 01       	movw	r26, r16
    1760:	16 96       	adiw	r26, 0x06	; 6
    1762:	8d 91       	ld	r24, X+
    1764:	9c 91       	ld	r25, X
    1766:	17 97       	sbiw	r26, 0x07	; 7
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	17 96       	adiw	r26, 0x07	; 7
    176c:	9c 93       	st	X, r25
    176e:	8e 93       	st	-X, r24
    1770:	16 97       	sbiw	r26, 0x06	; 6
    1772:	ce 01       	movw	r24, r28
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	08 95       	ret

0000177e <fputs>:
    177e:	ef 92       	push	r14
    1780:	ff 92       	push	r15
    1782:	0f 93       	push	r16
    1784:	1f 93       	push	r17
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	db 01       	movw	r26, r22
    178c:	13 96       	adiw	r26, 0x03	; 3
    178e:	2c 91       	ld	r18, X
    1790:	21 ff       	sbrs	r18, 1
    1792:	18 c0       	rjmp	.+48     	; 0x17c4 <fputs+0x46>
    1794:	8b 01       	movw	r16, r22
    1796:	7c 01       	movw	r14, r24
    1798:	d0 e0       	ldi	r29, 0x00	; 0
    179a:	c0 e0       	ldi	r28, 0x00	; 0
    179c:	f7 01       	movw	r30, r14
    179e:	81 91       	ld	r24, Z+
    17a0:	7f 01       	movw	r14, r30
    17a2:	88 23       	and	r24, r24
    17a4:	61 f0       	breq	.+24     	; 0x17be <fputs+0x40>
    17a6:	d8 01       	movw	r26, r16
    17a8:	18 96       	adiw	r26, 0x08	; 8
    17aa:	ed 91       	ld	r30, X+
    17ac:	fc 91       	ld	r31, X
    17ae:	19 97       	sbiw	r26, 0x09	; 9
    17b0:	b8 01       	movw	r22, r16
    17b2:	09 95       	icall
    17b4:	89 2b       	or	r24, r25
    17b6:	91 f3       	breq	.-28     	; 0x179c <fputs+0x1e>
    17b8:	df ef       	ldi	r29, 0xFF	; 255
    17ba:	cf ef       	ldi	r28, 0xFF	; 255
    17bc:	ef cf       	rjmp	.-34     	; 0x179c <fputs+0x1e>
    17be:	8d 2f       	mov	r24, r29
    17c0:	9c 2f       	mov	r25, r28
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <fputs+0x4a>
    17c4:	8f ef       	ldi	r24, 0xFF	; 255
    17c6:	9f ef       	ldi	r25, 0xFF	; 255
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	e6 e0       	ldi	r30, 0x06	; 6
    17ce:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__epilogue_restores__+0x18>

000017d2 <fwrite>:
    17d2:	a0 e0       	ldi	r26, 0x00	; 0
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	ef ee       	ldi	r30, 0xEF	; 239
    17d8:	fb e0       	ldi	r31, 0x0B	; 11
    17da:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__prologue_saves__+0xc>
    17de:	5b 01       	movw	r10, r22
    17e0:	4a 01       	movw	r8, r20
    17e2:	79 01       	movw	r14, r18
    17e4:	d9 01       	movw	r26, r18
    17e6:	13 96       	adiw	r26, 0x03	; 3
    17e8:	2c 91       	ld	r18, X
    17ea:	21 ff       	sbrs	r18, 1
    17ec:	1d c0       	rjmp	.+58     	; 0x1828 <fwrite+0x56>
    17ee:	c0 e0       	ldi	r28, 0x00	; 0
    17f0:	d0 e0       	ldi	r29, 0x00	; 0
    17f2:	c8 15       	cp	r28, r8
    17f4:	d9 05       	cpc	r29, r9
    17f6:	d9 f0       	breq	.+54     	; 0x182e <fwrite+0x5c>
    17f8:	8c 01       	movw	r16, r24
    17fa:	6c 01       	movw	r12, r24
    17fc:	ca 0c       	add	r12, r10
    17fe:	db 1c       	adc	r13, r11
    1800:	c8 01       	movw	r24, r16
    1802:	0c 15       	cp	r16, r12
    1804:	1d 05       	cpc	r17, r13
    1806:	71 f0       	breq	.+28     	; 0x1824 <fwrite+0x52>
    1808:	0f 5f       	subi	r16, 0xFF	; 255
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	d7 01       	movw	r26, r14
    180e:	18 96       	adiw	r26, 0x08	; 8
    1810:	ed 91       	ld	r30, X+
    1812:	fc 91       	ld	r31, X
    1814:	19 97       	sbiw	r26, 0x09	; 9
    1816:	b7 01       	movw	r22, r14
    1818:	dc 01       	movw	r26, r24
    181a:	8c 91       	ld	r24, X
    181c:	09 95       	icall
    181e:	89 2b       	or	r24, r25
    1820:	79 f3       	breq	.-34     	; 0x1800 <fwrite+0x2e>
    1822:	05 c0       	rjmp	.+10     	; 0x182e <fwrite+0x5c>
    1824:	21 96       	adiw	r28, 0x01	; 1
    1826:	e5 cf       	rjmp	.-54     	; 0x17f2 <fwrite+0x20>
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	01 c0       	rjmp	.+2      	; 0x1830 <fwrite+0x5e>
    182e:	ce 01       	movw	r24, r28
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	ec e0       	ldi	r30, 0x0C	; 12
    1836:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__epilogue_restores__+0xc>

0000183a <printf>:
    183a:	a0 e0       	ldi	r26, 0x00	; 0
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e3 e2       	ldi	r30, 0x23	; 35
    1840:	fc e0       	ldi	r31, 0x0C	; 12
    1842:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__prologue_saves__+0x20>
    1846:	ae 01       	movw	r20, r28
    1848:	4b 5f       	subi	r20, 0xFB	; 251
    184a:	5f 4f       	sbci	r21, 0xFF	; 255
    184c:	fa 01       	movw	r30, r20
    184e:	61 91       	ld	r22, Z+
    1850:	71 91       	ld	r23, Z+
    1852:	af 01       	movw	r20, r30
    1854:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <__iob+0x2>
    1858:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <__iob+0x3>
    185c:	0e 94 33 0c 	call	0x1866	; 0x1866 <vfprintf>
    1860:	e2 e0       	ldi	r30, 0x02	; 2
    1862:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <__epilogue_restores__+0x20>

00001866 <vfprintf>:
    1866:	ab e0       	ldi	r26, 0x0B	; 11
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e9 e3       	ldi	r30, 0x39	; 57
    186c:	fc e0       	ldi	r31, 0x0C	; 12
    186e:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__prologue_saves__>
    1872:	6c 01       	movw	r12, r24
    1874:	7b 01       	movw	r14, r22
    1876:	8a 01       	movw	r16, r20
    1878:	fc 01       	movw	r30, r24
    187a:	17 82       	std	Z+7, r1	; 0x07
    187c:	16 82       	std	Z+6, r1	; 0x06
    187e:	83 81       	ldd	r24, Z+3	; 0x03
    1880:	81 ff       	sbrs	r24, 1
    1882:	cc c1       	rjmp	.+920    	; 0x1c1c <vfprintf+0x3b6>
    1884:	ce 01       	movw	r24, r28
    1886:	01 96       	adiw	r24, 0x01	; 1
    1888:	3c 01       	movw	r6, r24
    188a:	f6 01       	movw	r30, r12
    188c:	93 81       	ldd	r25, Z+3	; 0x03
    188e:	f7 01       	movw	r30, r14
    1890:	93 fd       	sbrc	r25, 3
    1892:	85 91       	lpm	r24, Z+
    1894:	93 ff       	sbrs	r25, 3
    1896:	81 91       	ld	r24, Z+
    1898:	7f 01       	movw	r14, r30
    189a:	88 23       	and	r24, r24
    189c:	09 f4       	brne	.+2      	; 0x18a0 <vfprintf+0x3a>
    189e:	ba c1       	rjmp	.+884    	; 0x1c14 <vfprintf+0x3ae>
    18a0:	85 32       	cpi	r24, 0x25	; 37
    18a2:	39 f4       	brne	.+14     	; 0x18b2 <vfprintf+0x4c>
    18a4:	93 fd       	sbrc	r25, 3
    18a6:	85 91       	lpm	r24, Z+
    18a8:	93 ff       	sbrs	r25, 3
    18aa:	81 91       	ld	r24, Z+
    18ac:	7f 01       	movw	r14, r30
    18ae:	85 32       	cpi	r24, 0x25	; 37
    18b0:	29 f4       	brne	.+10     	; 0x18bc <vfprintf+0x56>
    18b2:	b6 01       	movw	r22, r12
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 83 0b 	call	0x1706	; 0x1706 <fputc>
    18ba:	e7 cf       	rjmp	.-50     	; 0x188a <vfprintf+0x24>
    18bc:	91 2c       	mov	r9, r1
    18be:	21 2c       	mov	r2, r1
    18c0:	31 2c       	mov	r3, r1
    18c2:	ff e1       	ldi	r31, 0x1F	; 31
    18c4:	f3 15       	cp	r31, r3
    18c6:	d8 f0       	brcs	.+54     	; 0x18fe <vfprintf+0x98>
    18c8:	8b 32       	cpi	r24, 0x2B	; 43
    18ca:	79 f0       	breq	.+30     	; 0x18ea <vfprintf+0x84>
    18cc:	38 f4       	brcc	.+14     	; 0x18dc <vfprintf+0x76>
    18ce:	80 32       	cpi	r24, 0x20	; 32
    18d0:	79 f0       	breq	.+30     	; 0x18f0 <vfprintf+0x8a>
    18d2:	83 32       	cpi	r24, 0x23	; 35
    18d4:	a1 f4       	brne	.+40     	; 0x18fe <vfprintf+0x98>
    18d6:	23 2d       	mov	r18, r3
    18d8:	20 61       	ori	r18, 0x10	; 16
    18da:	1d c0       	rjmp	.+58     	; 0x1916 <vfprintf+0xb0>
    18dc:	8d 32       	cpi	r24, 0x2D	; 45
    18de:	61 f0       	breq	.+24     	; 0x18f8 <vfprintf+0x92>
    18e0:	80 33       	cpi	r24, 0x30	; 48
    18e2:	69 f4       	brne	.+26     	; 0x18fe <vfprintf+0x98>
    18e4:	23 2d       	mov	r18, r3
    18e6:	21 60       	ori	r18, 0x01	; 1
    18e8:	16 c0       	rjmp	.+44     	; 0x1916 <vfprintf+0xb0>
    18ea:	83 2d       	mov	r24, r3
    18ec:	82 60       	ori	r24, 0x02	; 2
    18ee:	38 2e       	mov	r3, r24
    18f0:	e3 2d       	mov	r30, r3
    18f2:	e4 60       	ori	r30, 0x04	; 4
    18f4:	3e 2e       	mov	r3, r30
    18f6:	2a c0       	rjmp	.+84     	; 0x194c <vfprintf+0xe6>
    18f8:	f3 2d       	mov	r31, r3
    18fa:	f8 60       	ori	r31, 0x08	; 8
    18fc:	1d c0       	rjmp	.+58     	; 0x1938 <vfprintf+0xd2>
    18fe:	37 fc       	sbrc	r3, 7
    1900:	2d c0       	rjmp	.+90     	; 0x195c <vfprintf+0xf6>
    1902:	20 ed       	ldi	r18, 0xD0	; 208
    1904:	28 0f       	add	r18, r24
    1906:	2a 30       	cpi	r18, 0x0A	; 10
    1908:	40 f0       	brcs	.+16     	; 0x191a <vfprintf+0xb4>
    190a:	8e 32       	cpi	r24, 0x2E	; 46
    190c:	b9 f4       	brne	.+46     	; 0x193c <vfprintf+0xd6>
    190e:	36 fc       	sbrc	r3, 6
    1910:	81 c1       	rjmp	.+770    	; 0x1c14 <vfprintf+0x3ae>
    1912:	23 2d       	mov	r18, r3
    1914:	20 64       	ori	r18, 0x40	; 64
    1916:	32 2e       	mov	r3, r18
    1918:	19 c0       	rjmp	.+50     	; 0x194c <vfprintf+0xe6>
    191a:	36 fe       	sbrs	r3, 6
    191c:	06 c0       	rjmp	.+12     	; 0x192a <vfprintf+0xc4>
    191e:	8a e0       	ldi	r24, 0x0A	; 10
    1920:	98 9e       	mul	r9, r24
    1922:	20 0d       	add	r18, r0
    1924:	11 24       	eor	r1, r1
    1926:	92 2e       	mov	r9, r18
    1928:	11 c0       	rjmp	.+34     	; 0x194c <vfprintf+0xe6>
    192a:	ea e0       	ldi	r30, 0x0A	; 10
    192c:	2e 9e       	mul	r2, r30
    192e:	20 0d       	add	r18, r0
    1930:	11 24       	eor	r1, r1
    1932:	22 2e       	mov	r2, r18
    1934:	f3 2d       	mov	r31, r3
    1936:	f0 62       	ori	r31, 0x20	; 32
    1938:	3f 2e       	mov	r3, r31
    193a:	08 c0       	rjmp	.+16     	; 0x194c <vfprintf+0xe6>
    193c:	8c 36       	cpi	r24, 0x6C	; 108
    193e:	21 f4       	brne	.+8      	; 0x1948 <vfprintf+0xe2>
    1940:	83 2d       	mov	r24, r3
    1942:	80 68       	ori	r24, 0x80	; 128
    1944:	38 2e       	mov	r3, r24
    1946:	02 c0       	rjmp	.+4      	; 0x194c <vfprintf+0xe6>
    1948:	88 36       	cpi	r24, 0x68	; 104
    194a:	41 f4       	brne	.+16     	; 0x195c <vfprintf+0xf6>
    194c:	f7 01       	movw	r30, r14
    194e:	93 fd       	sbrc	r25, 3
    1950:	85 91       	lpm	r24, Z+
    1952:	93 ff       	sbrs	r25, 3
    1954:	81 91       	ld	r24, Z+
    1956:	7f 01       	movw	r14, r30
    1958:	81 11       	cpse	r24, r1
    195a:	b3 cf       	rjmp	.-154    	; 0x18c2 <vfprintf+0x5c>
    195c:	98 2f       	mov	r25, r24
    195e:	9f 7d       	andi	r25, 0xDF	; 223
    1960:	95 54       	subi	r25, 0x45	; 69
    1962:	93 30       	cpi	r25, 0x03	; 3
    1964:	28 f4       	brcc	.+10     	; 0x1970 <vfprintf+0x10a>
    1966:	0c 5f       	subi	r16, 0xFC	; 252
    1968:	1f 4f       	sbci	r17, 0xFF	; 255
    196a:	9f e3       	ldi	r25, 0x3F	; 63
    196c:	99 83       	std	Y+1, r25	; 0x01
    196e:	0d c0       	rjmp	.+26     	; 0x198a <vfprintf+0x124>
    1970:	83 36       	cpi	r24, 0x63	; 99
    1972:	31 f0       	breq	.+12     	; 0x1980 <vfprintf+0x11a>
    1974:	83 37       	cpi	r24, 0x73	; 115
    1976:	71 f0       	breq	.+28     	; 0x1994 <vfprintf+0x12e>
    1978:	83 35       	cpi	r24, 0x53	; 83
    197a:	09 f0       	breq	.+2      	; 0x197e <vfprintf+0x118>
    197c:	59 c0       	rjmp	.+178    	; 0x1a30 <vfprintf+0x1ca>
    197e:	21 c0       	rjmp	.+66     	; 0x19c2 <vfprintf+0x15c>
    1980:	f8 01       	movw	r30, r16
    1982:	80 81       	ld	r24, Z
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	0e 5f       	subi	r16, 0xFE	; 254
    1988:	1f 4f       	sbci	r17, 0xFF	; 255
    198a:	88 24       	eor	r8, r8
    198c:	83 94       	inc	r8
    198e:	91 2c       	mov	r9, r1
    1990:	53 01       	movw	r10, r6
    1992:	13 c0       	rjmp	.+38     	; 0x19ba <vfprintf+0x154>
    1994:	28 01       	movw	r4, r16
    1996:	f2 e0       	ldi	r31, 0x02	; 2
    1998:	4f 0e       	add	r4, r31
    199a:	51 1c       	adc	r5, r1
    199c:	f8 01       	movw	r30, r16
    199e:	a0 80       	ld	r10, Z
    19a0:	b1 80       	ldd	r11, Z+1	; 0x01
    19a2:	36 fe       	sbrs	r3, 6
    19a4:	03 c0       	rjmp	.+6      	; 0x19ac <vfprintf+0x146>
    19a6:	69 2d       	mov	r22, r9
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <vfprintf+0x14a>
    19ac:	6f ef       	ldi	r22, 0xFF	; 255
    19ae:	7f ef       	ldi	r23, 0xFF	; 255
    19b0:	c5 01       	movw	r24, r10
    19b2:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <strnlen>
    19b6:	4c 01       	movw	r8, r24
    19b8:	82 01       	movw	r16, r4
    19ba:	f3 2d       	mov	r31, r3
    19bc:	ff 77       	andi	r31, 0x7F	; 127
    19be:	3f 2e       	mov	r3, r31
    19c0:	16 c0       	rjmp	.+44     	; 0x19ee <vfprintf+0x188>
    19c2:	28 01       	movw	r4, r16
    19c4:	22 e0       	ldi	r18, 0x02	; 2
    19c6:	42 0e       	add	r4, r18
    19c8:	51 1c       	adc	r5, r1
    19ca:	f8 01       	movw	r30, r16
    19cc:	a0 80       	ld	r10, Z
    19ce:	b1 80       	ldd	r11, Z+1	; 0x01
    19d0:	36 fe       	sbrs	r3, 6
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <vfprintf+0x174>
    19d4:	69 2d       	mov	r22, r9
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <vfprintf+0x178>
    19da:	6f ef       	ldi	r22, 0xFF	; 255
    19dc:	7f ef       	ldi	r23, 0xFF	; 255
    19de:	c5 01       	movw	r24, r10
    19e0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <strnlen_P>
    19e4:	4c 01       	movw	r8, r24
    19e6:	f3 2d       	mov	r31, r3
    19e8:	f0 68       	ori	r31, 0x80	; 128
    19ea:	3f 2e       	mov	r3, r31
    19ec:	82 01       	movw	r16, r4
    19ee:	33 fc       	sbrc	r3, 3
    19f0:	1b c0       	rjmp	.+54     	; 0x1a28 <vfprintf+0x1c2>
    19f2:	82 2d       	mov	r24, r2
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	88 16       	cp	r8, r24
    19f8:	99 06       	cpc	r9, r25
    19fa:	b0 f4       	brcc	.+44     	; 0x1a28 <vfprintf+0x1c2>
    19fc:	b6 01       	movw	r22, r12
    19fe:	80 e2       	ldi	r24, 0x20	; 32
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 83 0b 	call	0x1706	; 0x1706 <fputc>
    1a06:	2a 94       	dec	r2
    1a08:	f4 cf       	rjmp	.-24     	; 0x19f2 <vfprintf+0x18c>
    1a0a:	f5 01       	movw	r30, r10
    1a0c:	37 fc       	sbrc	r3, 7
    1a0e:	85 91       	lpm	r24, Z+
    1a10:	37 fe       	sbrs	r3, 7
    1a12:	81 91       	ld	r24, Z+
    1a14:	5f 01       	movw	r10, r30
    1a16:	b6 01       	movw	r22, r12
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	0e 94 83 0b 	call	0x1706	; 0x1706 <fputc>
    1a1e:	21 10       	cpse	r2, r1
    1a20:	2a 94       	dec	r2
    1a22:	21 e0       	ldi	r18, 0x01	; 1
    1a24:	82 1a       	sub	r8, r18
    1a26:	91 08       	sbc	r9, r1
    1a28:	81 14       	cp	r8, r1
    1a2a:	91 04       	cpc	r9, r1
    1a2c:	71 f7       	brne	.-36     	; 0x1a0a <vfprintf+0x1a4>
    1a2e:	e8 c0       	rjmp	.+464    	; 0x1c00 <vfprintf+0x39a>
    1a30:	84 36       	cpi	r24, 0x64	; 100
    1a32:	11 f0       	breq	.+4      	; 0x1a38 <vfprintf+0x1d2>
    1a34:	89 36       	cpi	r24, 0x69	; 105
    1a36:	41 f5       	brne	.+80     	; 0x1a88 <vfprintf+0x222>
    1a38:	f8 01       	movw	r30, r16
    1a3a:	37 fe       	sbrs	r3, 7
    1a3c:	07 c0       	rjmp	.+14     	; 0x1a4c <vfprintf+0x1e6>
    1a3e:	60 81       	ld	r22, Z
    1a40:	71 81       	ldd	r23, Z+1	; 0x01
    1a42:	82 81       	ldd	r24, Z+2	; 0x02
    1a44:	93 81       	ldd	r25, Z+3	; 0x03
    1a46:	0c 5f       	subi	r16, 0xFC	; 252
    1a48:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4a:	08 c0       	rjmp	.+16     	; 0x1a5c <vfprintf+0x1f6>
    1a4c:	60 81       	ld	r22, Z
    1a4e:	71 81       	ldd	r23, Z+1	; 0x01
    1a50:	07 2e       	mov	r0, r23
    1a52:	00 0c       	add	r0, r0
    1a54:	88 0b       	sbc	r24, r24
    1a56:	99 0b       	sbc	r25, r25
    1a58:	0e 5f       	subi	r16, 0xFE	; 254
    1a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5c:	f3 2d       	mov	r31, r3
    1a5e:	ff 76       	andi	r31, 0x6F	; 111
    1a60:	3f 2e       	mov	r3, r31
    1a62:	97 ff       	sbrs	r25, 7
    1a64:	09 c0       	rjmp	.+18     	; 0x1a78 <vfprintf+0x212>
    1a66:	90 95       	com	r25
    1a68:	80 95       	com	r24
    1a6a:	70 95       	com	r23
    1a6c:	61 95       	neg	r22
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	8f 4f       	sbci	r24, 0xFF	; 255
    1a72:	9f 4f       	sbci	r25, 0xFF	; 255
    1a74:	f0 68       	ori	r31, 0x80	; 128
    1a76:	3f 2e       	mov	r3, r31
    1a78:	2a e0       	ldi	r18, 0x0A	; 10
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	a3 01       	movw	r20, r6
    1a7e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__ultoa_invert>
    1a82:	88 2e       	mov	r8, r24
    1a84:	86 18       	sub	r8, r6
    1a86:	45 c0       	rjmp	.+138    	; 0x1b12 <vfprintf+0x2ac>
    1a88:	85 37       	cpi	r24, 0x75	; 117
    1a8a:	31 f4       	brne	.+12     	; 0x1a98 <vfprintf+0x232>
    1a8c:	23 2d       	mov	r18, r3
    1a8e:	2f 7e       	andi	r18, 0xEF	; 239
    1a90:	b2 2e       	mov	r11, r18
    1a92:	2a e0       	ldi	r18, 0x0A	; 10
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	25 c0       	rjmp	.+74     	; 0x1ae2 <vfprintf+0x27c>
    1a98:	93 2d       	mov	r25, r3
    1a9a:	99 7f       	andi	r25, 0xF9	; 249
    1a9c:	b9 2e       	mov	r11, r25
    1a9e:	8f 36       	cpi	r24, 0x6F	; 111
    1aa0:	c1 f0       	breq	.+48     	; 0x1ad2 <vfprintf+0x26c>
    1aa2:	18 f4       	brcc	.+6      	; 0x1aaa <vfprintf+0x244>
    1aa4:	88 35       	cpi	r24, 0x58	; 88
    1aa6:	79 f0       	breq	.+30     	; 0x1ac6 <vfprintf+0x260>
    1aa8:	b5 c0       	rjmp	.+362    	; 0x1c14 <vfprintf+0x3ae>
    1aaa:	80 37       	cpi	r24, 0x70	; 112
    1aac:	19 f0       	breq	.+6      	; 0x1ab4 <vfprintf+0x24e>
    1aae:	88 37       	cpi	r24, 0x78	; 120
    1ab0:	21 f0       	breq	.+8      	; 0x1aba <vfprintf+0x254>
    1ab2:	b0 c0       	rjmp	.+352    	; 0x1c14 <vfprintf+0x3ae>
    1ab4:	e9 2f       	mov	r30, r25
    1ab6:	e0 61       	ori	r30, 0x10	; 16
    1ab8:	be 2e       	mov	r11, r30
    1aba:	b4 fe       	sbrs	r11, 4
    1abc:	0d c0       	rjmp	.+26     	; 0x1ad8 <vfprintf+0x272>
    1abe:	fb 2d       	mov	r31, r11
    1ac0:	f4 60       	ori	r31, 0x04	; 4
    1ac2:	bf 2e       	mov	r11, r31
    1ac4:	09 c0       	rjmp	.+18     	; 0x1ad8 <vfprintf+0x272>
    1ac6:	34 fe       	sbrs	r3, 4
    1ac8:	0a c0       	rjmp	.+20     	; 0x1ade <vfprintf+0x278>
    1aca:	29 2f       	mov	r18, r25
    1acc:	26 60       	ori	r18, 0x06	; 6
    1ace:	b2 2e       	mov	r11, r18
    1ad0:	06 c0       	rjmp	.+12     	; 0x1ade <vfprintf+0x278>
    1ad2:	28 e0       	ldi	r18, 0x08	; 8
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	05 c0       	rjmp	.+10     	; 0x1ae2 <vfprintf+0x27c>
    1ad8:	20 e1       	ldi	r18, 0x10	; 16
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <vfprintf+0x27c>
    1ade:	20 e1       	ldi	r18, 0x10	; 16
    1ae0:	32 e0       	ldi	r19, 0x02	; 2
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	b7 fe       	sbrs	r11, 7
    1ae6:	07 c0       	rjmp	.+14     	; 0x1af6 <vfprintf+0x290>
    1ae8:	60 81       	ld	r22, Z
    1aea:	71 81       	ldd	r23, Z+1	; 0x01
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	0c 5f       	subi	r16, 0xFC	; 252
    1af2:	1f 4f       	sbci	r17, 0xFF	; 255
    1af4:	06 c0       	rjmp	.+12     	; 0x1b02 <vfprintf+0x29c>
    1af6:	60 81       	ld	r22, Z
    1af8:	71 81       	ldd	r23, Z+1	; 0x01
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	0e 5f       	subi	r16, 0xFE	; 254
    1b00:	1f 4f       	sbci	r17, 0xFF	; 255
    1b02:	a3 01       	movw	r20, r6
    1b04:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__ultoa_invert>
    1b08:	88 2e       	mov	r8, r24
    1b0a:	86 18       	sub	r8, r6
    1b0c:	fb 2d       	mov	r31, r11
    1b0e:	ff 77       	andi	r31, 0x7F	; 127
    1b10:	3f 2e       	mov	r3, r31
    1b12:	36 fe       	sbrs	r3, 6
    1b14:	0d c0       	rjmp	.+26     	; 0x1b30 <vfprintf+0x2ca>
    1b16:	23 2d       	mov	r18, r3
    1b18:	2e 7f       	andi	r18, 0xFE	; 254
    1b1a:	a2 2e       	mov	r10, r18
    1b1c:	89 14       	cp	r8, r9
    1b1e:	58 f4       	brcc	.+22     	; 0x1b36 <vfprintf+0x2d0>
    1b20:	34 fe       	sbrs	r3, 4
    1b22:	0b c0       	rjmp	.+22     	; 0x1b3a <vfprintf+0x2d4>
    1b24:	32 fc       	sbrc	r3, 2
    1b26:	09 c0       	rjmp	.+18     	; 0x1b3a <vfprintf+0x2d4>
    1b28:	83 2d       	mov	r24, r3
    1b2a:	8e 7e       	andi	r24, 0xEE	; 238
    1b2c:	a8 2e       	mov	r10, r24
    1b2e:	05 c0       	rjmp	.+10     	; 0x1b3a <vfprintf+0x2d4>
    1b30:	b8 2c       	mov	r11, r8
    1b32:	a3 2c       	mov	r10, r3
    1b34:	03 c0       	rjmp	.+6      	; 0x1b3c <vfprintf+0x2d6>
    1b36:	b8 2c       	mov	r11, r8
    1b38:	01 c0       	rjmp	.+2      	; 0x1b3c <vfprintf+0x2d6>
    1b3a:	b9 2c       	mov	r11, r9
    1b3c:	a4 fe       	sbrs	r10, 4
    1b3e:	0f c0       	rjmp	.+30     	; 0x1b5e <vfprintf+0x2f8>
    1b40:	fe 01       	movw	r30, r28
    1b42:	e8 0d       	add	r30, r8
    1b44:	f1 1d       	adc	r31, r1
    1b46:	80 81       	ld	r24, Z
    1b48:	80 33       	cpi	r24, 0x30	; 48
    1b4a:	21 f4       	brne	.+8      	; 0x1b54 <vfprintf+0x2ee>
    1b4c:	9a 2d       	mov	r25, r10
    1b4e:	99 7e       	andi	r25, 0xE9	; 233
    1b50:	a9 2e       	mov	r10, r25
    1b52:	09 c0       	rjmp	.+18     	; 0x1b66 <vfprintf+0x300>
    1b54:	a2 fe       	sbrs	r10, 2
    1b56:	06 c0       	rjmp	.+12     	; 0x1b64 <vfprintf+0x2fe>
    1b58:	b3 94       	inc	r11
    1b5a:	b3 94       	inc	r11
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <vfprintf+0x300>
    1b5e:	8a 2d       	mov	r24, r10
    1b60:	86 78       	andi	r24, 0x86	; 134
    1b62:	09 f0       	breq	.+2      	; 0x1b66 <vfprintf+0x300>
    1b64:	b3 94       	inc	r11
    1b66:	a3 fc       	sbrc	r10, 3
    1b68:	11 c0       	rjmp	.+34     	; 0x1b8c <vfprintf+0x326>
    1b6a:	a0 fe       	sbrs	r10, 0
    1b6c:	06 c0       	rjmp	.+12     	; 0x1b7a <vfprintf+0x314>
    1b6e:	b2 14       	cp	r11, r2
    1b70:	88 f4       	brcc	.+34     	; 0x1b94 <vfprintf+0x32e>
    1b72:	28 0c       	add	r2, r8
    1b74:	92 2c       	mov	r9, r2
    1b76:	9b 18       	sub	r9, r11
    1b78:	0e c0       	rjmp	.+28     	; 0x1b96 <vfprintf+0x330>
    1b7a:	b2 14       	cp	r11, r2
    1b7c:	60 f4       	brcc	.+24     	; 0x1b96 <vfprintf+0x330>
    1b7e:	b6 01       	movw	r22, r12
    1b80:	80 e2       	ldi	r24, 0x20	; 32
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	0e 94 83 0b 	call	0x1706	; 0x1706 <fputc>
    1b88:	b3 94       	inc	r11
    1b8a:	f7 cf       	rjmp	.-18     	; 0x1b7a <vfprintf+0x314>
    1b8c:	b2 14       	cp	r11, r2
    1b8e:	18 f4       	brcc	.+6      	; 0x1b96 <vfprintf+0x330>
    1b90:	2b 18       	sub	r2, r11
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <vfprintf+0x332>
    1b94:	98 2c       	mov	r9, r8
    1b96:	21 2c       	mov	r2, r1
    1b98:	a4 fe       	sbrs	r10, 4
    1b9a:	10 c0       	rjmp	.+32     	; 0x1bbc <vfprintf+0x356>
    1b9c:	b6 01       	movw	r22, r12
    1b9e:	80 e3       	ldi	r24, 0x30	; 48
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 83 0b 	call	0x1706	; 0x1706 <fputc>
    1ba6:	a2 fe       	sbrs	r10, 2
    1ba8:	17 c0       	rjmp	.+46     	; 0x1bd8 <vfprintf+0x372>
    1baa:	a1 fc       	sbrc	r10, 1
    1bac:	03 c0       	rjmp	.+6      	; 0x1bb4 <vfprintf+0x34e>
    1bae:	88 e7       	ldi	r24, 0x78	; 120
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <vfprintf+0x352>
    1bb4:	88 e5       	ldi	r24, 0x58	; 88
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	b6 01       	movw	r22, r12
    1bba:	0c c0       	rjmp	.+24     	; 0x1bd4 <vfprintf+0x36e>
    1bbc:	8a 2d       	mov	r24, r10
    1bbe:	86 78       	andi	r24, 0x86	; 134
    1bc0:	59 f0       	breq	.+22     	; 0x1bd8 <vfprintf+0x372>
    1bc2:	a1 fe       	sbrs	r10, 1
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <vfprintf+0x364>
    1bc6:	8b e2       	ldi	r24, 0x2B	; 43
    1bc8:	01 c0       	rjmp	.+2      	; 0x1bcc <vfprintf+0x366>
    1bca:	80 e2       	ldi	r24, 0x20	; 32
    1bcc:	a7 fc       	sbrc	r10, 7
    1bce:	8d e2       	ldi	r24, 0x2D	; 45
    1bd0:	b6 01       	movw	r22, r12
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	0e 94 83 0b 	call	0x1706	; 0x1706 <fputc>
    1bd8:	89 14       	cp	r8, r9
    1bda:	38 f4       	brcc	.+14     	; 0x1bea <vfprintf+0x384>
    1bdc:	b6 01       	movw	r22, r12
    1bde:	80 e3       	ldi	r24, 0x30	; 48
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	0e 94 83 0b 	call	0x1706	; 0x1706 <fputc>
    1be6:	9a 94       	dec	r9
    1be8:	f7 cf       	rjmp	.-18     	; 0x1bd8 <vfprintf+0x372>
    1bea:	8a 94       	dec	r8
    1bec:	f3 01       	movw	r30, r6
    1bee:	e8 0d       	add	r30, r8
    1bf0:	f1 1d       	adc	r31, r1
    1bf2:	80 81       	ld	r24, Z
    1bf4:	b6 01       	movw	r22, r12
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	0e 94 83 0b 	call	0x1706	; 0x1706 <fputc>
    1bfc:	81 10       	cpse	r8, r1
    1bfe:	f5 cf       	rjmp	.-22     	; 0x1bea <vfprintf+0x384>
    1c00:	22 20       	and	r2, r2
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <vfprintf+0x3a0>
    1c04:	42 ce       	rjmp	.-892    	; 0x188a <vfprintf+0x24>
    1c06:	b6 01       	movw	r22, r12
    1c08:	80 e2       	ldi	r24, 0x20	; 32
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	0e 94 83 0b 	call	0x1706	; 0x1706 <fputc>
    1c10:	2a 94       	dec	r2
    1c12:	f6 cf       	rjmp	.-20     	; 0x1c00 <vfprintf+0x39a>
    1c14:	f6 01       	movw	r30, r12
    1c16:	86 81       	ldd	r24, Z+6	; 0x06
    1c18:	97 81       	ldd	r25, Z+7	; 0x07
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <vfprintf+0x3ba>
    1c1c:	8f ef       	ldi	r24, 0xFF	; 255
    1c1e:	9f ef       	ldi	r25, 0xFF	; 255
    1c20:	2b 96       	adiw	r28, 0x0b	; 11
    1c22:	e2 e1       	ldi	r30, 0x12	; 18
    1c24:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <__epilogue_restores__>

00001c28 <calloc>:
    1c28:	0f 93       	push	r16
    1c2a:	1f 93       	push	r17
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	86 9f       	mul	r24, r22
    1c32:	80 01       	movw	r16, r0
    1c34:	87 9f       	mul	r24, r23
    1c36:	10 0d       	add	r17, r0
    1c38:	96 9f       	mul	r25, r22
    1c3a:	10 0d       	add	r17, r0
    1c3c:	11 24       	eor	r1, r1
    1c3e:	c8 01       	movw	r24, r16
    1c40:	0e 94 bb 09 	call	0x1376	; 0x1376 <malloc>
    1c44:	ec 01       	movw	r28, r24
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	29 f0       	breq	.+10     	; 0x1c54 <calloc+0x2c>
    1c4a:	a8 01       	movw	r20, r16
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <memset>
    1c54:	ce 01       	movw	r24, r28
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	08 95       	ret

00001c60 <strnlen_P>:
    1c60:	fc 01       	movw	r30, r24
    1c62:	05 90       	lpm	r0, Z+
    1c64:	61 50       	subi	r22, 0x01	; 1
    1c66:	70 40       	sbci	r23, 0x00	; 0
    1c68:	01 10       	cpse	r0, r1
    1c6a:	d8 f7       	brcc	.-10     	; 0x1c62 <strnlen_P+0x2>
    1c6c:	80 95       	com	r24
    1c6e:	90 95       	com	r25
    1c70:	8e 0f       	add	r24, r30
    1c72:	9f 1f       	adc	r25, r31
    1c74:	08 95       	ret

00001c76 <memset>:
    1c76:	dc 01       	movw	r26, r24
    1c78:	01 c0       	rjmp	.+2      	; 0x1c7c <memset+0x6>
    1c7a:	6d 93       	st	X+, r22
    1c7c:	41 50       	subi	r20, 0x01	; 1
    1c7e:	50 40       	sbci	r21, 0x00	; 0
    1c80:	e0 f7       	brcc	.-8      	; 0x1c7a <memset+0x4>
    1c82:	08 95       	ret

00001c84 <strnlen>:
    1c84:	fc 01       	movw	r30, r24
    1c86:	61 50       	subi	r22, 0x01	; 1
    1c88:	70 40       	sbci	r23, 0x00	; 0
    1c8a:	01 90       	ld	r0, Z+
    1c8c:	01 10       	cpse	r0, r1
    1c8e:	d8 f7       	brcc	.-10     	; 0x1c86 <strnlen+0x2>
    1c90:	80 95       	com	r24
    1c92:	90 95       	com	r25
    1c94:	8e 0f       	add	r24, r30
    1c96:	9f 1f       	adc	r25, r31
    1c98:	08 95       	ret

00001c9a <__ultoa_invert>:
    1c9a:	fa 01       	movw	r30, r20
    1c9c:	aa 27       	eor	r26, r26
    1c9e:	28 30       	cpi	r18, 0x08	; 8
    1ca0:	51 f1       	breq	.+84     	; 0x1cf6 <__ultoa_invert+0x5c>
    1ca2:	20 31       	cpi	r18, 0x10	; 16
    1ca4:	81 f1       	breq	.+96     	; 0x1d06 <__ultoa_invert+0x6c>
    1ca6:	e8 94       	clt
    1ca8:	6f 93       	push	r22
    1caa:	6e 7f       	andi	r22, 0xFE	; 254
    1cac:	6e 5f       	subi	r22, 0xFE	; 254
    1cae:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb4:	af 4f       	sbci	r26, 0xFF	; 255
    1cb6:	b1 e0       	ldi	r27, 0x01	; 1
    1cb8:	3e d0       	rcall	.+124    	; 0x1d36 <__ultoa_invert+0x9c>
    1cba:	b4 e0       	ldi	r27, 0x04	; 4
    1cbc:	3c d0       	rcall	.+120    	; 0x1d36 <__ultoa_invert+0x9c>
    1cbe:	67 0f       	add	r22, r23
    1cc0:	78 1f       	adc	r23, r24
    1cc2:	89 1f       	adc	r24, r25
    1cc4:	9a 1f       	adc	r25, r26
    1cc6:	a1 1d       	adc	r26, r1
    1cc8:	68 0f       	add	r22, r24
    1cca:	79 1f       	adc	r23, r25
    1ccc:	8a 1f       	adc	r24, r26
    1cce:	91 1d       	adc	r25, r1
    1cd0:	a1 1d       	adc	r26, r1
    1cd2:	6a 0f       	add	r22, r26
    1cd4:	71 1d       	adc	r23, r1
    1cd6:	81 1d       	adc	r24, r1
    1cd8:	91 1d       	adc	r25, r1
    1cda:	a1 1d       	adc	r26, r1
    1cdc:	20 d0       	rcall	.+64     	; 0x1d1e <__ultoa_invert+0x84>
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <__ultoa_invert+0x48>
    1ce0:	68 94       	set
    1ce2:	3f 91       	pop	r19
    1ce4:	2a e0       	ldi	r18, 0x0A	; 10
    1ce6:	26 9f       	mul	r18, r22
    1ce8:	11 24       	eor	r1, r1
    1cea:	30 19       	sub	r19, r0
    1cec:	30 5d       	subi	r19, 0xD0	; 208
    1cee:	31 93       	st	Z+, r19
    1cf0:	de f6       	brtc	.-74     	; 0x1ca8 <__ultoa_invert+0xe>
    1cf2:	cf 01       	movw	r24, r30
    1cf4:	08 95       	ret
    1cf6:	46 2f       	mov	r20, r22
    1cf8:	47 70       	andi	r20, 0x07	; 7
    1cfa:	40 5d       	subi	r20, 0xD0	; 208
    1cfc:	41 93       	st	Z+, r20
    1cfe:	b3 e0       	ldi	r27, 0x03	; 3
    1d00:	0f d0       	rcall	.+30     	; 0x1d20 <__ultoa_invert+0x86>
    1d02:	c9 f7       	brne	.-14     	; 0x1cf6 <__ultoa_invert+0x5c>
    1d04:	f6 cf       	rjmp	.-20     	; 0x1cf2 <__ultoa_invert+0x58>
    1d06:	46 2f       	mov	r20, r22
    1d08:	4f 70       	andi	r20, 0x0F	; 15
    1d0a:	40 5d       	subi	r20, 0xD0	; 208
    1d0c:	4a 33       	cpi	r20, 0x3A	; 58
    1d0e:	18 f0       	brcs	.+6      	; 0x1d16 <__ultoa_invert+0x7c>
    1d10:	49 5d       	subi	r20, 0xD9	; 217
    1d12:	31 fd       	sbrc	r19, 1
    1d14:	40 52       	subi	r20, 0x20	; 32
    1d16:	41 93       	st	Z+, r20
    1d18:	02 d0       	rcall	.+4      	; 0x1d1e <__ultoa_invert+0x84>
    1d1a:	a9 f7       	brne	.-22     	; 0x1d06 <__ultoa_invert+0x6c>
    1d1c:	ea cf       	rjmp	.-44     	; 0x1cf2 <__ultoa_invert+0x58>
    1d1e:	b4 e0       	ldi	r27, 0x04	; 4
    1d20:	a6 95       	lsr	r26
    1d22:	97 95       	ror	r25
    1d24:	87 95       	ror	r24
    1d26:	77 95       	ror	r23
    1d28:	67 95       	ror	r22
    1d2a:	ba 95       	dec	r27
    1d2c:	c9 f7       	brne	.-14     	; 0x1d20 <__ultoa_invert+0x86>
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	61 05       	cpc	r22, r1
    1d32:	71 05       	cpc	r23, r1
    1d34:	08 95       	ret
    1d36:	9b 01       	movw	r18, r22
    1d38:	ac 01       	movw	r20, r24
    1d3a:	0a 2e       	mov	r0, r26
    1d3c:	06 94       	lsr	r0
    1d3e:	57 95       	ror	r21
    1d40:	47 95       	ror	r20
    1d42:	37 95       	ror	r19
    1d44:	27 95       	ror	r18
    1d46:	ba 95       	dec	r27
    1d48:	c9 f7       	brne	.-14     	; 0x1d3c <__ultoa_invert+0xa2>
    1d4a:	62 0f       	add	r22, r18
    1d4c:	73 1f       	adc	r23, r19
    1d4e:	84 1f       	adc	r24, r20
    1d50:	95 1f       	adc	r25, r21
    1d52:	a0 1d       	adc	r26, r0
    1d54:	08 95       	ret

00001d56 <__divmodsi4>:
    1d56:	05 2e       	mov	r0, r21
    1d58:	97 fb       	bst	r25, 7
    1d5a:	1e f4       	brtc	.+6      	; 0x1d62 <__divmodsi4+0xc>
    1d5c:	00 94       	com	r0
    1d5e:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__negsi2>
    1d62:	57 fd       	sbrc	r21, 7
    1d64:	07 d0       	rcall	.+14     	; 0x1d74 <__divmodsi4_neg2>
    1d66:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodsi4>
    1d6a:	07 fc       	sbrc	r0, 7
    1d6c:	03 d0       	rcall	.+6      	; 0x1d74 <__divmodsi4_neg2>
    1d6e:	4e f4       	brtc	.+18     	; 0x1d82 <__divmodsi4_exit>
    1d70:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__negsi2>

00001d74 <__divmodsi4_neg2>:
    1d74:	50 95       	com	r21
    1d76:	40 95       	com	r20
    1d78:	30 95       	com	r19
    1d7a:	21 95       	neg	r18
    1d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7e:	4f 4f       	sbci	r20, 0xFF	; 255
    1d80:	5f 4f       	sbci	r21, 0xFF	; 255

00001d82 <__divmodsi4_exit>:
    1d82:	08 95       	ret

00001d84 <__negsi2>:
    1d84:	90 95       	com	r25
    1d86:	80 95       	com	r24
    1d88:	70 95       	com	r23
    1d8a:	61 95       	neg	r22
    1d8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d90:	9f 4f       	sbci	r25, 0xFF	; 255
    1d92:	08 95       	ret

00001d94 <__muluhisi3>:
    1d94:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__umulhisi3>
    1d98:	a5 9f       	mul	r26, r21
    1d9a:	90 0d       	add	r25, r0
    1d9c:	b4 9f       	mul	r27, r20
    1d9e:	90 0d       	add	r25, r0
    1da0:	a4 9f       	mul	r26, r20
    1da2:	80 0d       	add	r24, r0
    1da4:	91 1d       	adc	r25, r1
    1da6:	11 24       	eor	r1, r1
    1da8:	08 95       	ret

00001daa <__mulshisi3>:
    1daa:	b7 ff       	sbrs	r27, 7
    1dac:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__muluhisi3>

00001db0 <__mulohisi3>:
    1db0:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__muluhisi3>
    1db4:	82 1b       	sub	r24, r18
    1db6:	93 0b       	sbc	r25, r19
    1db8:	08 95       	ret

00001dba <__prologue_saves__>:
    1dba:	2f 92       	push	r2
    1dbc:	3f 92       	push	r3
    1dbe:	4f 92       	push	r4
    1dc0:	5f 92       	push	r5
    1dc2:	6f 92       	push	r6
    1dc4:	7f 92       	push	r7
    1dc6:	8f 92       	push	r8
    1dc8:	9f 92       	push	r9
    1dca:	af 92       	push	r10
    1dcc:	bf 92       	push	r11
    1dce:	cf 92       	push	r12
    1dd0:	df 92       	push	r13
    1dd2:	ef 92       	push	r14
    1dd4:	ff 92       	push	r15
    1dd6:	0f 93       	push	r16
    1dd8:	1f 93       	push	r17
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	ca 1b       	sub	r28, r26
    1de4:	db 0b       	sbc	r29, r27
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	09 94       	ijmp

00001df2 <__epilogue_restores__>:
    1df2:	2a 88       	ldd	r2, Y+18	; 0x12
    1df4:	39 88       	ldd	r3, Y+17	; 0x11
    1df6:	48 88       	ldd	r4, Y+16	; 0x10
    1df8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1dfa:	6e 84       	ldd	r6, Y+14	; 0x0e
    1dfc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1dfe:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e00:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e02:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e04:	b9 84       	ldd	r11, Y+9	; 0x09
    1e06:	c8 84       	ldd	r12, Y+8	; 0x08
    1e08:	df 80       	ldd	r13, Y+7	; 0x07
    1e0a:	ee 80       	ldd	r14, Y+6	; 0x06
    1e0c:	fd 80       	ldd	r15, Y+5	; 0x05
    1e0e:	0c 81       	ldd	r16, Y+4	; 0x04
    1e10:	1b 81       	ldd	r17, Y+3	; 0x03
    1e12:	aa 81       	ldd	r26, Y+2	; 0x02
    1e14:	b9 81       	ldd	r27, Y+1	; 0x01
    1e16:	ce 0f       	add	r28, r30
    1e18:	d1 1d       	adc	r29, r1
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	cd bf       	out	0x3d, r28	; 61
    1e24:	ed 01       	movw	r28, r26
    1e26:	08 95       	ret

00001e28 <__udivmodsi4>:
    1e28:	a1 e2       	ldi	r26, 0x21	; 33
    1e2a:	1a 2e       	mov	r1, r26
    1e2c:	aa 1b       	sub	r26, r26
    1e2e:	bb 1b       	sub	r27, r27
    1e30:	fd 01       	movw	r30, r26
    1e32:	0d c0       	rjmp	.+26     	; 0x1e4e <__udivmodsi4_ep>

00001e34 <__udivmodsi4_loop>:
    1e34:	aa 1f       	adc	r26, r26
    1e36:	bb 1f       	adc	r27, r27
    1e38:	ee 1f       	adc	r30, r30
    1e3a:	ff 1f       	adc	r31, r31
    1e3c:	a2 17       	cp	r26, r18
    1e3e:	b3 07       	cpc	r27, r19
    1e40:	e4 07       	cpc	r30, r20
    1e42:	f5 07       	cpc	r31, r21
    1e44:	20 f0       	brcs	.+8      	; 0x1e4e <__udivmodsi4_ep>
    1e46:	a2 1b       	sub	r26, r18
    1e48:	b3 0b       	sbc	r27, r19
    1e4a:	e4 0b       	sbc	r30, r20
    1e4c:	f5 0b       	sbc	r31, r21

00001e4e <__udivmodsi4_ep>:
    1e4e:	66 1f       	adc	r22, r22
    1e50:	77 1f       	adc	r23, r23
    1e52:	88 1f       	adc	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	1a 94       	dec	r1
    1e58:	69 f7       	brne	.-38     	; 0x1e34 <__udivmodsi4_loop>
    1e5a:	60 95       	com	r22
    1e5c:	70 95       	com	r23
    1e5e:	80 95       	com	r24
    1e60:	90 95       	com	r25
    1e62:	9b 01       	movw	r18, r22
    1e64:	ac 01       	movw	r20, r24
    1e66:	bd 01       	movw	r22, r26
    1e68:	cf 01       	movw	r24, r30
    1e6a:	08 95       	ret

00001e6c <__umulhisi3>:
    1e6c:	a2 9f       	mul	r26, r18
    1e6e:	b0 01       	movw	r22, r0
    1e70:	b3 9f       	mul	r27, r19
    1e72:	c0 01       	movw	r24, r0
    1e74:	a3 9f       	mul	r26, r19
    1e76:	70 0d       	add	r23, r0
    1e78:	81 1d       	adc	r24, r1
    1e7a:	11 24       	eor	r1, r1
    1e7c:	91 1d       	adc	r25, r1
    1e7e:	b2 9f       	mul	r27, r18
    1e80:	70 0d       	add	r23, r0
    1e82:	81 1d       	adc	r24, r1
    1e84:	11 24       	eor	r1, r1
    1e86:	91 1d       	adc	r25, r1
    1e88:	08 95       	ret

00001e8a <_exit>:
    1e8a:	f8 94       	cli

00001e8c <__stop_program>:
    1e8c:	ff cf       	rjmp	.-2      	; 0x1e8c <__stop_program>
