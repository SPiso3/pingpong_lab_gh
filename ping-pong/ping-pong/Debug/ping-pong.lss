
ping-pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024a  00800100  000020fa  0000218e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  0080034a  0080034a  000023d8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000023d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00002470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000380b  00000000  00000000  00002788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001759  00000000  00000000  00005f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d0f  00000000  00000000  000076ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000854  00000000  00000000  000093fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b30  00000000  00000000  00009c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e69  00000000  00000000  0000a780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  0000c5e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__vector_19>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__vector_23>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <OLED_goto_pos+0x10>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ea ef       	ldi	r30, 0xFA	; 250
     37c:	f0 e2       	ldi	r31, 0x20	; 32
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 34       	cpi	r26, 0x4A	; 74
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	aa e4       	ldi	r26, 0x4A	; 74
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a3 36       	cpi	r26, 0x63	; 99
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 11 07 	call	0xe22	; 0xe22 <main>
     39e:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_init>:
     3a6:	87 b3       	in	r24, 0x17	; 23
     3a8:	81 60       	ori	r24, 0x01	; 1
     3aa:	87 bb       	out	0x17, r24	; 23
     3ac:	81 b3       	in	r24, 0x11	; 17
     3ae:	8f 7e       	andi	r24, 0xEF	; 239
     3b0:	81 bb       	out	0x11, r24	; 17
     3b2:	82 b3       	in	r24, 0x12	; 18
     3b4:	80 61       	ori	r24, 0x10	; 16
     3b6:	82 bb       	out	0x12, r24	; 18
     3b8:	08 95       	ret

000003ba <ADC_sample4>:
     3ba:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x109d>
     3be:	08 95       	ret

000003c0 <ADC_is_busy>:
     3c0:	80 b3       	in	r24, 0x10	; 16
     3c2:	82 95       	swap	r24
     3c4:	81 70       	andi	r24, 0x01	; 1
     3c6:	08 95       	ret

000003c8 <ADC_read>:
     3c8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <ADC_is_busy>
     3cc:	88 23       	and	r24, r24
     3ce:	e1 f3       	breq	.-8      	; 0x3c8 <ADC_read>
     3d0:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x109d>
     3d4:	08 95       	ret

000003d6 <CAN_init>:
#include "../include/CAN.h"


void CAN_init(){
	MCP_init(MODE_NORMAL);
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <MCP_init>
	
	cli();
     3dc:	f8 94       	cli
	GICR |= (1 << INT0);					// Enable INT0
     3de:	8b b7       	in	r24, 0x3b	; 59
     3e0:	80 64       	ori	r24, 0x40	; 64
     3e2:	8b bf       	out	0x3b, r24	; 59
	MCUCR &= ~((1 << ISC01)|(0 << ISC00));	// mode:00 = trigger when LOW
     3e4:	85 b7       	in	r24, 0x35	; 53
     3e6:	8d 7f       	andi	r24, 0xFD	; 253
     3e8:	85 bf       	out	0x35, r24	; 53
	DDRD &= ~(1 << PD2);
     3ea:	81 b3       	in	r24, 0x11	; 17
     3ec:	8b 7f       	andi	r24, 0xFB	; 251
     3ee:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << PD2);
     3f0:	82 b3       	in	r24, 0x12	; 18
     3f2:	84 60       	ori	r24, 0x04	; 4
     3f4:	82 bb       	out	0x12, r24	; 18
	sei();
     3f6:	78 94       	sei
     3f8:	08 95       	ret

000003fa <CAN_send>:
}

void CAN_send(message_ptr msg){
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	8c 01       	movw	r16, r24
	//set ID 
	MCP_write(MCP_TXB0SIDH, msg->id >> 3);
     402:	fc 01       	movw	r30, r24
     404:	60 81       	ld	r22, Z
     406:	71 81       	ldd	r23, Z+1	; 0x01
     408:	76 95       	lsr	r23
     40a:	67 95       	ror	r22
     40c:	76 95       	lsr	r23
     40e:	67 95       	ror	r22
     410:	76 95       	lsr	r23
     412:	67 95       	ror	r22
     414:	81 e3       	ldi	r24, 0x31	; 49
     416:	0e 94 87 03 	call	0x70e	; 0x70e <MCP_write>
	MCP_write(MCP_TXB0SIDL, (msg->id % 8) << 5);
     41a:	f8 01       	movw	r30, r16
     41c:	60 81       	ld	r22, Z
     41e:	62 95       	swap	r22
     420:	66 0f       	add	r22, r22
     422:	60 7e       	andi	r22, 0xE0	; 224
     424:	82 e3       	ldi	r24, 0x32	; 50
     426:	0e 94 87 03 	call	0x70e	; 0x70e <MCP_write>
	
	//set length
	MCP_write(MCP_TXB0DLC, msg->length);
     42a:	f8 01       	movw	r30, r16
     42c:	62 81       	ldd	r22, Z+2	; 0x02
     42e:	85 e3       	ldi	r24, 0x35	; 53
     430:	0e 94 87 03 	call	0x70e	; 0x70e <MCP_write>
	
	//store data
	for(uint8_t i = 0; i < msg->length; i++){
     434:	c0 e0       	ldi	r28, 0x00	; 0
     436:	09 c0       	rjmp	.+18     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
		MCP_write(MCP_TXB0D0 + i,msg->unsigned_data[i]);
     438:	f8 01       	movw	r30, r16
     43a:	ec 0f       	add	r30, r28
     43c:	f1 1d       	adc	r31, r1
     43e:	63 81       	ldd	r22, Z+3	; 0x03
     440:	86 e3       	ldi	r24, 0x36	; 54
     442:	8c 0f       	add	r24, r28
     444:	0e 94 87 03 	call	0x70e	; 0x70e <MCP_write>
	
	//set length
	MCP_write(MCP_TXB0DLC, msg->length);
	
	//store data
	for(uint8_t i = 0; i < msg->length; i++){
     448:	cf 5f       	subi	r28, 0xFF	; 255
     44a:	f8 01       	movw	r30, r16
     44c:	82 81       	ldd	r24, Z+2	; 0x02
     44e:	c8 17       	cp	r28, r24
     450:	98 f3       	brcs	.-26     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
		MCP_write(MCP_TXB0D0 + i,msg->unsigned_data[i]);
	}
	
	//request to send
	MCP_request_to_send(0);
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	0e 94 9b 03 	call	0x736	; 0x736 <MCP_request_to_send>
}
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
     45c:	0f 91       	pop	r16
     45e:	08 95       	ret

00000460 <CAN_receive>:

message_t CAN_receive(){
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	8c 01       	movw	r16, r24
	message_t msg = {};
     46c:	8b e0       	ldi	r24, 0x0B	; 11
     46e:	f8 01       	movw	r30, r16
     470:	11 92       	st	Z+, r1
     472:	8a 95       	dec	r24
     474:	e9 f7       	brne	.-6      	; 0x470 <CAN_receive+0x10>
		
	//get ID
	uint8_t id_low = (MCP_read(MCP_RXB0SIDL)>>5);
     476:	82 e6       	ldi	r24, 0x62	; 98
     478:	0e 94 75 03 	call	0x6ea	; 0x6ea <MCP_read>
     47c:	c8 2f       	mov	r28, r24
     47e:	c2 95       	swap	r28
     480:	c6 95       	lsr	r28
     482:	c7 70       	andi	r28, 0x07	; 7
	uint8_t id_high = MCP_read(MCP_RXB0SIDH);
     484:	81 e6       	ldi	r24, 0x61	; 97
     486:	0e 94 75 03 	call	0x6ea	; 0x6ea <MCP_read>
	msg.id = (id_high << 3) | id_low;
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	88 0f       	add	r24, r24
     48e:	99 1f       	adc	r25, r25
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	88 0f       	add	r24, r24
     496:	99 1f       	adc	r25, r25
     498:	8c 2b       	or	r24, r28
     49a:	f8 01       	movw	r30, r16
     49c:	91 83       	std	Z+1, r25	; 0x01
     49e:	80 83       	st	Z, r24
	
	//get data length 
	msg.length = MCP_read(MCP_RXB0DLC);
     4a0:	85 e6       	ldi	r24, 0x65	; 101
     4a2:	0e 94 75 03 	call	0x6ea	; 0x6ea <MCP_read>
     4a6:	f8 2e       	mov	r15, r24
     4a8:	f8 01       	movw	r30, r16
     4aa:	82 83       	std	Z+2, r24	; 0x02
	
	//get data
	for (int i = 0; i < msg.length; i++) {
     4ac:	c0 e0       	ldi	r28, 0x00	; 0
     4ae:	d0 e0       	ldi	r29, 0x00	; 0
     4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <CAN_receive+0x64>
		msg.unsigned_data[i] = MCP_read(MCP_RXB0D0 + i);
     4b2:	8c 2f       	mov	r24, r28
     4b4:	8a 59       	subi	r24, 0x9A	; 154
     4b6:	0e 94 75 03 	call	0x6ea	; 0x6ea <MCP_read>
     4ba:	f8 01       	movw	r30, r16
     4bc:	ec 0f       	add	r30, r28
     4be:	fd 1f       	adc	r31, r29
     4c0:	83 83       	std	Z+3, r24	; 0x03
	
	//get data length 
	msg.length = MCP_read(MCP_RXB0DLC);
	
	//get data
	for (int i = 0; i < msg.length; i++) {
     4c2:	21 96       	adiw	r28, 0x01	; 1
     4c4:	8f 2d       	mov	r24, r15
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	c8 17       	cp	r28, r24
     4ca:	d9 07       	cpc	r29, r25
     4cc:	94 f3       	brlt	.-28     	; 0x4b2 <CAN_receive+0x52>
		msg.unsigned_data[i] = MCP_read(MCP_RXB0D0 + i);
	}
	
	return msg;
}
     4ce:	c8 01       	movw	r24, r16
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	ff 90       	pop	r15
     4da:	08 95       	ret

000004dc <JOY_calibrate>:
	DDRD &= ~(1<<JOY_BUTTON); //busy input active low
	PORTD |= (1<<JOY_BUTTON); //pull-up resistor
	JOY_calibrate();
	}

void JOY_calibrate(){
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
	//should have already initialized XMEM, UART, ADC
	printf("\n\rcalibrating gamepad... ");
     4e6:	8b e0       	ldi	r24, 0x0B	; 11
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	9f 93       	push	r25
     4ec:	8f 93       	push	r24
     4ee:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <printf>
	uint16_t x = 0;
	uint16_t y = 0;
	
	for(uint8_t i=0; i<CALIB_SAMPLES; i++){
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	c0 e0       	ldi	r28, 0x00	; 0

void JOY_calibrate(){
	//should have already initialized XMEM, UART, ADC
	printf("\n\rcalibrating gamepad... ");
	uint16_t x = 0;
	uint16_t y = 0;
     4f8:	00 e0       	ldi	r16, 0x00	; 0
     4fa:	10 e0       	ldi	r17, 0x00	; 0
	}

void JOY_calibrate(){
	//should have already initialized XMEM, UART, ADC
	printf("\n\rcalibrating gamepad... ");
	uint16_t x = 0;
     4fc:	e1 2c       	mov	r14, r1
     4fe:	f1 2c       	mov	r15, r1
	uint16_t y = 0;
	
	for(uint8_t i=0; i<CALIB_SAMPLES; i++){
     500:	0b c0       	rjmp	.+22     	; 0x518 <__stack+0x19>
		ADC_sample4();
     502:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ADC_sample4>
		y += ADC_read(); //in order: vert-horiz- ...
     506:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     50a:	08 0f       	add	r16, r24
     50c:	11 1d       	adc	r17, r1
		x += ADC_read();
     50e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     512:	e8 0e       	add	r14, r24
     514:	f1 1c       	adc	r15, r1
	//should have already initialized XMEM, UART, ADC
	printf("\n\rcalibrating gamepad... ");
	uint16_t x = 0;
	uint16_t y = 0;
	
	for(uint8_t i=0; i<CALIB_SAMPLES; i++){
     516:	cf 5f       	subi	r28, 0xFF	; 255
     518:	c8 30       	cpi	r28, 0x08	; 8
     51a:	98 f3       	brcs	.-26     	; 0x502 <__stack+0x3>
		ADC_sample4();
		y += ADC_read(); //in order: vert-horiz- ...
		x += ADC_read();
	}
	y /= CALIB_SAMPLES;
     51c:	16 95       	lsr	r17
     51e:	07 95       	ror	r16
     520:	16 95       	lsr	r17
     522:	07 95       	ror	r16
     524:	16 95       	lsr	r17
     526:	07 95       	ror	r16
	x /= CALIB_SAMPLES;
     528:	f6 94       	lsr	r15
     52a:	e7 94       	ror	r14
     52c:	f6 94       	lsr	r15
     52e:	e7 94       	ror	r14
     530:	f6 94       	lsr	r15
     532:	e7 94       	ror	r14
	
	printf("done. CENTER = [%d,%d]\n\r",x,y);
     534:	1f 93       	push	r17
     536:	0f 93       	push	r16
     538:	ff 92       	push	r15
     53a:	ef 92       	push	r14
     53c:	85 e2       	ldi	r24, 0x25	; 37
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	9f 93       	push	r25
     542:	8f 93       	push	r24
     544:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <printf>
	gamepad_center.x = x;
     548:	ec e4       	ldi	r30, 0x4C	; 76
     54a:	f3 e0       	ldi	r31, 0x03	; 3
     54c:	f1 82       	std	Z+1, r15	; 0x01
     54e:	e0 82       	st	Z, r14
	gamepad_center.y = y;
     550:	13 83       	std	Z+3, r17	; 0x03
     552:	02 83       	std	Z+2, r16	; 0x02
}
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	08 95       	ret

0000056c <JOY_init>:
#include "../include/gamepad.h"
extern pos_t gamepad_center;

void JOY_init(){
	DDRD &= ~(1<<JOY_BUTTON); //busy input active low
     56c:	81 b3       	in	r24, 0x11	; 17
     56e:	8f 7d       	andi	r24, 0xDF	; 223
     570:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<JOY_BUTTON); //pull-up resistor
     572:	82 b3       	in	r24, 0x12	; 18
     574:	80 62       	ori	r24, 0x20	; 32
     576:	82 bb       	out	0x12, r24	; 18
	JOY_calibrate();
     578:	0e 94 6e 02 	call	0x4dc	; 0x4dc <JOY_calibrate>
     57c:	08 95       	ret

0000057e <JOY_get_rel_pos>:
	printf("done. CENTER = [%d,%d]\n\r",x,y);
	gamepad_center.x = x;
	gamepad_center.y = y;
}

pos_t JOY_get_rel_pos(){
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
	ADC_sample4();
     586:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ADC_sample4>
	int16_t y = ADC_read() - gamepad_center.y;
     58a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     58e:	08 2f       	mov	r16, r24
     590:	10 e0       	ldi	r17, 0x00	; 0
     592:	cc e4       	ldi	r28, 0x4C	; 76
     594:	d3 e0       	ldi	r29, 0x03	; 3
     596:	8a 81       	ldd	r24, Y+2	; 0x02
     598:	9b 81       	ldd	r25, Y+3	; 0x03
     59a:	08 1b       	sub	r16, r24
     59c:	19 0b       	sbc	r17, r25
	int16_t x = ADC_read() - gamepad_center.x;
     59e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     5a2:	28 2f       	mov	r18, r24
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	09 90       	ld	r0, Y+
     5a8:	d8 81       	ld	r29, Y
     5aa:	c0 2d       	mov	r28, r0
     5ac:	2c 1b       	sub	r18, r28
     5ae:	3d 0b       	sbc	r19, r29

	y = y * POS_SCALE / ((y > 0) ? (255-gamepad_center.y) : (0+gamepad_center.y));
     5b0:	c8 01       	movw	r24, r16
     5b2:	96 95       	lsr	r25
     5b4:	98 2f       	mov	r25, r24
     5b6:	88 27       	eor	r24, r24
     5b8:	97 95       	ror	r25
     5ba:	87 95       	ror	r24
     5bc:	80 1b       	sub	r24, r16
     5be:	91 0b       	sbc	r25, r17
     5c0:	10 16       	cp	r1, r16
     5c2:	11 06       	cpc	r1, r17
     5c4:	4c f4       	brge	.+18     	; 0x5d8 <JOY_get_rel_pos+0x5a>
     5c6:	40 91 4e 03 	lds	r20, 0x034E	; 0x80034e <gamepad_center+0x2>
     5ca:	50 91 4f 03 	lds	r21, 0x034F	; 0x80034f <gamepad_center+0x3>
     5ce:	6f ef       	ldi	r22, 0xFF	; 255
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	64 1b       	sub	r22, r20
     5d4:	75 0b       	sbc	r23, r21
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <JOY_get_rel_pos+0x62>
     5d8:	60 91 4e 03 	lds	r22, 0x034E	; 0x80034e <gamepad_center+0x2>
     5dc:	70 91 4f 03 	lds	r23, 0x034F	; 0x80034f <gamepad_center+0x3>
     5e0:	0e 94 b7 0a 	call	0x156e	; 0x156e <__divmodhi4>
     5e4:	16 2f       	mov	r17, r22
     5e6:	47 2f       	mov	r20, r23
     5e8:	e6 2f       	mov	r30, r22
     5ea:	f7 2f       	mov	r31, r23
	x = x * POS_SCALE / ((x > 0) ? (255-gamepad_center.x) : (0+gamepad_center.x));
     5ec:	c9 01       	movw	r24, r18
     5ee:	96 95       	lsr	r25
     5f0:	98 2f       	mov	r25, r24
     5f2:	88 27       	eor	r24, r24
     5f4:	97 95       	ror	r25
     5f6:	87 95       	ror	r24
     5f8:	82 1b       	sub	r24, r18
     5fa:	93 0b       	sbc	r25, r19
     5fc:	12 16       	cp	r1, r18
     5fe:	13 06       	cpc	r1, r19
     600:	34 f4       	brge	.+12     	; 0x60e <JOY_get_rel_pos+0x90>
     602:	2f ef       	ldi	r18, 0xFF	; 255
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	b9 01       	movw	r22, r18
     608:	6c 1b       	sub	r22, r28
     60a:	7d 0b       	sbc	r23, r29
     60c:	eb 01       	movw	r28, r22
     60e:	be 01       	movw	r22, r28
     610:	0e 94 b7 0a 	call	0x156e	; 0x156e <__divmodhi4>
     614:	86 2f       	mov	r24, r22
     616:	97 2f       	mov	r25, r23
	
	
	y = MAX(-POS_SCALE,MIN(y,POS_SCALE));
     618:	e2 38       	cpi	r30, 0x82	; 130
     61a:	ff 4f       	sbci	r31, 0xFF	; 255
     61c:	44 f0       	brlt	.+16     	; 0x62e <JOY_get_rel_pos+0xb0>
     61e:	21 2f       	mov	r18, r17
     620:	34 2f       	mov	r19, r20
     622:	20 38       	cpi	r18, 0x80	; 128
     624:	31 05       	cpc	r19, r1
     626:	2c f0       	brlt	.+10     	; 0x632 <JOY_get_rel_pos+0xb4>
     628:	2f e7       	ldi	r18, 0x7F	; 127
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	02 c0       	rjmp	.+4      	; 0x632 <JOY_get_rel_pos+0xb4>
     62e:	21 e8       	ldi	r18, 0x81	; 129
     630:	3f ef       	ldi	r19, 0xFF	; 255
	x = MAX(-POS_SCALE,MIN(x,POS_SCALE));
     632:	82 38       	cpi	r24, 0x82	; 130
     634:	9f 4f       	sbci	r25, 0xFF	; 255
     636:	44 f0       	brlt	.+16     	; 0x648 <JOY_get_rel_pos+0xca>
     638:	46 2f       	mov	r20, r22
     63a:	57 2f       	mov	r21, r23
     63c:	40 38       	cpi	r20, 0x80	; 128
     63e:	51 05       	cpc	r21, r1
     640:	2c f0       	brlt	.+10     	; 0x64c <JOY_get_rel_pos+0xce>
     642:	4f e7       	ldi	r20, 0x7F	; 127
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	02 c0       	rjmp	.+4      	; 0x64c <JOY_get_rel_pos+0xce>
     648:	41 e8       	ldi	r20, 0x81	; 129
     64a:	5f ef       	ldi	r21, 0xFF	; 255
	
	return (pos_t){x, y};
     64c:	ba 01       	movw	r22, r20
     64e:	c9 01       	movw	r24, r18
}
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	08 95       	ret

0000065a <JOY_get_dir>:

dir JOY_get_dir(){
	pos_t rel_pos = JOY_get_rel_pos();
     65a:	0e 94 bf 02 	call	0x57e	; 0x57e <JOY_get_rel_pos>
	
	if ((abs(rel_pos.x) <= IDLE_VAL) && (abs(rel_pos.y) <= IDLE_VAL)){
     65e:	ab 01       	movw	r20, r22
     660:	9b 01       	movw	r18, r22
     662:	21 5c       	subi	r18, 0xC1	; 193
     664:	3f 4f       	sbci	r19, 0xFF	; 255
     666:	2f 37       	cpi	r18, 0x7F	; 127
     668:	31 05       	cpc	r19, r1
     66a:	30 f4       	brcc	.+12     	; 0x678 <JOY_get_dir+0x1e>
     66c:	9c 01       	movw	r18, r24
     66e:	21 5c       	subi	r18, 0xC1	; 193
     670:	3f 4f       	sbci	r19, 0xFF	; 255
     672:	2f 37       	cpi	r18, 0x7F	; 127
     674:	31 05       	cpc	r19, r1
     676:	e8 f0       	brcs	.+58     	; 0x6b2 <JOY_get_dir+0x58>
		return IDLE;
	}
	else if (abs(rel_pos.y) > abs(rel_pos.x)){
     678:	fc 01       	movw	r30, r24
     67a:	9c 01       	movw	r18, r24
     67c:	99 23       	and	r25, r25
     67e:	24 f4       	brge	.+8      	; 0x688 <JOY_get_dir+0x2e>
     680:	22 27       	eor	r18, r18
     682:	33 27       	eor	r19, r19
     684:	28 1b       	sub	r18, r24
     686:	39 0b       	sbc	r19, r25
     688:	db 01       	movw	r26, r22
     68a:	55 23       	and	r21, r21
     68c:	24 f4       	brge	.+8      	; 0x696 <JOY_get_dir+0x3c>
     68e:	aa 27       	eor	r26, r26
     690:	bb 27       	eor	r27, r27
     692:	a6 1b       	sub	r26, r22
     694:	b7 0b       	sbc	r27, r23
     696:	a2 17       	cp	r26, r18
     698:	b3 07       	cpc	r27, r19
     69a:	34 f4       	brge	.+12     	; 0x6a8 <JOY_get_dir+0x4e>
		return (rel_pos.y > 0) ? UP : DOWN;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	1e 16       	cp	r1, r30
     6a0:	1f 06       	cpc	r1, r31
     6a2:	54 f4       	brge	.+20     	; 0x6b8 <JOY_get_dir+0x5e>
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	08 95       	ret
	}
	return (rel_pos.x > 0) ? RIGHT : LEFT;
     6a8:	14 16       	cp	r1, r20
     6aa:	15 06       	cpc	r1, r21
     6ac:	24 f4       	brge	.+8      	; 0x6b6 <JOY_get_dir+0x5c>
     6ae:	83 e0       	ldi	r24, 0x03	; 3
     6b0:	08 95       	ret

dir JOY_get_dir(){
	pos_t rel_pos = JOY_get_rel_pos();
	
	if ((abs(rel_pos.x) <= IDLE_VAL) && (abs(rel_pos.y) <= IDLE_VAL)){
		return IDLE;
     6b2:	84 e0       	ldi	r24, 0x04	; 4
     6b4:	08 95       	ret
	}
	else if (abs(rel_pos.y) > abs(rel_pos.x)){
		return (rel_pos.y > 0) ? UP : DOWN;
	}
	return (rel_pos.x > 0) ? RIGHT : LEFT;
     6b6:	82 e0       	ldi	r24, 0x02	; 2
}
     6b8:	08 95       	ret

000006ba <JOY_get_sliders>:

sliders_t JOY_get_sliders(){
     6ba:	cf 93       	push	r28
	ADC_sample4();
     6bc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ADC_sample4>
	ADC_read(); ADC_read(); //trash the first two
     6c0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     6c4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
	
	uint8_t left = ADC_read();
     6c8:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     6cc:	c8 2f       	mov	r28, r24
	uint8_t right = ADC_read();
     6ce:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     6d2:	98 2f       	mov	r25, r24
	return (sliders_t){left,right};
     6d4:	8c 2f       	mov	r24, r28
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <MCP_reset>:
     6da:	0e 94 90 06 	call	0xd20	; 0xd20 <SPI_SS_low>
     6de:	80 ec       	ldi	r24, 0xC0	; 192
     6e0:	0e 94 77 06 	call	0xcee	; 0xcee <SPI_send>
     6e4:	0e 94 80 06 	call	0xd00	; 0xd00 <SPI_SS_high>
     6e8:	08 95       	ret

000006ea <MCP_read>:
     6ea:	cf 93       	push	r28
     6ec:	c8 2f       	mov	r28, r24
     6ee:	0e 94 90 06 	call	0xd20	; 0xd20 <SPI_SS_low>
     6f2:	83 e0       	ldi	r24, 0x03	; 3
     6f4:	0e 94 77 06 	call	0xcee	; 0xcee <SPI_send>
     6f8:	8c 2f       	mov	r24, r28
     6fa:	0e 94 77 06 	call	0xcee	; 0xcee <SPI_send>
     6fe:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <SPI_receive>
     702:	c8 2f       	mov	r28, r24
     704:	0e 94 80 06 	call	0xd00	; 0xd00 <SPI_SS_high>
     708:	8c 2f       	mov	r24, r28
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <MCP_write>:
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	d8 2f       	mov	r29, r24
     714:	c6 2f       	mov	r28, r22
     716:	0e 94 90 06 	call	0xd20	; 0xd20 <SPI_SS_low>
     71a:	82 e0       	ldi	r24, 0x02	; 2
     71c:	0e 94 77 06 	call	0xcee	; 0xcee <SPI_send>
     720:	8d 2f       	mov	r24, r29
     722:	0e 94 77 06 	call	0xcee	; 0xcee <SPI_send>
     726:	8c 2f       	mov	r24, r28
     728:	0e 94 77 06 	call	0xcee	; 0xcee <SPI_send>
     72c:	0e 94 80 06 	call	0xd00	; 0xd00 <SPI_SS_high>
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <MCP_request_to_send>:
     736:	cf 93       	push	r28
     738:	c8 2f       	mov	r28, r24
     73a:	0e 94 90 06 	call	0xd20	; 0xd20 <SPI_SS_low>
     73e:	8b ea       	ldi	r24, 0xAB	; 171
     740:	c8 9f       	mul	r28, r24
     742:	81 2d       	mov	r24, r1
     744:	11 24       	eor	r1, r1
     746:	86 95       	lsr	r24
     748:	98 2f       	mov	r25, r24
     74a:	99 0f       	add	r25, r25
     74c:	89 0f       	add	r24, r25
     74e:	c8 1b       	sub	r28, r24
     750:	31 f0       	breq	.+12     	; 0x75e <MCP_request_to_send+0x28>
     752:	c1 30       	cpi	r28, 0x01	; 1
     754:	31 f0       	breq	.+12     	; 0x762 <MCP_request_to_send+0x2c>
     756:	c2 30       	cpi	r28, 0x02	; 2
     758:	31 f0       	breq	.+12     	; 0x766 <MCP_request_to_send+0x30>
     75a:	81 e8       	ldi	r24, 0x81	; 129
     75c:	05 c0       	rjmp	.+10     	; 0x768 <MCP_request_to_send+0x32>
     75e:	81 e8       	ldi	r24, 0x81	; 129
     760:	03 c0       	rjmp	.+6      	; 0x768 <MCP_request_to_send+0x32>
     762:	82 e8       	ldi	r24, 0x82	; 130
     764:	01 c0       	rjmp	.+2      	; 0x768 <MCP_request_to_send+0x32>
     766:	84 e8       	ldi	r24, 0x84	; 132
     768:	0e 94 77 06 	call	0xcee	; 0xcee <SPI_send>
     76c:	0e 94 80 06 	call	0xd00	; 0xd00 <SPI_SS_high>
     770:	cf 91       	pop	r28
     772:	08 95       	ret

00000774 <MCP_bit_modify>:
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	18 2f       	mov	r17, r24
     77c:	d6 2f       	mov	r29, r22
     77e:	c4 2f       	mov	r28, r20
     780:	0e 94 90 06 	call	0xd20	; 0xd20 <SPI_SS_low>
     784:	85 e0       	ldi	r24, 0x05	; 5
     786:	0e 94 77 06 	call	0xcee	; 0xcee <SPI_send>
     78a:	81 2f       	mov	r24, r17
     78c:	0e 94 77 06 	call	0xcee	; 0xcee <SPI_send>
     790:	8d 2f       	mov	r24, r29
     792:	0e 94 77 06 	call	0xcee	; 0xcee <SPI_send>
     796:	8c 2f       	mov	r24, r28
     798:	0e 94 77 06 	call	0xcee	; 0xcee <SPI_send>
     79c:	0e 94 80 06 	call	0xd00	; 0xd00 <SPI_SS_high>
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	08 95       	ret

000007a8 <MCP_init>:
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	d8 2f       	mov	r29, r24
     7ae:	0e 94 84 06 	call	0xd08	; 0xd08 <SPI_master_init>
     7b2:	0e 94 6d 03 	call	0x6da	; 0x6da <MCP_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
     7b8:	9f e2       	ldi	r25, 0x2F	; 47
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	f1 f7       	brne	.-4      	; 0x7ba <MCP_init+0x12>
     7be:	00 c0       	rjmp	.+0      	; 0x7c0 <MCP_init+0x18>
     7c0:	00 00       	nop
     7c2:	8e e0       	ldi	r24, 0x0E	; 14
     7c4:	0e 94 75 03 	call	0x6ea	; 0x6ea <MCP_read>
     7c8:	c8 2f       	mov	r28, r24
     7ca:	80 7e       	andi	r24, 0xE0	; 224
     7cc:	80 38       	cpi	r24, 0x80	; 128
     7ce:	d9 f0       	breq	.+54     	; 0x806 <MCP_init+0x5e>
     7d0:	8e e3       	ldi	r24, 0x3E	; 62
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	9f 93       	push	r25
     7d6:	8f 93       	push	r24
     7d8:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <printf>
     7dc:	1f 92       	push	r1
     7de:	80 e8       	ldi	r24, 0x80	; 128
     7e0:	8f 93       	push	r24
     7e2:	1f 92       	push	r1
     7e4:	cf 93       	push	r28
     7e6:	83 e7       	ldi	r24, 0x73	; 115
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	9f 93       	push	r25
     7ec:	8f 93       	push	r24
     7ee:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <printf>
     7f2:	2d b7       	in	r18, 0x3d	; 61
     7f4:	3e b7       	in	r19, 0x3e	; 62
     7f6:	28 5f       	subi	r18, 0xF8	; 248
     7f8:	3f 4f       	sbci	r19, 0xFF	; 255
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	3e bf       	out	0x3e, r19	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	2d bf       	out	0x3d, r18	; 61
     804:	6c c0       	rjmp	.+216    	; 0x8de <MCP_init+0x136>
     806:	82 e9       	ldi	r24, 0x92	; 146
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	9f 93       	push	r25
     80c:	8f 93       	push	r24
     80e:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <printf>
     812:	63 ec       	ldi	r22, 0xC3	; 195
     814:	8a e2       	ldi	r24, 0x2A	; 42
     816:	0e 94 87 03 	call	0x70e	; 0x70e <MCP_write>
     81a:	61 eb       	ldi	r22, 0xB1	; 177
     81c:	89 e2       	ldi	r24, 0x29	; 41
     81e:	0e 94 87 03 	call	0x70e	; 0x70e <MCP_write>
     822:	65 e0       	ldi	r22, 0x05	; 5
     824:	88 e2       	ldi	r24, 0x28	; 40
     826:	0e 94 87 03 	call	0x70e	; 0x70e <MCP_write>
     82a:	8a e2       	ldi	r24, 0x2A	; 42
     82c:	0e 94 75 03 	call	0x6ea	; 0x6ea <MCP_read>
     830:	1f 92       	push	r1
     832:	8f 93       	push	r24
     834:	89 eb       	ldi	r24, 0xB9	; 185
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	9f 93       	push	r25
     83a:	8f 93       	push	r24
     83c:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <printf>
     840:	89 e2       	ldi	r24, 0x29	; 41
     842:	0e 94 75 03 	call	0x6ea	; 0x6ea <MCP_read>
     846:	1f 92       	push	r1
     848:	8f 93       	push	r24
     84a:	84 ec       	ldi	r24, 0xC4	; 196
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	9f 93       	push	r25
     850:	8f 93       	push	r24
     852:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <printf>
     856:	88 e2       	ldi	r24, 0x28	; 40
     858:	0e 94 75 03 	call	0x6ea	; 0x6ea <MCP_read>
     85c:	1f 92       	push	r1
     85e:	8f 93       	push	r24
     860:	8f ec       	ldi	r24, 0xCF	; 207
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	9f 93       	push	r25
     866:	8f 93       	push	r24
     868:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <printf>
     86c:	41 e0       	ldi	r20, 0x01	; 1
     86e:	6f ef       	ldi	r22, 0xFF	; 255
     870:	8b e2       	ldi	r24, 0x2B	; 43
     872:	0e 94 ba 03 	call	0x774	; 0x774 <MCP_bit_modify>
     876:	4d 2f       	mov	r20, r29
     878:	60 ee       	ldi	r22, 0xE0	; 224
     87a:	8f e0       	ldi	r24, 0x0F	; 15
     87c:	0e 94 ba 03 	call	0x774	; 0x774 <MCP_bit_modify>
     880:	8e e0       	ldi	r24, 0x0E	; 14
     882:	0e 94 75 03 	call	0x6ea	; 0x6ea <MCP_read>
     886:	c8 2f       	mov	r28, r24
     888:	80 7e       	andi	r24, 0xE0	; 224
     88a:	2d b7       	in	r18, 0x3d	; 61
     88c:	3e b7       	in	r19, 0x3e	; 62
     88e:	22 5f       	subi	r18, 0xF2	; 242
     890:	3f 4f       	sbci	r19, 0xFF	; 255
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	3e bf       	out	0x3e, r19	; 62
     898:	0f be       	out	0x3f, r0	; 63
     89a:	2d bf       	out	0x3d, r18	; 61
     89c:	8d 17       	cp	r24, r29
     89e:	c9 f0       	breq	.+50     	; 0x8d2 <MCP_init+0x12a>
     8a0:	8a ed       	ldi	r24, 0xDA	; 218
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	9f 93       	push	r25
     8a6:	8f 93       	push	r24
     8a8:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <printf>
     8ac:	1f 92       	push	r1
     8ae:	df 93       	push	r29
     8b0:	1f 92       	push	r1
     8b2:	cf 93       	push	r28
     8b4:	83 e7       	ldi	r24, 0x73	; 115
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	9f 93       	push	r25
     8ba:	8f 93       	push	r24
     8bc:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <printf>
     8c0:	8d b7       	in	r24, 0x3d	; 61
     8c2:	9e b7       	in	r25, 0x3e	; 62
     8c4:	08 96       	adiw	r24, 0x08	; 8
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	9e bf       	out	0x3e, r25	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	8d bf       	out	0x3d, r24	; 61
     8d0:	06 c0       	rjmp	.+12     	; 0x8de <MCP_init+0x136>
     8d2:	8f ef       	ldi	r24, 0xFF	; 255
     8d4:	9f e2       	ldi	r25, 0x2F	; 47
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <MCP_init+0x12e>
     8da:	00 c0       	rjmp	.+0      	; 0x8dc <MCP_init+0x134>
     8dc:	00 00       	nop
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	08 95       	ret

000008e4 <display_menu>:
	
}

//--private

void display_menu(menu_ptr m, uint8_t arrow_pos){
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	8c 01       	movw	r16, r24
     8ec:	c6 2f       	mov	r28, r22
	OLED_clear();
     8ee:	0e 94 e5 05 	call	0xbca	; 0xbca <OLED_clear>
	
	OLED_goto_pos(arrow_pos, 0);
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	8c 2f       	mov	r24, r28
     8f6:	0e 94 99 05 	call	0xb32	; 0xb32 <OLED_goto_pos>
	fprintf(oled_output,"> ");
     8fa:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <oled_output>
     8fe:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <oled_output+0x1>
     902:	42 e0       	ldi	r20, 0x02	; 2
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	8c e0       	ldi	r24, 0x0C	; 12
     90c:	92 e0       	ldi	r25, 0x02	; 2
     90e:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <fwrite>
	//printf("%u\n\r", arrow_pos);
	
	for(uint8_t i = 0; i < m->subM_n; i++){
     912:	c0 e0       	ldi	r28, 0x00	; 0
     914:	17 c0       	rjmp	.+46     	; 0x944 <display_menu+0x60>
		OLED_goto_pos(i,16);
     916:	60 e1       	ldi	r22, 0x10	; 16
     918:	8c 2f       	mov	r24, r28
     91a:	0e 94 99 05 	call	0xb32	; 0xb32 <OLED_goto_pos>
		fprintf(oled_output,"%s",m->subMenu[i]->text);
     91e:	ec 2f       	mov	r30, r28
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	33 96       	adiw	r30, 0x03	; 3
     924:	ee 0f       	add	r30, r30
     926:	ff 1f       	adc	r31, r31
     928:	e0 0f       	add	r30, r16
     92a:	f1 1f       	adc	r31, r17
     92c:	01 90       	ld	r0, Z+
     92e:	f0 81       	ld	r31, Z
     930:	e0 2d       	mov	r30, r0
     932:	60 91 50 03 	lds	r22, 0x0350	; 0x800350 <oled_output>
     936:	70 91 51 03 	lds	r23, 0x0351	; 0x800351 <oled_output+0x1>
     93a:	80 81       	ld	r24, Z
     93c:	91 81       	ldd	r25, Z+1	; 0x01
     93e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fputs>
	
	OLED_goto_pos(arrow_pos, 0);
	fprintf(oled_output,"> ");
	//printf("%u\n\r", arrow_pos);
	
	for(uint8_t i = 0; i < m->subM_n; i++){
     942:	cf 5f       	subi	r28, 0xFF	; 255
     944:	f8 01       	movw	r30, r16
     946:	86 89       	ldd	r24, Z+22	; 0x16
     948:	c8 17       	cp	r28, r24
     94a:	28 f3       	brcs	.-54     	; 0x916 <display_menu+0x32>
		OLED_goto_pos(i,16);
		fprintf(oled_output,"%s",m->subMenu[i]->text);
	}
}
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	08 95       	ret

00000954 <menu_loop>:
	
	menu_ptr current = &menu_null;
	menu_loop(current);
}

void menu_loop(menu_ptr current){
     954:	8c 01       	movw	r16, r24
	uint8_t selected_subM = 0;
     956:	c0 e0       	ldi	r28, 0x00	; 0
     958:	2f ef       	ldi	r18, 0xFF	; 255
     95a:	8f e7       	ldi	r24, 0x7F	; 127
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	21 50       	subi	r18, 0x01	; 1
     960:	80 40       	sbci	r24, 0x00	; 0
     962:	90 40       	sbci	r25, 0x00	; 0
     964:	e1 f7       	brne	.-8      	; 0x95e <menu_loop+0xa>
     966:	00 c0       	rjmp	.+0      	; 0x968 <menu_loop+0x14>
     968:	00 c0       	rjmp	.+0      	; 0x96a <menu_loop+0x16>
	while(1){
		_delay_ms(100);
		//printf("%s\n\r",current->text);
		dir direction = JOY_get_dir();
     96a:	0e 94 2d 03 	call	0x65a	; 0x65a <JOY_get_dir>
		switch(direction){
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	51 f0       	breq	.+20     	; 0x986 <menu_loop+0x32>
     972:	28 f0       	brcs	.+10     	; 0x97e <menu_loop+0x2a>
     974:	82 30       	cpi	r24, 0x02	; 2
     976:	b1 f0       	breq	.+44     	; 0x9a4 <menu_loop+0x50>
     978:	83 30       	cpi	r24, 0x03	; 3
     97a:	d1 f0       	breq	.+52     	; 0x9b0 <menu_loop+0x5c>
     97c:	36 c0       	rjmp	.+108    	; 0x9ea <menu_loop+0x96>
			case UP:
				if (selected_subM>0)
     97e:	cc 23       	and	r28, r28
     980:	a1 f1       	breq	.+104    	; 0x9ea <menu_loop+0x96>
					selected_subM--;
     982:	c1 50       	subi	r28, 0x01	; 1
     984:	32 c0       	rjmp	.+100    	; 0x9ea <menu_loop+0x96>
				else
					selected_subM = 0;
				break;
			case DOWN:
				if (selected_subM<(current->subM_n)-1)
     986:	2c 2f       	mov	r18, r28
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	f8 01       	movw	r30, r16
     98c:	46 89       	ldd	r20, Z+22	; 0x16
     98e:	84 2f       	mov	r24, r20
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	28 17       	cp	r18, r24
     996:	39 07       	cpc	r19, r25
     998:	14 f4       	brge	.+4      	; 0x99e <menu_loop+0x4a>
					selected_subM++;
     99a:	cf 5f       	subi	r28, 0xFF	; 255
     99c:	26 c0       	rjmp	.+76     	; 0x9ea <menu_loop+0x96>
				else
					selected_subM = (current->subM_n)-1;
     99e:	cf ef       	ldi	r28, 0xFF	; 255
     9a0:	c4 0f       	add	r28, r20
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <menu_loop+0x96>
				break;
			case LEFT:
				if(current->parent != NULL){
     9a4:	f8 01       	movw	r30, r16
     9a6:	84 81       	ldd	r24, Z+4	; 0x04
     9a8:	95 81       	ldd	r25, Z+5	; 0x05
     9aa:	00 97       	sbiw	r24, 0x00	; 0
     9ac:	c9 f4       	brne	.+50     	; 0x9e0 <menu_loop+0x8c>
     9ae:	1d c0       	rjmp	.+58     	; 0x9ea <menu_loop+0x96>
					current = current->parent;
					selected_subM = 0;
				}
				break;
			case RIGHT:
				if(current->subMenu[selected_subM]->function != NULL)
     9b0:	ec 2f       	mov	r30, r28
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	33 96       	adiw	r30, 0x03	; 3
     9b6:	ee 0f       	add	r30, r30
     9b8:	ff 1f       	adc	r31, r31
     9ba:	e0 0f       	add	r30, r16
     9bc:	f1 1f       	adc	r31, r17
     9be:	a0 81       	ld	r26, Z
     9c0:	b1 81       	ldd	r27, Z+1	; 0x01
     9c2:	12 96       	adiw	r26, 0x02	; 2
     9c4:	ed 91       	ld	r30, X+
     9c6:	fc 91       	ld	r31, X
     9c8:	13 97       	sbiw	r26, 0x03	; 3
     9ca:	30 97       	sbiw	r30, 0x00	; 0
     9cc:	11 f0       	breq	.+4      	; 0x9d2 <menu_loop+0x7e>
					current->subMenu[selected_subM]->function();
     9ce:	09 95       	icall
     9d0:	0c c0       	rjmp	.+24     	; 0x9ea <menu_loop+0x96>
				else{
					if(current->subMenu[selected_subM]->subMenu[0] != NULL){
     9d2:	16 96       	adiw	r26, 0x06	; 6
     9d4:	8d 91       	ld	r24, X+
     9d6:	9c 91       	ld	r25, X
     9d8:	17 97       	sbiw	r26, 0x07	; 7
     9da:	89 2b       	or	r24, r25
     9dc:	21 f4       	brne	.+8      	; 0x9e6 <menu_loop+0x92>
     9de:	05 c0       	rjmp	.+10     	; 0x9ea <menu_loop+0x96>
				else
					selected_subM = (current->subM_n)-1;
				break;
			case LEFT:
				if(current->parent != NULL){
					current = current->parent;
     9e0:	8c 01       	movw	r16, r24
					selected_subM = 0;
     9e2:	c0 e0       	ldi	r28, 0x00	; 0
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <menu_loop+0x96>
			case RIGHT:
				if(current->subMenu[selected_subM]->function != NULL)
					current->subMenu[selected_subM]->function();
				else{
					if(current->subMenu[selected_subM]->subMenu[0] != NULL){
						current = current->subMenu[selected_subM];
     9e6:	8d 01       	movw	r16, r26
						selected_subM = 0;
     9e8:	c0 e0       	ldi	r28, 0x00	; 0
				break;
			default:
				break;
		}
		
		OLED_reset();
     9ea:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_reset>
		display_menu(current, selected_subM);
     9ee:	6c 2f       	mov	r22, r28
     9f0:	c8 01       	movw	r24, r16
     9f2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <display_menu>
	}
     9f6:	b0 cf       	rjmp	.-160    	; 0x958 <menu_loop+0x4>

000009f8 <menu_add>:
		OLED_goto_pos(i,16);
		fprintf(oled_output,"%s",m->subMenu[i]->text);
	}
}

menu_ptr menu_add(menu_ptr parent, char * text, void (*function)()) {
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	ec 01       	movw	r28, r24
     a06:	7b 01       	movw	r14, r22
     a08:	8a 01       	movw	r16, r20
	//printf("size:%d",sizeof(menu_t));
	menu_ptr subMenu = (menu_ptr)malloc(sizeof(menu_t));
     a0a:	87 e1       	ldi	r24, 0x17	; 23
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <malloc>
	subMenu->text = text;
     a12:	fc 01       	movw	r30, r24
     a14:	f1 82       	std	Z+1, r15	; 0x01
     a16:	e0 82       	st	Z, r14
	subMenu->function = function;
     a18:	13 83       	std	Z+3, r17	; 0x03
     a1a:	02 83       	std	Z+2, r16	; 0x02
	subMenu->parent = parent;
     a1c:	d5 83       	std	Z+5, r29	; 0x05
     a1e:	c4 83       	std	Z+4, r28	; 0x04
	subMenu->subM_n = 0;
     a20:	16 8a       	std	Z+22, r1	; 0x16
	
	if (parent != NULL){
     a22:	20 97       	sbiw	r28, 0x00	; 0
     a24:	61 f0       	breq	.+24     	; 0xa3e <menu_add+0x46>
		parent->subMenu[parent->subM_n++] = subMenu;
     a26:	ee 89       	ldd	r30, Y+22	; 0x16
     a28:	21 e0       	ldi	r18, 0x01	; 1
     a2a:	2e 0f       	add	r18, r30
     a2c:	2e 8b       	std	Y+22, r18	; 0x16
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	33 96       	adiw	r30, 0x03	; 3
     a32:	ee 0f       	add	r30, r30
     a34:	ff 1f       	adc	r31, r31
     a36:	ec 0f       	add	r30, r28
     a38:	fd 1f       	adc	r31, r29
     a3a:	91 83       	std	Z+1, r25	; 0x01
     a3c:	80 83       	st	Z, r24
	}
	return subMenu;
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	08 95       	ret

00000a4c <menu_init>:
#include "../include/menu.h"

extern FILE *oled_output;

void menu_init(){
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	67 97       	sbiw	r28, 0x17	; 23
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
	menu_t menu_null = {"root",NULL,NULL,{NULL},0};
     a60:	8e 01       	movw	r16, r28
     a62:	0f 5f       	subi	r16, 0xFF	; 255
     a64:	1f 4f       	sbci	r17, 0xFF	; 255
     a66:	87 e1       	ldi	r24, 0x17	; 23
     a68:	f8 01       	movw	r30, r16
     a6a:	11 92       	st	Z+, r1
     a6c:	8a 95       	dec	r24
     a6e:	e9 f7       	brne	.-6      	; 0xa6a <menu_init+0x1e>
     a70:	8f e0       	ldi	r24, 0x0F	; 15
     a72:	92 e0       	ldi	r25, 0x02	; 2
     a74:	9a 83       	std	Y+2, r25	; 0x02
     a76:	89 83       	std	Y+1, r24	; 0x01
	
	menu_ptr menu_play = menu_add(&menu_null, "NEW GAME", &new_game);
     a78:	43 e2       	ldi	r20, 0x23	; 35
     a7a:	59 e0       	ldi	r21, 0x09	; 9
     a7c:	64 e1       	ldi	r22, 0x14	; 20
     a7e:	72 e0       	ldi	r23, 0x02	; 2
     a80:	c8 01       	movw	r24, r16
     a82:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <menu_add>
	//menu_add(menu_play, "play again?", &new_game);
	//menu_add(menu_play, "no, thanks", &menu_init);
	
	menu_ptr menu_settings = menu_add(&menu_null, "SETTINGS", NULL);
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	6d e1       	ldi	r22, 0x1D	; 29
     a8c:	72 e0       	ldi	r23, 0x02	; 2
     a8e:	c8 01       	movw	r24, r16
     a90:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <menu_add>
     a94:	7c 01       	movw	r14, r24
	menu_add(menu_settings, "x-y", &settings_mode1);
     a96:	45 e6       	ldi	r20, 0x65	; 101
     a98:	57 e0       	ldi	r21, 0x07	; 7
     a9a:	66 e2       	ldi	r22, 0x26	; 38
     a9c:	72 e0       	ldi	r23, 0x02	; 2
     a9e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <menu_add>
	menu_add(menu_settings, "sl-sr", &settings_mode2);
     aa2:	49 e6       	ldi	r20, 0x69	; 105
     aa4:	57 e0       	ldi	r21, 0x07	; 7
     aa6:	6a e2       	ldi	r22, 0x2A	; 42
     aa8:	72 e0       	ldi	r23, 0x02	; 2
     aaa:	c7 01       	movw	r24, r14
     aac:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <menu_add>
	menu_add(menu_settings, "sr-x", &settings_mode3);
     ab0:	4d e6       	ldi	r20, 0x6D	; 109
     ab2:	57 e0       	ldi	r21, 0x07	; 7
     ab4:	60 e3       	ldi	r22, 0x30	; 48
     ab6:	72 e0       	ldi	r23, 0x02	; 2
     ab8:	c7 01       	movw	r24, r14
     aba:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <menu_add>
	menu_add(menu_settings, "x-x", &settings_mode4);
     abe:	41 e7       	ldi	r20, 0x71	; 113
     ac0:	57 e0       	ldi	r21, 0x07	; 7
     ac2:	65 e3       	ldi	r22, 0x35	; 53
     ac4:	72 e0       	ldi	r23, 0x02	; 2
     ac6:	c7 01       	movw	r24, r14
     ac8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <menu_add>
	menu_add(menu_settings, "sr-sr", &settings_mode5);
     acc:	45 e7       	ldi	r20, 0x75	; 117
     ace:	57 e0       	ldi	r21, 0x07	; 7
     ad0:	69 e3       	ldi	r22, 0x39	; 57
     ad2:	72 e0       	ldi	r23, 0x02	; 2
     ad4:	c7 01       	movw	r24, r14
     ad6:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <menu_add>
	
	menu_ptr menu_test = menu_add(&menu_null, "TEST", NULL);
     ada:	40 e0       	ldi	r20, 0x00	; 0
     adc:	50 e0       	ldi	r21, 0x00	; 0
     ade:	6f e3       	ldi	r22, 0x3F	; 63
     ae0:	72 e0       	ldi	r23, 0x02	; 2
     ae2:	c8 01       	movw	r24, r16
     ae4:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <menu_add>
     ae8:	7c 01       	movw	r14, r24
	menu_add(menu_test, "SRAM", &test_SRAM);
     aea:	41 ec       	ldi	r20, 0xC1	; 193
     aec:	59 e0       	ldi	r21, 0x09	; 9
     aee:	64 e4       	ldi	r22, 0x44	; 68
     af0:	72 e0       	ldi	r23, 0x02	; 2
     af2:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <menu_add>
	menu_add(menu_test, "OLED", &test_OLED);
     af6:	4c e1       	ldi	r20, 0x1C	; 28
     af8:	5a e0       	ldi	r21, 0x0A	; 10
     afa:	69 e4       	ldi	r22, 0x49	; 73
     afc:	72 e0       	ldi	r23, 0x02	; 2
     afe:	c7 01       	movw	r24, r14
     b00:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <menu_add>
	menu_add(menu_test, "OLED", &test_OLED);
	menu_add(menu_test, "MCP", &test_MCP_loopback);
	*/
	
	menu_ptr current = &menu_null;
	menu_loop(current);
     b04:	c8 01       	movw	r24, r16
     b06:	0e 94 aa 04 	call	0x954	; 0x954 <menu_loop>

00000b0a <OLED_write_cmd>:
     b0a:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xc9d>
     b0e:	08 95       	ret

00000b10 <OLED_goto_row>:
     b10:	80 55       	subi	r24, 0x50	; 80
     b12:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     b16:	08 95       	ret

00000b18 <OLED_goto_col>:
     b18:	cf 93       	push	r28
     b1a:	c8 2f       	mov	r28, r24
     b1c:	8f 70       	andi	r24, 0x0F	; 15
     b1e:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     b22:	8c 2f       	mov	r24, r28
     b24:	82 95       	swap	r24
     b26:	8f 70       	andi	r24, 0x0F	; 15
     b28:	80 61       	ori	r24, 0x10	; 16
     b2a:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     b2e:	cf 91       	pop	r28
     b30:	08 95       	ret

00000b32 <OLED_goto_pos>:
     b32:	cf 93       	push	r28
     b34:	c6 2f       	mov	r28, r22
     b36:	0e 94 88 05 	call	0xb10	; 0xb10 <OLED_goto_row>
     b3a:	8c 2f       	mov	r24, r28
     b3c:	0e 94 8c 05 	call	0xb18	; 0xb18 <OLED_goto_col>
     b40:	cf 91       	pop	r28
     b42:	08 95       	ret

00000b44 <OLED_invert>:
     b44:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <__data_end>
     b48:	88 23       	and	r24, r24
     b4a:	21 f0       	breq	.+8      	; 0xb54 <OLED_invert+0x10>
     b4c:	86 ea       	ldi	r24, 0xA6	; 166
     b4e:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     b52:	03 c0       	rjmp	.+6      	; 0xb5a <OLED_invert+0x16>
     b54:	87 ea       	ldi	r24, 0xA7	; 167
     b56:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     b5a:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <__data_end>
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	89 27       	eor	r24, r25
     b62:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <__data_end>
     b66:	08 95       	ret

00000b68 <OLED_restrict_cols>:
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	d8 2f       	mov	r29, r24
     b6e:	c6 2f       	mov	r28, r22
     b70:	81 e2       	ldi	r24, 0x21	; 33
     b72:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     b76:	8d 2f       	mov	r24, r29
     b78:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     b7c:	8c 2f       	mov	r24, r28
     b7e:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <OLED_restrict_pages>:
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	d8 2f       	mov	r29, r24
     b8e:	c6 2f       	mov	r28, r22
     b90:	82 e2       	ldi	r24, 0x22	; 34
     b92:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     b96:	8d 2f       	mov	r24, r29
     b98:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     b9c:	8c 2f       	mov	r24, r28
     b9e:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	08 95       	ret

00000ba8 <OLED_write_data>:
     ba8:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xe9d>
     bac:	08 95       	ret

00000bae <OLED_clear_row>:
     bae:	cf 93       	push	r28
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	0e 94 99 05 	call	0xb32	; 0xb32 <OLED_goto_pos>
     bb6:	c0 e0       	ldi	r28, 0x00	; 0
     bb8:	04 c0       	rjmp	.+8      	; 0xbc2 <OLED_clear_row+0x14>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	0e 94 d4 05 	call	0xba8	; 0xba8 <OLED_write_data>
     bc0:	cf 5f       	subi	r28, 0xFF	; 255
     bc2:	cc 23       	and	r28, r28
     bc4:	d4 f7       	brge	.-12     	; 0xbba <OLED_clear_row+0xc>
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <OLED_clear>:
     bca:	cf 93       	push	r28
     bcc:	c0 e0       	ldi	r28, 0x00	; 0
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <OLED_clear+0xe>
     bd0:	8c 2f       	mov	r24, r28
     bd2:	0e 94 d7 05 	call	0xbae	; 0xbae <OLED_clear_row>
     bd6:	cf 5f       	subi	r28, 0xFF	; 255
     bd8:	c8 30       	cpi	r28, 0x08	; 8
     bda:	d0 f3       	brcs	.-12     	; 0xbd0 <OLED_clear+0x6>
     bdc:	cf 91       	pop	r28
     bde:	08 95       	ret

00000be0 <OLED_reset>:
     be0:	0e 94 e5 05 	call	0xbca	; 0xbca <OLED_clear>
     be4:	6f e7       	ldi	r22, 0x7F	; 127
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	0e 94 b4 05 	call	0xb68	; 0xb68 <OLED_restrict_cols>
     bec:	67 e0       	ldi	r22, 0x07	; 7
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	0e 94 c4 05 	call	0xb88	; 0xb88 <OLED_restrict_pages>
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	0e 94 99 05 	call	0xb32	; 0xb32 <OLED_goto_pos>
     bfc:	08 95       	ret

00000bfe <OLED_init>:
     bfe:	8e ea       	ldi	r24, 0xAE	; 174
     c00:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c04:	81 ea       	ldi	r24, 0xA1	; 161
     c06:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c0a:	8a ed       	ldi	r24, 0xDA	; 218
     c0c:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c10:	82 e1       	ldi	r24, 0x12	; 18
     c12:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c1c:	88 ea       	ldi	r24, 0xA8	; 168
     c1e:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c22:	8f e3       	ldi	r24, 0x3F	; 63
     c24:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c28:	85 ed       	ldi	r24, 0xD5	; 213
     c2a:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c2e:	80 e8       	ldi	r24, 0x80	; 128
     c30:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c34:	89 ed       	ldi	r24, 0xD9	; 217
     c36:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c3a:	81 e2       	ldi	r24, 0x21	; 33
     c3c:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c40:	8b ed       	ldi	r24, 0xDB	; 219
     c42:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c46:	80 e3       	ldi	r24, 0x30	; 48
     c48:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c4c:	8d ea       	ldi	r24, 0xAD	; 173
     c4e:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c58:	83 ed       	ldi	r24, 0xD3	; 211
     c5a:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c64:	80 e4       	ldi	r24, 0x40	; 64
     c66:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c6a:	80 e2       	ldi	r24, 0x20	; 32
     c6c:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c76:	81 e8       	ldi	r24, 0x81	; 129
     c78:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c82:	86 ea       	ldi	r24, 0xA6	; 166
     c84:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c88:	84 ea       	ldi	r24, 0xA4	; 164
     c8a:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c8e:	8f ea       	ldi	r24, 0xAF	; 175
     c90:	0e 94 85 05 	call	0xb0a	; 0xb0a <OLED_write_cmd>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	82 e7       	ldi	r24, 0x72	; 114
     c9a:	96 e0       	ldi	r25, 0x06	; 6
     c9c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <fdevopen>
     ca0:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <oled_output+0x1>
     ca4:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <oled_output>
     ca8:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_reset>
     cac:	08 95       	ret

00000cae <OLED_print_8char>:
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	d0 ee       	ldi	r29, 0xE0	; 224
     cb4:	d8 0f       	add	r29, r24
     cb6:	c0 e0       	ldi	r28, 0x00	; 0
     cb8:	10 c0       	rjmp	.+32     	; 0xcda <OLED_print_8char+0x2c>
     cba:	ed 2f       	mov	r30, r29
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	ee 0f       	add	r30, r30
     cc0:	ff 1f       	adc	r31, r31
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	ee 0f       	add	r30, r30
     cc8:	ff 1f       	adc	r31, r31
     cca:	ec 0f       	add	r30, r28
     ccc:	f1 1d       	adc	r31, r1
     cce:	e0 59       	subi	r30, 0x90	; 144
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	84 91       	lpm	r24, Z
     cd4:	0e 94 d4 05 	call	0xba8	; 0xba8 <OLED_write_data>
     cd8:	cf 5f       	subi	r28, 0xFF	; 255
     cda:	c8 30       	cpi	r28, 0x08	; 8
     cdc:	70 f3       	brcs	.-36     	; 0xcba <OLED_print_8char+0xc>
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <OLED_putchar8>:
     ce4:	0e 94 57 06 	call	0xcae	; 0xcae <OLED_print_8char>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	08 95       	ret

00000cee <SPI_send>:
     cee:	8f b9       	out	0x0f, r24	; 15
     cf0:	77 9b       	sbis	0x0e, 7	; 14
     cf2:	fe cf       	rjmp	.-4      	; 0xcf0 <SPI_send+0x2>
     cf4:	08 95       	ret

00000cf6 <SPI_receive>:
     cf6:	8a ea       	ldi	r24, 0xAA	; 170
     cf8:	0e 94 77 06 	call	0xcee	; 0xcee <SPI_send>
     cfc:	8f b1       	in	r24, 0x0f	; 15
     cfe:	08 95       	ret

00000d00 <SPI_SS_high>:
     d00:	88 b3       	in	r24, 0x18	; 24
     d02:	80 61       	ori	r24, 0x10	; 16
     d04:	88 bb       	out	0x18, r24	; 24
     d06:	08 95       	ret

00000d08 <SPI_master_init>:
     d08:	87 b3       	in	r24, 0x17	; 23
     d0a:	80 6b       	ori	r24, 0xB0	; 176
     d0c:	87 bb       	out	0x17, r24	; 23
     d0e:	8d b1       	in	r24, 0x0d	; 13
     d10:	81 65       	ori	r24, 0x51	; 81
     d12:	8d b9       	out	0x0d, r24	; 13
     d14:	8d b1       	in	r24, 0x0d	; 13
     d16:	83 7f       	andi	r24, 0xF3	; 243
     d18:	8d b9       	out	0x0d, r24	; 13
     d1a:	0e 94 80 06 	call	0xd00	; 0xd00 <SPI_SS_high>
     d1e:	08 95       	ret

00000d20 <SPI_SS_low>:
     d20:	88 b3       	in	r24, 0x18	; 24
     d22:	8f 7e       	andi	r24, 0xEF	; 239
     d24:	88 bb       	out	0x18, r24	; 24
     d26:	08 95       	ret

00000d28 <UART_init>:
     d28:	f8 94       	cli
     d2a:	90 bd       	out	0x20, r25	; 32
     d2c:	89 b9       	out	0x09, r24	; 9
     d2e:	88 ed       	ldi	r24, 0xD8	; 216
     d30:	8a b9       	out	0x0a, r24	; 10
     d32:	8e e8       	ldi	r24, 0x8E	; 142
     d34:	80 bd       	out	0x20, r24	; 32
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	87 ec       	ldi	r24, 0xC7	; 199
     d3c:	96 e0       	ldi	r25, 0x06	; 6
     d3e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <fdevopen>
     d42:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <uart_output+0x1>
     d46:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <uart_output>
     d4a:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <__iob+0x3>
     d4e:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <__iob+0x2>
     d52:	78 94       	sei
     d54:	87 b3       	in	r24, 0x17	; 23
     d56:	86 60       	ori	r24, 0x06	; 6
     d58:	87 bb       	out	0x17, r24	; 23
     d5a:	88 b3       	in	r24, 0x18	; 24
     d5c:	86 60       	ori	r24, 0x06	; 6
     d5e:	88 bb       	out	0x18, r24	; 24
     d60:	08 95       	ret

00000d62 <__vector_23>:
     d62:	1f 92       	push	r1
     d64:	0f 92       	push	r0
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	0f 92       	push	r0
     d6a:	11 24       	eor	r1, r1
     d6c:	8f 93       	push	r24
     d6e:	9f 93       	push	r25
     d70:	98 b3       	in	r25, 0x18	; 24
     d72:	84 e0       	ldi	r24, 0x04	; 4
     d74:	89 27       	eor	r24, r25
     d76:	88 bb       	out	0x18, r24	; 24
     d78:	9f 91       	pop	r25
     d7a:	8f 91       	pop	r24
     d7c:	0f 90       	pop	r0
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	0f 90       	pop	r0
     d82:	1f 90       	pop	r1
     d84:	18 95       	reti

00000d86 <UART_transmit>:
     d86:	5d 9b       	sbis	0x0b, 5	; 11
     d88:	fe cf       	rjmp	.-4      	; 0xd86 <UART_transmit>
     d8a:	8c b9       	out	0x0c, r24	; 12
     d8c:	08 95       	ret

00000d8e <UART_putchar>:
     d8e:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_transmit>
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	08 95       	ret

00000d98 <UART_receive>:
     d98:	8b b1       	in	r24, 0x0b	; 11
     d9a:	8c 71       	andi	r24, 0x1C	; 28
     d9c:	31 f4       	brne	.+12     	; 0xdaa <UART_receive+0x12>
     d9e:	98 b3       	in	r25, 0x18	; 24
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	89 27       	eor	r24, r25
     da4:	88 bb       	out	0x18, r24	; 24
     da6:	8c b1       	in	r24, 0x0c	; 12
     da8:	08 95       	ret
     daa:	8f ef       	ldi	r24, 0xFF	; 255
     dac:	08 95       	ret

00000dae <__vector_19>:
     dae:	1f 92       	push	r1
     db0:	0f 92       	push	r0
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	0f 92       	push	r0
     db6:	11 24       	eor	r1, r1
     db8:	2f 93       	push	r18
     dba:	3f 93       	push	r19
     dbc:	4f 93       	push	r20
     dbe:	5f 93       	push	r21
     dc0:	6f 93       	push	r22
     dc2:	7f 93       	push	r23
     dc4:	8f 93       	push	r24
     dc6:	9f 93       	push	r25
     dc8:	af 93       	push	r26
     dca:	bf 93       	push	r27
     dcc:	ef 93       	push	r30
     dce:	ff 93       	push	r31
     dd0:	0e 94 cc 06 	call	0xd98	; 0xd98 <UART_receive>
     dd4:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <received_data>
     dd8:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <received_data>
     ddc:	1f 92       	push	r1
     dde:	8f 93       	push	r24
     de0:	8e e4       	ldi	r24, 0x4E	; 78
     de2:	92 e0       	ldi	r25, 0x02	; 2
     de4:	9f 93       	push	r25
     de6:	8f 93       	push	r24
     de8:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <printf>
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	ff 91       	pop	r31
     df6:	ef 91       	pop	r30
     df8:	bf 91       	pop	r27
     dfa:	af 91       	pop	r26
     dfc:	9f 91       	pop	r25
     dfe:	8f 91       	pop	r24
     e00:	7f 91       	pop	r23
     e02:	6f 91       	pop	r22
     e04:	5f 91       	pop	r21
     e06:	4f 91       	pop	r20
     e08:	3f 91       	pop	r19
     e0a:	2f 91       	pop	r18
     e0c:	0f 90       	pop	r0
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	0f 90       	pop	r0
     e12:	1f 90       	pop	r1
     e14:	18 95       	reti

00000e16 <XMEM_init>:
     e16:	85 b7       	in	r24, 0x35	; 53
     e18:	80 68       	ori	r24, 0x80	; 128
     e1a:	85 bf       	out	0x35, r24	; 53
     e1c:	80 e2       	ldi	r24, 0x20	; 32
     e1e:	80 bf       	out	0x30, r24	; 48
     e20:	08 95       	ret

00000e22 <main>:
#include "drivers/include/menu.h"

int main(void) {
	UART_init(MYUBRR);
     e22:	8f e1       	ldi	r24, 0x1F	; 31
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 94 06 	call	0xd28	; 0xd28 <UART_init>
	XMEM_init();
     e2a:	0e 94 0b 07 	call	0xe16	; 0xe16 <XMEM_init>
	ADC_init();
     e2e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	JOY_init();
     e32:	0e 94 b6 02 	call	0x56c	; 0x56c <JOY_init>
	CAN_init();
     e36:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <CAN_init>
	OLED_init();
     e3a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <OLED_init>
	OLED_reset();
     e3e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_reset>
	
	menu_init();
     e42:	0e 94 26 05 	call	0xa4c	; 0xa4c <menu_init>
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	08 95       	ret

00000e4c <settings>:

uint16_t ms;
uint8_t seconds;
uint8_t minutes;

void settings(uint8_t mode){
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	2b 97       	sbiw	r28, 0x0b	; 11
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	18 2f       	mov	r17, r24
	message_t msg = {.id = CAN_ID_SETTINGS, .length=1, .signed_data={mode}};
     e64:	ce 01       	movw	r24, r28
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	2b e0       	ldi	r18, 0x0B	; 11
     e6a:	fc 01       	movw	r30, r24
     e6c:	11 92       	st	Z+, r1
     e6e:	2a 95       	dec	r18
     e70:	e9 f7       	brne	.-6      	; 0xe6c <settings+0x20>
     e72:	24 e0       	ldi	r18, 0x04	; 4
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	3a 83       	std	Y+2, r19	; 0x02
     e78:	29 83       	std	Y+1, r18	; 0x01
     e7a:	21 e0       	ldi	r18, 0x01	; 1
     e7c:	2b 83       	std	Y+3, r18	; 0x03
     e7e:	1c 83       	std	Y+4, r17	; 0x04
	CAN_send(&msg);
     e80:	0e 94 fd 01 	call	0x3fa	; 0x3fa <CAN_send>
	printf("SETTINGS send with MODE: %d\n\r", mode);
     e84:	1f 92       	push	r1
     e86:	1f 93       	push	r17
     e88:	8a e5       	ldi	r24, 0x5A	; 90
     e8a:	92 e0       	ldi	r25, 0x02	; 2
     e8c:	9f 93       	push	r25
     e8e:	8f 93       	push	r24
     e90:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <printf>
	OLED_invert();
     e94:	0e 94 a2 05 	call	0xb44	; 0xb44 <OLED_invert>
     e98:	ff ef       	ldi	r31, 0xFF	; 255
     e9a:	2f e7       	ldi	r18, 0x7F	; 127
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	f1 50       	subi	r31, 0x01	; 1
     ea0:	20 40       	sbci	r18, 0x00	; 0
     ea2:	80 40       	sbci	r24, 0x00	; 0
     ea4:	e1 f7       	brne	.-8      	; 0xe9e <settings+0x52>
     ea6:	00 c0       	rjmp	.+0      	; 0xea8 <settings+0x5c>
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <settings+0x5e>
	_delay_ms(100);
	OLED_invert();
     eaa:	0e 94 a2 05 	call	0xb44	; 0xb44 <OLED_invert>
}
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	2b 96       	adiw	r28, 0x0b	; 11
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	08 95       	ret

00000eca <settings_mode1>:

void settings_mode1(){ settings(MODE_1); };
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	0e 94 26 07 	call	0xe4c	; 0xe4c <settings>
     ed0:	08 95       	ret

00000ed2 <settings_mode2>:
void settings_mode2(){ settings(MODE_2); };
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	0e 94 26 07 	call	0xe4c	; 0xe4c <settings>
     ed8:	08 95       	ret

00000eda <settings_mode3>:
void settings_mode3(){ settings(MODE_3); };
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	0e 94 26 07 	call	0xe4c	; 0xe4c <settings>
     ee0:	08 95       	ret

00000ee2 <settings_mode4>:
void settings_mode4(){ settings(MODE_4); };
     ee2:	83 e0       	ldi	r24, 0x03	; 3
     ee4:	0e 94 26 07 	call	0xe4c	; 0xe4c <settings>
     ee8:	08 95       	ret

00000eea <settings_mode5>:
void settings_mode5(){ settings(MODE_5); };
     eea:	84 e0       	ldi	r24, 0x04	; 4
     eec:	0e 94 26 07 	call	0xe4c	; 0xe4c <settings>
     ef0:	08 95       	ret

00000ef2 <gameloop>:
	fprintf(oled_output, "CALIBRATION...");
	_delay_ms(3000); //waiting that he calibrates
	gameloop();
}

void gameloop(){
     ef2:	2f 92       	push	r2
     ef4:	3f 92       	push	r3
     ef6:	4f 92       	push	r4
     ef8:	5f 92       	push	r5
     efa:	6f 92       	push	r6
     efc:	7f 92       	push	r7
     efe:	8f 92       	push	r8
     f00:	9f 92       	push	r9
     f02:	af 92       	push	r10
     f04:	bf 92       	push	r11
     f06:	cf 92       	push	r12
     f08:	df 92       	push	r13
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	2b 97       	sbiw	r28, 0x0b	; 11
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
	
	ms = 0;
     f26:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <ms+0x1>
     f2a:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <ms>
	seconds = 0;
     f2e:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <seconds>
	minutes = 0;
     f32:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <minutes>
	uint8_t last_sr = 0;
	uint8_t last_btn = 1;
	
	bool send = false;
	
	OLED_clear();
     f36:	0e 94 e5 05 	call	0xbca	; 0xbca <OLED_clear>
	OLED_goto_pos(0,0);
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	0e 94 99 05 	call	0xb32	; 0xb32 <OLED_goto_pos>
	fprintf(oled_output, "LIVES: %d", lives);
     f42:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lives>
     f46:	1f 92       	push	r1
     f48:	8f 93       	push	r24
     f4a:	88 e7       	ldi	r24, 0x78	; 120
     f4c:	92 e0       	ldi	r25, 0x02	; 2
     f4e:	9f 93       	push	r25
     f50:	8f 93       	push	r24
     f52:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <oled_output+0x1>
     f56:	8f 93       	push	r24
     f58:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <oled_output>
     f5c:	8f 93       	push	r24
     f5e:	0e 94 b6 0c 	call	0x196c	; 0x196c <fprintf>
	
	while(1 && !gameover){
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
	int8_t last_y = 0;
	uint8_t last_sl = 0;
	uint8_t last_sr = 0;
	uint8_t last_btn = 1;
	
	bool send = false;
     f6e:	f1 2c       	mov	r15, r1
	
	int8_t last_x = 0;
	int8_t last_y = 0;
	uint8_t last_sl = 0;
	uint8_t last_sr = 0;
	uint8_t last_btn = 1;
     f70:	22 24       	eor	r2, r2
     f72:	23 94       	inc	r2
	minutes = 0;
	
	int8_t last_x = 0;
	int8_t last_y = 0;
	uint8_t last_sl = 0;
	uint8_t last_sr = 0;
     f74:	41 2c       	mov	r4, r1
	seconds = 0;
	minutes = 0;
	
	int8_t last_x = 0;
	int8_t last_y = 0;
	uint8_t last_sl = 0;
     f76:	51 2c       	mov	r5, r1
	ms = 0;
	seconds = 0;
	minutes = 0;
	
	int8_t last_x = 0;
	int8_t last_y = 0;
     f78:	61 2c       	mov	r6, r1
	
	ms = 0;
	seconds = 0;
	minutes = 0;
	
	int8_t last_x = 0;
     f7a:	71 2c       	mov	r7, r1
	
	OLED_clear();
	OLED_goto_pos(0,0);
	fprintf(oled_output, "LIVES: %d", lives);
	
	while(1 && !gameover){
     f7c:	46 c1       	rjmp	.+652    	; 0x120a <gameloop+0x318>
     f7e:	8c ec       	ldi	r24, 0xCC	; 204
     f80:	9c e4       	ldi	r25, 0x4C	; 76
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <gameloop+0x90>
     f86:	00 c0       	rjmp	.+0      	; 0xf88 <gameloop+0x96>
     f88:	00 00       	nop
		_delay_ms(16);
		pos_t pos = JOY_get_rel_pos();
     f8a:	0e 94 bf 02 	call	0x57e	; 0x57e <JOY_get_rel_pos>
     f8e:	b6 2e       	mov	r11, r22
     f90:	38 2e       	mov	r3, r24
		sliders_t sliders = JOY_get_sliders();
     f92:	0e 94 5d 03 	call	0x6ba	; 0x6ba <JOY_get_sliders>
     f96:	98 2e       	mov	r9, r24
     f98:	89 2e       	mov	r8, r25
		
		int8_t x = (int8_t)pos.x;
		int8_t y  = (int8_t)pos.y;
		uint8_t sl = sliders.left;
		uint8_t sr = sliders.right;
		uint8_t btn = ((PIND & (1<<JOY_BUTTON))>>JOY_BUTTON);
     f9a:	00 b3       	in	r16, 0x10	; 16
     f9c:	00 72       	andi	r16, 0x20	; 32
     f9e:	10 e0       	ldi	r17, 0x00	; 0
     fa0:	15 95       	asr	r17
     fa2:	07 95       	ror	r16
     fa4:	15 95       	asr	r17
     fa6:	07 95       	ror	r16
     fa8:	15 95       	asr	r17
     faa:	07 95       	ror	r16
     fac:	15 95       	asr	r17
     fae:	07 95       	ror	r16
     fb0:	15 95       	asr	r17
     fb2:	07 95       	ror	r16
     fb4:	e0 2e       	mov	r14, r16
		
		//send only if difference is meaningful to avoid annoying flickering
		if (abs(x-last_x) >= JOY_SEND_TRESHOLD){
     fb6:	cb 2c       	mov	r12, r11
     fb8:	0b 2c       	mov	r0, r11
     fba:	00 0c       	add	r0, r0
     fbc:	dd 08       	sbc	r13, r13
     fbe:	96 01       	movw	r18, r12
     fc0:	27 19       	sub	r18, r7
     fc2:	31 09       	sbc	r19, r1
     fc4:	77 fc       	sbrc	r7, 7
     fc6:	33 95       	inc	r19
     fc8:	c9 01       	movw	r24, r18
     fca:	99 23       	and	r25, r25
     fcc:	24 f4       	brge	.+8      	; 0xfd6 <gameloop+0xe4>
     fce:	88 27       	eor	r24, r24
     fd0:	99 27       	eor	r25, r25
     fd2:	82 1b       	sub	r24, r18
     fd4:	93 0b       	sbc	r25, r19
     fd6:	05 97       	sbiw	r24, 0x05	; 5
     fd8:	1c f0       	brlt	.+6      	; 0xfe0 <gameloop+0xee>
			last_x = x;
     fda:	7b 2c       	mov	r7, r11
			send = true;
     fdc:	ff 24       	eor	r15, r15
     fde:	f3 94       	inc	r15
		}
		if (abs(y-last_y) >= JOY_SEND_TRESHOLD){
     fe0:	a3 2c       	mov	r10, r3
     fe2:	03 2c       	mov	r0, r3
     fe4:	00 0c       	add	r0, r0
     fe6:	bb 08       	sbc	r11, r11
     fe8:	95 01       	movw	r18, r10
     fea:	26 19       	sub	r18, r6
     fec:	31 09       	sbc	r19, r1
     fee:	67 fc       	sbrc	r6, 7
     ff0:	33 95       	inc	r19
     ff2:	c9 01       	movw	r24, r18
     ff4:	99 23       	and	r25, r25
     ff6:	24 f4       	brge	.+8      	; 0x1000 <gameloop+0x10e>
     ff8:	88 27       	eor	r24, r24
     ffa:	99 27       	eor	r25, r25
     ffc:	82 1b       	sub	r24, r18
     ffe:	93 0b       	sbc	r25, r19
    1000:	05 97       	sbiw	r24, 0x05	; 5
    1002:	1c f0       	brlt	.+6      	; 0x100a <gameloop+0x118>
			last_y = y;
    1004:	63 2c       	mov	r6, r3
			send = true;
    1006:	ff 24       	eor	r15, r15
    1008:	f3 94       	inc	r15
		}
		if (abs(sl-last_sl) >= SLIDER_SEND_TRESHOLD){
    100a:	89 2d       	mov	r24, r9
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	85 19       	sub	r24, r5
    1010:	91 09       	sbc	r25, r1
    1012:	9c 01       	movw	r18, r24
    1014:	22 f4       	brpl	.+8      	; 0x101e <gameloop+0x12c>
    1016:	22 27       	eor	r18, r18
    1018:	33 27       	eor	r19, r19
    101a:	28 1b       	sub	r18, r24
    101c:	39 0b       	sbc	r19, r25
    101e:	2c 30       	cpi	r18, 0x0C	; 12
    1020:	31 05       	cpc	r19, r1
    1022:	1c f0       	brlt	.+6      	; 0x102a <gameloop+0x138>
			last_sl = sl;
    1024:	59 2c       	mov	r5, r9
			send = true;
    1026:	ff 24       	eor	r15, r15
    1028:	f3 94       	inc	r15
		}
		if (abs(sr-last_sr) >= SLIDER_SEND_TRESHOLD){
    102a:	88 2d       	mov	r24, r8
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	84 19       	sub	r24, r4
    1030:	91 09       	sbc	r25, r1
    1032:	9c 01       	movw	r18, r24
    1034:	22 f4       	brpl	.+8      	; 0x103e <gameloop+0x14c>
    1036:	22 27       	eor	r18, r18
    1038:	33 27       	eor	r19, r19
    103a:	28 1b       	sub	r18, r24
    103c:	39 0b       	sbc	r19, r25
    103e:	2c 30       	cpi	r18, 0x0C	; 12
    1040:	31 05       	cpc	r19, r1
    1042:	1c f0       	brlt	.+6      	; 0x104a <gameloop+0x158>
			last_sr = sr;
    1044:	48 2c       	mov	r4, r8
			send = true;
    1046:	ff 24       	eor	r15, r15
    1048:	f3 94       	inc	r15
		}
		if (last_btn != btn){
    104a:	2e 10       	cpse	r2, r14
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <gameloop+0x160>
    104e:	e2 2c       	mov	r14, r2
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <gameloop+0x164>
			last_btn = btn;
			send = true;
    1052:	ff 24       	eor	r15, r15
    1054:	f3 94       	inc	r15
		}
		
		if (send){
    1056:	ff 20       	and	r15, r15
    1058:	a9 f0       	breq	.+42     	; 0x1084 <gameloop+0x192>
			message_t msg = {CAN_ID_JOYSTICK, 5, .signed_data={last_x,last_y}};
    105a:	ce 01       	movw	r24, r28
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	2b e0       	ldi	r18, 0x0B	; 11
    1060:	fc 01       	movw	r30, r24
    1062:	11 92       	st	Z+, r1
    1064:	2a 95       	dec	r18
    1066:	e9 f7       	brne	.-6      	; 0x1062 <gameloop+0x170>
    1068:	23 e0       	ldi	r18, 0x03	; 3
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	3a 83       	std	Y+2, r19	; 0x02
    106e:	29 83       	std	Y+1, r18	; 0x01
    1070:	25 e0       	ldi	r18, 0x05	; 5
    1072:	2b 83       	std	Y+3, r18	; 0x03
    1074:	7c 82       	std	Y+4, r7	; 0x04
    1076:	6d 82       	std	Y+5, r6	; 0x05
			msg.unsigned_data[2] = last_sl;
    1078:	5e 82       	std	Y+6, r5	; 0x06
			msg.unsigned_data[3] = last_sr;
    107a:	4f 82       	std	Y+7, r4	; 0x07
			msg.unsigned_data[4] = last_btn;
    107c:	e8 86       	std	Y+8, r14	; 0x08
			CAN_send(&msg);
    107e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <CAN_send>
			
			send = false;
    1082:	f1 2c       	mov	r15, r1
		}
		
		ms += 16;
    1084:	40 91 55 03 	lds	r20, 0x0355	; 0x800355 <ms>
    1088:	50 91 56 03 	lds	r21, 0x0356	; 0x800356 <ms+0x1>
    108c:	40 5f       	subi	r20, 0xF0	; 240
    108e:	5f 4f       	sbci	r21, 0xFF	; 255
    1090:	50 93 56 03 	sts	0x0356, r21	; 0x800356 <ms+0x1>
    1094:	40 93 55 03 	sts	0x0355, r20	; 0x800355 <ms>
		if(ms>=1000){
    1098:	48 3e       	cpi	r20, 0xE8	; 232
    109a:	f3 e0       	ldi	r31, 0x03	; 3
    109c:	5f 07       	cpc	r21, r31
    109e:	30 f1       	brcs	.+76     	; 0x10ec <gameloop+0x1fa>
			ms = ms%1000;
    10a0:	9a 01       	movw	r18, r20
    10a2:	36 95       	lsr	r19
    10a4:	27 95       	ror	r18
    10a6:	36 95       	lsr	r19
    10a8:	27 95       	ror	r18
    10aa:	36 95       	lsr	r19
    10ac:	27 95       	ror	r18
    10ae:	a5 ec       	ldi	r26, 0xC5	; 197
    10b0:	b0 e2       	ldi	r27, 0x20	; 32
    10b2:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__umulhisi3>
    10b6:	92 95       	swap	r25
    10b8:	82 95       	swap	r24
    10ba:	8f 70       	andi	r24, 0x0F	; 15
    10bc:	89 27       	eor	r24, r25
    10be:	9f 70       	andi	r25, 0x0F	; 15
    10c0:	89 27       	eor	r24, r25
    10c2:	68 ee       	ldi	r22, 0xE8	; 232
    10c4:	73 e0       	ldi	r23, 0x03	; 3
    10c6:	86 9f       	mul	r24, r22
    10c8:	90 01       	movw	r18, r0
    10ca:	87 9f       	mul	r24, r23
    10cc:	30 0d       	add	r19, r0
    10ce:	96 9f       	mul	r25, r22
    10d0:	30 0d       	add	r19, r0
    10d2:	11 24       	eor	r1, r1
    10d4:	ca 01       	movw	r24, r20
    10d6:	82 1b       	sub	r24, r18
    10d8:	93 0b       	sbc	r25, r19
    10da:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <ms+0x1>
    10de:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <ms>
			seconds++;
    10e2:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <seconds>
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <seconds>
		} 
		if(seconds>=60){
    10ec:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <seconds>
    10f0:	8c 33       	cpi	r24, 0x3C	; 60
    10f2:	90 f0       	brcs	.+36     	; 0x1118 <gameloop+0x226>
			seconds = seconds%60;
    10f4:	99 e8       	ldi	r25, 0x89	; 137
    10f6:	89 9f       	mul	r24, r25
    10f8:	91 2d       	mov	r25, r1
    10fa:	11 24       	eor	r1, r1
    10fc:	92 95       	swap	r25
    10fe:	96 95       	lsr	r25
    1100:	97 70       	andi	r25, 0x07	; 7
    1102:	2c e3       	ldi	r18, 0x3C	; 60
    1104:	92 9f       	mul	r25, r18
    1106:	80 19       	sub	r24, r0
    1108:	11 24       	eor	r1, r1
    110a:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <seconds>
			minutes++;
    110e:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <minutes>
    1112:	8f 5f       	subi	r24, 0xFF	; 255
    1114:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <minutes>
		}
		
		OLED_clear_row(1);
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	0e 94 d7 05 	call	0xbae	; 0xbae <OLED_clear_row>
		OLED_goto_pos(1,0);
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	0e 94 99 05 	call	0xb32	; 0xb32 <OLED_goto_pos>
		fprintf(oled_output, "TIME: %2d:%2d", minutes, seconds);
    1126:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <seconds>
    112a:	1f 92       	push	r1
    112c:	8f 93       	push	r24
    112e:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <minutes>
    1132:	1f 92       	push	r1
    1134:	8f 93       	push	r24
    1136:	82 e8       	ldi	r24, 0x82	; 130
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	9f 93       	push	r25
    113c:	8f 93       	push	r24
    113e:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <oled_output+0x1>
    1142:	8f 93       	push	r24
    1144:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <oled_output>
    1148:	8f 93       	push	r24
    114a:	0e 94 b6 0c 	call	0x196c	; 0x196c <fprintf>
		
		OLED_clear_row(3);
    114e:	83 e0       	ldi	r24, 0x03	; 3
    1150:	0e 94 d7 05 	call	0xbae	; 0xbae <OLED_clear_row>
		OLED_clear_row(4);
    1154:	84 e0       	ldi	r24, 0x04	; 4
    1156:	0e 94 d7 05 	call	0xbae	; 0xbae <OLED_clear_row>
		OLED_goto_pos(3,0);
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	83 e0       	ldi	r24, 0x03	; 3
    115e:	0e 94 99 05 	call	0xb32	; 0xb32 <OLED_goto_pos>
		fprintf(oled_output, "%d %d S: %d %d BTN: %d", x, y, sl, sr, btn);
    1162:	11 27       	eor	r17, r17
    1164:	1f 93       	push	r17
    1166:	0f 93       	push	r16
    1168:	1f 92       	push	r1
    116a:	8f 92       	push	r8
    116c:	1f 92       	push	r1
    116e:	9f 92       	push	r9
    1170:	bf 92       	push	r11
    1172:	af 92       	push	r10
    1174:	df 92       	push	r13
    1176:	cf 92       	push	r12
    1178:	80 e9       	ldi	r24, 0x90	; 144
    117a:	92 e0       	ldi	r25, 0x02	; 2
    117c:	9f 93       	push	r25
    117e:	8f 93       	push	r24
    1180:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <oled_output+0x1>
    1184:	8f 93       	push	r24
    1186:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <oled_output>
    118a:	8f 93       	push	r24
    118c:	0e 94 b6 0c 	call	0x196c	; 0x196c <fprintf>
		
		if(lives<=0){
    1190:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lives>
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	81 11       	cpse	r24, r1
    11a0:	33 c0       	rjmp	.+102    	; 0x1208 <gameloop+0x316>
			gameover = true;
    11a2:	11 e0       	ldi	r17, 0x01	; 1
    11a4:	10 93 4b 03 	sts	0x034B, r17	; 0x80034b <gameover>
			lives = 3;
    11a8:	83 e0       	ldi	r24, 0x03	; 3
    11aa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lives>
			printf("GAMEOVER\n\r");
    11ae:	87 ea       	ldi	r24, 0xA7	; 167
    11b0:	92 e0       	ldi	r25, 0x02	; 2
    11b2:	9f 93       	push	r25
    11b4:	8f 93       	push	r24
    11b6:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <printf>
			OLED_clear();
    11ba:	0e 94 e5 05 	call	0xbca	; 0xbca <OLED_clear>
			OLED_goto_pos(3,0);
    11be:	60 e0       	ldi	r22, 0x00	; 0
    11c0:	83 e0       	ldi	r24, 0x03	; 3
    11c2:	0e 94 99 05 	call	0xb32	; 0xb32 <OLED_goto_pos>
			fprintf(oled_output, "GAMEOVER!");
    11c6:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <oled_output>
    11ca:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <oled_output+0x1>
    11ce:	49 e0       	ldi	r20, 0x09	; 9
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	82 eb       	ldi	r24, 0xB2	; 178
    11d8:	92 e0       	ldi	r25, 0x02	; 2
    11da:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <fwrite>
			message_t msg = {.id = CAN_ID_GAMEOVER, .length=1, .signed_data={0}};
    11de:	ce 01       	movw	r24, r28
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	2b e0       	ldi	r18, 0x0B	; 11
    11e4:	fc 01       	movw	r30, r24
    11e6:	11 92       	st	Z+, r1
    11e8:	2a 95       	dec	r18
    11ea:	e9 f7       	brne	.-6      	; 0x11e6 <gameloop+0x2f4>
    11ec:	1b 83       	std	Y+3, r17	; 0x03
			CAN_send(&msg);
    11ee:	0e 94 fd 01 	call	0x3fa	; 0x3fa <CAN_send>
    11f2:	ff ef       	ldi	r31, 0xFF	; 255
    11f4:	2f ef       	ldi	r18, 0xFF	; 255
    11f6:	3d e1       	ldi	r19, 0x1D	; 29
    11f8:	f1 50       	subi	r31, 0x01	; 1
    11fa:	20 40       	sbci	r18, 0x00	; 0
    11fc:	30 40       	sbci	r19, 0x00	; 0
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <gameloop+0x306>
    1200:	00 c0       	rjmp	.+0      	; 0x1202 <gameloop+0x310>
    1202:	00 00       	nop
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	2e 2c       	mov	r2, r14
	
	OLED_clear();
	OLED_goto_pos(0,0);
	fprintf(oled_output, "LIVES: %d", lives);
	
	while(1 && !gameover){
    120a:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <gameover>
    120e:	88 23       	and	r24, r24
    1210:	09 f4       	brne	.+2      	; 0x1214 <gameloop+0x322>
    1212:	b5 ce       	rjmp	.-662    	; 0xf7e <gameloop+0x8c>
			message_t msg = {.id = CAN_ID_GAMEOVER, .length=1, .signed_data={0}};
			CAN_send(&msg);
			_delay_ms(2000);
		}
	}
}
    1214:	2b 96       	adiw	r28, 0x0b	; 11
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	ff 90       	pop	r15
    122a:	ef 90       	pop	r14
    122c:	df 90       	pop	r13
    122e:	cf 90       	pop	r12
    1230:	bf 90       	pop	r11
    1232:	af 90       	pop	r10
    1234:	9f 90       	pop	r9
    1236:	8f 90       	pop	r8
    1238:	7f 90       	pop	r7
    123a:	6f 90       	pop	r6
    123c:	5f 90       	pop	r5
    123e:	4f 90       	pop	r4
    1240:	3f 90       	pop	r3
    1242:	2f 90       	pop	r2
    1244:	08 95       	ret

00001246 <new_game>:
void settings_mode2(){ settings(MODE_2); };
void settings_mode3(){ settings(MODE_3); };
void settings_mode4(){ settings(MODE_4); };
void settings_mode5(){ settings(MODE_5); };

void new_game(){
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	2b 97       	sbiw	r28, 0x0b	; 11
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
	gameover = false;
    125a:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <gameover>
	message_t msg = {.id = CAN_ID_NEW_GAME, .length=1, .signed_data={0}};
    125e:	ce 01       	movw	r24, r28
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	2b e0       	ldi	r18, 0x0B	; 11
    1264:	fc 01       	movw	r30, r24
    1266:	11 92       	st	Z+, r1
    1268:	2a 95       	dec	r18
    126a:	e9 f7       	brne	.-6      	; 0x1266 <new_game+0x20>
    126c:	21 e0       	ldi	r18, 0x01	; 1
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	3a 83       	std	Y+2, r19	; 0x02
    1272:	29 83       	std	Y+1, r18	; 0x01
    1274:	2b 83       	std	Y+3, r18	; 0x03
	CAN_send(&msg);
    1276:	0e 94 fd 01 	call	0x3fa	; 0x3fa <CAN_send>
	OLED_clear();
    127a:	0e 94 e5 05 	call	0xbca	; 0xbca <OLED_clear>
	OLED_goto_row(3);
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	0e 94 88 05 	call	0xb10	; 0xb10 <OLED_goto_row>
	fprintf(oled_output, "CALIBRATION...");
    1284:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <oled_output>
    1288:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <oled_output+0x1>
    128c:	4e e0       	ldi	r20, 0x0E	; 14
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	8c eb       	ldi	r24, 0xBC	; 188
    1296:	92 e0       	ldi	r25, 0x02	; 2
    1298:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <fwrite>
    129c:	ff ef       	ldi	r31, 0xFF	; 255
    129e:	2f ef       	ldi	r18, 0xFF	; 255
    12a0:	8c e2       	ldi	r24, 0x2C	; 44
    12a2:	f1 50       	subi	r31, 0x01	; 1
    12a4:	20 40       	sbci	r18, 0x00	; 0
    12a6:	80 40       	sbci	r24, 0x00	; 0
    12a8:	e1 f7       	brne	.-8      	; 0x12a2 <new_game+0x5c>
    12aa:	00 c0       	rjmp	.+0      	; 0x12ac <new_game+0x66>
    12ac:	00 c0       	rjmp	.+0      	; 0x12ae <new_game+0x68>
	_delay_ms(3000); //waiting that he calibrates
	gameloop();
    12ae:	0e 94 79 07 	call	0xef2	; 0xef2 <gameloop>
}
    12b2:	2b 96       	adiw	r28, 0x0b	; 11
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	08 95       	ret

000012c4 <__vector_1>:
			_delay_ms(2000);
		}
	}
}

ISR(INT0_vect) {
    12c4:	1f 92       	push	r1
    12c6:	0f 92       	push	r0
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	0f 92       	push	r0
    12cc:	11 24       	eor	r1, r1
    12ce:	2f 93       	push	r18
    12d0:	3f 93       	push	r19
    12d2:	4f 93       	push	r20
    12d4:	5f 93       	push	r21
    12d6:	6f 93       	push	r22
    12d8:	7f 93       	push	r23
    12da:	8f 93       	push	r24
    12dc:	9f 93       	push	r25
    12de:	af 93       	push	r26
    12e0:	bf 93       	push	r27
    12e2:	ef 93       	push	r30
    12e4:	ff 93       	push	r31
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	2b 97       	sbiw	r28, 0x0b	; 11
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	cd bf       	out	0x3d, r28	; 61
	message_t rec = CAN_receive();
    12f4:	ce 01       	movw	r24, r28
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	0e 94 30 02 	call	0x460	; 0x460 <CAN_receive>
	if (rec.id==CAN_ID_GOAL){
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	02 97       	sbiw	r24, 0x02	; 2
    1302:	09 f5       	brne	.+66     	; 0x1346 <__vector_1+0x82>
		OLED_clear_row(0);
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	0e 94 d7 05 	call	0xbae	; 0xbae <OLED_clear_row>
		OLED_goto_pos(0,0);
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	0e 94 99 05 	call	0xb32	; 0xb32 <OLED_goto_pos>
		fprintf(oled_output, "LIVES: %d", lives--);
    1312:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lives>
    1316:	9f ef       	ldi	r25, 0xFF	; 255
    1318:	98 0f       	add	r25, r24
    131a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <lives>
    131e:	1f 92       	push	r1
    1320:	8f 93       	push	r24
    1322:	88 e7       	ldi	r24, 0x78	; 120
    1324:	92 e0       	ldi	r25, 0x02	; 2
    1326:	9f 93       	push	r25
    1328:	8f 93       	push	r24
    132a:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <oled_output+0x1>
    132e:	8f 93       	push	r24
    1330:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <oled_output>
    1334:	8f 93       	push	r24
    1336:	0e 94 b6 0c 	call	0x196c	; 0x196c <fprintf>
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
	}
	
	//clear interrupt flag
	MCP_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	8c e2       	ldi	r24, 0x2C	; 44
    134c:	0e 94 ba 03 	call	0x774	; 0x774 <MCP_bit_modify>
}
    1350:	2b 96       	adiw	r28, 0x0b	; 11
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	ff 91       	pop	r31
    1362:	ef 91       	pop	r30
    1364:	bf 91       	pop	r27
    1366:	af 91       	pop	r26
    1368:	9f 91       	pop	r25
    136a:	8f 91       	pop	r24
    136c:	7f 91       	pop	r23
    136e:	6f 91       	pop	r22
    1370:	5f 91       	pop	r21
    1372:	4f 91       	pop	r20
    1374:	3f 91       	pop	r19
    1376:	2f 91       	pop	r18
    1378:	0f 90       	pop	r0
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	0f 90       	pop	r0
    137e:	1f 90       	pop	r1
    1380:	18 95       	reti

00001382 <test_SRAM>:
//UTILS -----------------------------------------------------------------------------

extern FILE *oled_output;

void test_SRAM(void)
{	
    1382:	ef 92       	push	r14
    1384:	ff 92       	push	r15
    1386:	0f 93       	push	r16
    1388:	1f 93       	push	r17
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
	XMEM_init();
    138e:	0e 94 0b 07 	call	0xe16	; 0xe16 <XMEM_init>
	UART_init(MYUBRR);
    1392:	8f e1       	ldi	r24, 0x1F	; 31
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 94 06 	call	0xd28	; 0xd28 <UART_init>
	volatile char *ext_ram = (char *) SRAM_BASE_ADDR; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n\r");
    139a:	8b ec       	ldi	r24, 0xCB	; 203
    139c:	92 e0       	ldi	r25, 0x02	; 2
    139e:	9f 93       	push	r25
    13a0:	8f 93       	push	r24
    13a2:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <printf>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
    13a6:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <rand>
    13aa:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
    13ac:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	c0 e0       	ldi	r28, 0x00	; 0
    13b6:	d0 e0       	ldi	r29, 0x00	; 0
{	
	XMEM_init();
	UART_init(MYUBRR);
	volatile char *ext_ram = (char *) SRAM_BASE_ADDR; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
    13b8:	00 e0       	ldi	r16, 0x00	; 0
    13ba:	10 e0       	ldi	r17, 0x00	; 0
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
    13bc:	0b c0       	rjmp	.+22     	; 0x13d4 <test_SRAM+0x52>
		uint8_t some_value = rand();
    13be:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <rand>
		ext_ram[i] = some_value;
    13c2:	fe 01       	movw	r30, r28
    13c4:	f8 5e       	subi	r31, 0xE8	; 232
    13c6:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
    13c8:	90 81       	ld	r25, Z
		if (retreived_value != some_value) {
    13ca:	89 17       	cp	r24, r25
    13cc:	11 f0       	breq	.+4      	; 0x13d2 <test_SRAM+0x50>
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			write_errors++;
    13ce:	0f 5f       	subi	r16, 0xFF	; 255
    13d0:	1f 4f       	sbci	r17, 0xFF	; 255
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
    13d2:	21 96       	adiw	r28, 0x01	; 1
    13d4:	c1 15       	cp	r28, r1
    13d6:	88 e0       	ldi	r24, 0x08	; 8
    13d8:	d8 07       	cpc	r29, r24
    13da:	88 f3       	brcs	.-30     	; 0x13be <test_SRAM+0x3c>
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
    13dc:	c7 01       	movw	r24, r14
    13de:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
    13e2:	c0 e0       	ldi	r28, 0x00	; 0
    13e4:	d0 e0       	ldi	r29, 0x00	; 0
	XMEM_init();
	UART_init(MYUBRR);
	volatile char *ext_ram = (char *) SRAM_BASE_ADDR; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
    13e6:	e1 2c       	mov	r14, r1
    13e8:	f1 2c       	mov	r15, r1
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
    13ea:	0b c0       	rjmp	.+22     	; 0x1402 <test_SRAM+0x80>
		uint8_t some_value = rand();
    13ec:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <rand>
		uint8_t retreived_value = ext_ram[i];
    13f0:	fe 01       	movw	r30, r28
    13f2:	f8 5e       	subi	r31, 0xE8	; 232
    13f4:	90 81       	ld	r25, Z
		if (retreived_value != some_value) {
    13f6:	89 17       	cp	r24, r25
    13f8:	19 f0       	breq	.+6      	; 0x1400 <test_SRAM+0x7e>
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			retrieval_errors++;
    13fa:	8f ef       	ldi	r24, 0xFF	; 255
    13fc:	e8 1a       	sub	r14, r24
    13fe:	f8 0a       	sbc	r15, r24
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
    1400:	21 96       	adiw	r28, 0x01	; 1
    1402:	c1 15       	cp	r28, r1
    1404:	88 e0       	ldi	r24, 0x08	; 8
    1406:	d8 07       	cpc	r29, r24
    1408:	88 f3       	brcs	.-30     	; 0x13ec <test_SRAM+0x6a>
		if (retreived_value != some_value) {
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase\n\r\n\r", write_errors, retrieval_errors);
    140a:	ff 92       	push	r15
    140c:	ef 92       	push	r14
    140e:	1f 93       	push	r17
    1410:	0f 93       	push	r16
    1412:	83 ee       	ldi	r24, 0xE3	; 227
    1414:	92 e0       	ldi	r25, 0x02	; 2
    1416:	9f 93       	push	r25
    1418:	8f 93       	push	r24
    141a:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <printf>
}
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	ff 90       	pop	r15
    1434:	ef 90       	pop	r14
    1436:	08 95       	ret

00001438 <test_OLED>:

void test_OLED(){
    1438:	0f 93       	push	r16
    143a:	1f 93       	push	r17
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
	UART_init(MYUBRR);
    1440:	8f e1       	ldi	r24, 0x1F	; 31
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 94 06 	call	0xd28	; 0xd28 <UART_init>
	XMEM_init();
    1448:	0e 94 0b 07 	call	0xe16	; 0xe16 <XMEM_init>
	OLED_init();
    144c:	0e 94 ff 05 	call	0xbfe	; 0xbfe <OLED_init>
	OLED_reset();
    1450:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_reset>
	
	for(int p=0; p<8; p++){
    1454:	00 e0       	ldi	r16, 0x00	; 0
    1456:	10 e0       	ldi	r17, 0x00	; 0
    1458:	17 c0       	rjmp	.+46     	; 0x1488 <test_OLED+0x50>
		OLED_goto_pos(p,p*8);
    145a:	60 2f       	mov	r22, r16
    145c:	66 0f       	add	r22, r22
    145e:	66 0f       	add	r22, r22
    1460:	66 0f       	add	r22, r22
    1462:	80 2f       	mov	r24, r16
    1464:	0e 94 99 05 	call	0xb32	; 0xb32 <OLED_goto_pos>
		for(int c=0; c<8; c++){
    1468:	c0 e0       	ldi	r28, 0x00	; 0
    146a:	d0 e0       	ldi	r29, 0x00	; 0
    146c:	08 c0       	rjmp	.+16     	; 0x147e <test_OLED+0x46>
			OLED_write_data(0xFF);
    146e:	8f ef       	ldi	r24, 0xFF	; 255
    1470:	0e 94 d4 05 	call	0xba8	; 0xba8 <OLED_write_data>
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	90 ef       	ldi	r25, 0xF0	; 240
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <test_OLED+0x40>
	OLED_init();
	OLED_reset();
	
	for(int p=0; p<8; p++){
		OLED_goto_pos(p,p*8);
		for(int c=0; c<8; c++){
    147c:	21 96       	adiw	r28, 0x01	; 1
    147e:	c8 30       	cpi	r28, 0x08	; 8
    1480:	d1 05       	cpc	r29, r1
    1482:	ac f3       	brlt	.-22     	; 0x146e <test_OLED+0x36>
	UART_init(MYUBRR);
	XMEM_init();
	OLED_init();
	OLED_reset();
	
	for(int p=0; p<8; p++){
    1484:	0f 5f       	subi	r16, 0xFF	; 255
    1486:	1f 4f       	sbci	r17, 0xFF	; 255
    1488:	08 30       	cpi	r16, 0x08	; 8
    148a:	11 05       	cpc	r17, r1
    148c:	34 f3       	brlt	.-52     	; 0x145a <test_OLED+0x22>
			OLED_write_data(0xFF);
			_delay_ms(50);
		}
	}
	
	OLED_goto_pos(7,128-8);
    148e:	68 e7       	ldi	r22, 0x78	; 120
    1490:	87 e0       	ldi	r24, 0x07	; 7
    1492:	0e 94 99 05 	call	0xb32	; 0xb32 <OLED_goto_pos>
	for(int c=0; c<8; c++)
    1496:	c0 e0       	ldi	r28, 0x00	; 0
    1498:	d0 e0       	ldi	r29, 0x00	; 0
    149a:	04 c0       	rjmp	.+8      	; 0x14a4 <test_OLED+0x6c>
	OLED_write_data(0xFF);
    149c:	8f ef       	ldi	r24, 0xFF	; 255
    149e:	0e 94 d4 05 	call	0xba8	; 0xba8 <OLED_write_data>
			_delay_ms(50);
		}
	}
	
	OLED_goto_pos(7,128-8);
	for(int c=0; c<8; c++)
    14a2:	21 96       	adiw	r28, 0x01	; 1
    14a4:	c8 30       	cpi	r28, 0x08	; 8
    14a6:	d1 05       	cpc	r29, r1
    14a8:	cc f3       	brlt	.-14     	; 0x149c <test_OLED+0x64>
    14aa:	9f ef       	ldi	r25, 0xFF	; 255
    14ac:	2f e7       	ldi	r18, 0x7F	; 127
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	91 50       	subi	r25, 0x01	; 1
    14b2:	20 40       	sbci	r18, 0x00	; 0
    14b4:	80 40       	sbci	r24, 0x00	; 0
    14b6:	e1 f7       	brne	.-8      	; 0x14b0 <test_OLED+0x78>
    14b8:	00 c0       	rjmp	.+0      	; 0x14ba <test_OLED+0x82>
    14ba:	00 c0       	rjmp	.+0      	; 0x14bc <test_OLED+0x84>
	OLED_write_data(0xFF);
	_delay_ms(100);
	
	OLED_goto_pos(0,128-8);
    14bc:	68 e7       	ldi	r22, 0x78	; 120
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	0e 94 99 05 	call	0xb32	; 0xb32 <OLED_goto_pos>
	for(int c=0; c<8; c++)
    14c4:	c0 e0       	ldi	r28, 0x00	; 0
    14c6:	d0 e0       	ldi	r29, 0x00	; 0
    14c8:	04 c0       	rjmp	.+8      	; 0x14d2 <test_OLED+0x9a>
	OLED_write_data(0xFF);
    14ca:	8f ef       	ldi	r24, 0xFF	; 255
    14cc:	0e 94 d4 05 	call	0xba8	; 0xba8 <OLED_write_data>
	for(int c=0; c<8; c++)
	OLED_write_data(0xFF);
	_delay_ms(100);
	
	OLED_goto_pos(0,128-8);
	for(int c=0; c<8; c++)
    14d0:	21 96       	adiw	r28, 0x01	; 1
    14d2:	c8 30       	cpi	r28, 0x08	; 8
    14d4:	d1 05       	cpc	r29, r1
    14d6:	cc f3       	brlt	.-14     	; 0x14ca <test_OLED+0x92>
    14d8:	9f ef       	ldi	r25, 0xFF	; 255
    14da:	2f e7       	ldi	r18, 0x7F	; 127
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	91 50       	subi	r25, 0x01	; 1
    14e0:	20 40       	sbci	r18, 0x00	; 0
    14e2:	80 40       	sbci	r24, 0x00	; 0
    14e4:	e1 f7       	brne	.-8      	; 0x14de <test_OLED+0xa6>
    14e6:	00 c0       	rjmp	.+0      	; 0x14e8 <test_OLED+0xb0>
    14e8:	00 c0       	rjmp	.+0      	; 0x14ea <test_OLED+0xb2>
	OLED_write_data(0xFF);
	_delay_ms(100);
	
	for(uint8_t i=0; i<4; i++){
    14ea:	c0 e0       	ldi	r28, 0x00	; 0
    14ec:	0c c0       	rjmp	.+24     	; 0x1506 <test_OLED+0xce>
    14ee:	9f ef       	ldi	r25, 0xFF	; 255
    14f0:	2f ef       	ldi	r18, 0xFF	; 255
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	91 50       	subi	r25, 0x01	; 1
    14f6:	20 40       	sbci	r18, 0x00	; 0
    14f8:	80 40       	sbci	r24, 0x00	; 0
    14fa:	e1 f7       	brne	.-8      	; 0x14f4 <test_OLED+0xbc>
    14fc:	00 c0       	rjmp	.+0      	; 0x14fe <test_OLED+0xc6>
    14fe:	00 c0       	rjmp	.+0      	; 0x1500 <test_OLED+0xc8>
		_delay_ms(200);
		OLED_invert();
    1500:	0e 94 a2 05 	call	0xb44	; 0xb44 <OLED_invert>
	OLED_goto_pos(0,128-8);
	for(int c=0; c<8; c++)
	OLED_write_data(0xFF);
	_delay_ms(100);
	
	for(uint8_t i=0; i<4; i++){
    1504:	cf 5f       	subi	r28, 0xFF	; 255
    1506:	c4 30       	cpi	r28, 0x04	; 4
    1508:	90 f3       	brcs	.-28     	; 0x14ee <test_OLED+0xb6>
		_delay_ms(200);
		OLED_invert();
	}
	
	OLED_reset();
    150a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_reset>
	fprintf(oled_output, "prova ...");
    150e:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <oled_output>
    1512:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <oled_output+0x1>
    1516:	49 e0       	ldi	r20, 0x09	; 9
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	61 e0       	ldi	r22, 0x01	; 1
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	80 e4       	ldi	r24, 0x40	; 64
    1520:	93 e0       	ldi	r25, 0x03	; 3
    1522:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <fwrite>
    1526:	9f ef       	ldi	r25, 0xFF	; 255
    1528:	2f ef       	ldi	r18, 0xFF	; 255
    152a:	8e e0       	ldi	r24, 0x0E	; 14
    152c:	91 50       	subi	r25, 0x01	; 1
    152e:	20 40       	sbci	r18, 0x00	; 0
    1530:	80 40       	sbci	r24, 0x00	; 0
    1532:	e1 f7       	brne	.-8      	; 0x152c <test_OLED+0xf4>
    1534:	00 c0       	rjmp	.+0      	; 0x1536 <test_OLED+0xfe>
    1536:	00 00       	nop
	_delay_ms(1000);
	OLED_reset();
    1538:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_reset>
	
	OLED_reset();
    153c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_reset>
	char value = ' ';
    1540:	80 e2       	ldi	r24, 0x20	; 32
	while(value < ' ' + 95){
    1542:	0e c0       	rjmp	.+28     	; 0x1560 <test_OLED+0x128>
		fprintf(oled_output, "%c",value++);
    1544:	c1 e0       	ldi	r28, 0x01	; 1
    1546:	c8 0f       	add	r28, r24
    1548:	60 91 50 03 	lds	r22, 0x0350	; 0x800350 <oled_output>
    154c:	70 91 51 03 	lds	r23, 0x0351	; 0x800351 <oled_output+0x1>
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 ef       	ldi	r25, 0xF0	; 240
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <test_OLED+0x122>
    155e:	8c 2f       	mov	r24, r28
	_delay_ms(1000);
	OLED_reset();
	
	OLED_reset();
	char value = ' ';
	while(value < ' ' + 95){
    1560:	8f 37       	cpi	r24, 0x7F	; 127
    1562:	80 f3       	brcs	.-32     	; 0x1544 <test_OLED+0x10c>
		fprintf(oled_output, "%c",value++);
		_delay_ms(50);
	}
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	08 95       	ret

0000156e <__divmodhi4>:
    156e:	97 fb       	bst	r25, 7
    1570:	07 2e       	mov	r0, r23
    1572:	16 f4       	brtc	.+4      	; 0x1578 <__divmodhi4+0xa>
    1574:	00 94       	com	r0
    1576:	07 d0       	rcall	.+14     	; 0x1586 <__divmodhi4_neg1>
    1578:	77 fd       	sbrc	r23, 7
    157a:	09 d0       	rcall	.+18     	; 0x158e <__divmodhi4_neg2>
    157c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__udivmodhi4>
    1580:	07 fc       	sbrc	r0, 7
    1582:	05 d0       	rcall	.+10     	; 0x158e <__divmodhi4_neg2>
    1584:	3e f4       	brtc	.+14     	; 0x1594 <__divmodhi4_exit>

00001586 <__divmodhi4_neg1>:
    1586:	90 95       	com	r25
    1588:	81 95       	neg	r24
    158a:	9f 4f       	sbci	r25, 0xFF	; 255
    158c:	08 95       	ret

0000158e <__divmodhi4_neg2>:
    158e:	70 95       	com	r23
    1590:	61 95       	neg	r22
    1592:	7f 4f       	sbci	r23, 0xFF	; 255

00001594 <__divmodhi4_exit>:
    1594:	08 95       	ret

00001596 <__umulhisi3>:
    1596:	a2 9f       	mul	r26, r18
    1598:	b0 01       	movw	r22, r0
    159a:	b3 9f       	mul	r27, r19
    159c:	c0 01       	movw	r24, r0
    159e:	a3 9f       	mul	r26, r19
    15a0:	70 0d       	add	r23, r0
    15a2:	81 1d       	adc	r24, r1
    15a4:	11 24       	eor	r1, r1
    15a6:	91 1d       	adc	r25, r1
    15a8:	b2 9f       	mul	r27, r18
    15aa:	70 0d       	add	r23, r0
    15ac:	81 1d       	adc	r24, r1
    15ae:	11 24       	eor	r1, r1
    15b0:	91 1d       	adc	r25, r1
    15b2:	08 95       	ret

000015b4 <__udivmodhi4>:
    15b4:	aa 1b       	sub	r26, r26
    15b6:	bb 1b       	sub	r27, r27
    15b8:	51 e1       	ldi	r21, 0x11	; 17
    15ba:	07 c0       	rjmp	.+14     	; 0x15ca <__udivmodhi4_ep>

000015bc <__udivmodhi4_loop>:
    15bc:	aa 1f       	adc	r26, r26
    15be:	bb 1f       	adc	r27, r27
    15c0:	a6 17       	cp	r26, r22
    15c2:	b7 07       	cpc	r27, r23
    15c4:	10 f0       	brcs	.+4      	; 0x15ca <__udivmodhi4_ep>
    15c6:	a6 1b       	sub	r26, r22
    15c8:	b7 0b       	sbc	r27, r23

000015ca <__udivmodhi4_ep>:
    15ca:	88 1f       	adc	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	5a 95       	dec	r21
    15d0:	a9 f7       	brne	.-22     	; 0x15bc <__udivmodhi4_loop>
    15d2:	80 95       	com	r24
    15d4:	90 95       	com	r25
    15d6:	bc 01       	movw	r22, r24
    15d8:	cd 01       	movw	r24, r26
    15da:	08 95       	ret

000015dc <malloc>:
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	82 30       	cpi	r24, 0x02	; 2
    15e6:	91 05       	cpc	r25, r1
    15e8:	10 f4       	brcc	.+4      	; 0x15ee <malloc+0x12>
    15ea:	82 e0       	ldi	r24, 0x02	; 2
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	e0 91 5b 03 	lds	r30, 0x035B	; 0x80035b <__flp>
    15f2:	f0 91 5c 03 	lds	r31, 0x035C	; 0x80035c <__flp+0x1>
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	a0 e0       	ldi	r26, 0x00	; 0
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	30 97       	sbiw	r30, 0x00	; 0
    1600:	19 f1       	breq	.+70     	; 0x1648 <malloc+0x6c>
    1602:	40 81       	ld	r20, Z
    1604:	51 81       	ldd	r21, Z+1	; 0x01
    1606:	02 81       	ldd	r16, Z+2	; 0x02
    1608:	13 81       	ldd	r17, Z+3	; 0x03
    160a:	48 17       	cp	r20, r24
    160c:	59 07       	cpc	r21, r25
    160e:	c8 f0       	brcs	.+50     	; 0x1642 <malloc+0x66>
    1610:	84 17       	cp	r24, r20
    1612:	95 07       	cpc	r25, r21
    1614:	69 f4       	brne	.+26     	; 0x1630 <malloc+0x54>
    1616:	10 97       	sbiw	r26, 0x00	; 0
    1618:	31 f0       	breq	.+12     	; 0x1626 <malloc+0x4a>
    161a:	12 96       	adiw	r26, 0x02	; 2
    161c:	0c 93       	st	X, r16
    161e:	12 97       	sbiw	r26, 0x02	; 2
    1620:	13 96       	adiw	r26, 0x03	; 3
    1622:	1c 93       	st	X, r17
    1624:	27 c0       	rjmp	.+78     	; 0x1674 <malloc+0x98>
    1626:	00 93 5b 03 	sts	0x035B, r16	; 0x80035b <__flp>
    162a:	10 93 5c 03 	sts	0x035C, r17	; 0x80035c <__flp+0x1>
    162e:	22 c0       	rjmp	.+68     	; 0x1674 <malloc+0x98>
    1630:	21 15       	cp	r18, r1
    1632:	31 05       	cpc	r19, r1
    1634:	19 f0       	breq	.+6      	; 0x163c <malloc+0x60>
    1636:	42 17       	cp	r20, r18
    1638:	53 07       	cpc	r21, r19
    163a:	18 f4       	brcc	.+6      	; 0x1642 <malloc+0x66>
    163c:	9a 01       	movw	r18, r20
    163e:	bd 01       	movw	r22, r26
    1640:	ef 01       	movw	r28, r30
    1642:	df 01       	movw	r26, r30
    1644:	f8 01       	movw	r30, r16
    1646:	db cf       	rjmp	.-74     	; 0x15fe <malloc+0x22>
    1648:	21 15       	cp	r18, r1
    164a:	31 05       	cpc	r19, r1
    164c:	f9 f0       	breq	.+62     	; 0x168c <malloc+0xb0>
    164e:	28 1b       	sub	r18, r24
    1650:	39 0b       	sbc	r19, r25
    1652:	24 30       	cpi	r18, 0x04	; 4
    1654:	31 05       	cpc	r19, r1
    1656:	80 f4       	brcc	.+32     	; 0x1678 <malloc+0x9c>
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	9b 81       	ldd	r25, Y+3	; 0x03
    165c:	61 15       	cp	r22, r1
    165e:	71 05       	cpc	r23, r1
    1660:	21 f0       	breq	.+8      	; 0x166a <malloc+0x8e>
    1662:	fb 01       	movw	r30, r22
    1664:	93 83       	std	Z+3, r25	; 0x03
    1666:	82 83       	std	Z+2, r24	; 0x02
    1668:	04 c0       	rjmp	.+8      	; 0x1672 <malloc+0x96>
    166a:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <__flp+0x1>
    166e:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <__flp>
    1672:	fe 01       	movw	r30, r28
    1674:	32 96       	adiw	r30, 0x02	; 2
    1676:	44 c0       	rjmp	.+136    	; 0x1700 <malloc+0x124>
    1678:	fe 01       	movw	r30, r28
    167a:	e2 0f       	add	r30, r18
    167c:	f3 1f       	adc	r31, r19
    167e:	81 93       	st	Z+, r24
    1680:	91 93       	st	Z+, r25
    1682:	22 50       	subi	r18, 0x02	; 2
    1684:	31 09       	sbc	r19, r1
    1686:	39 83       	std	Y+1, r19	; 0x01
    1688:	28 83       	st	Y, r18
    168a:	3a c0       	rjmp	.+116    	; 0x1700 <malloc+0x124>
    168c:	20 91 59 03 	lds	r18, 0x0359	; 0x800359 <__brkval>
    1690:	30 91 5a 03 	lds	r19, 0x035A	; 0x80035a <__brkval+0x1>
    1694:	23 2b       	or	r18, r19
    1696:	41 f4       	brne	.+16     	; 0x16a8 <malloc+0xcc>
    1698:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    169c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    16a0:	30 93 5a 03 	sts	0x035A, r19	; 0x80035a <__brkval+0x1>
    16a4:	20 93 59 03 	sts	0x0359, r18	; 0x800359 <__brkval>
    16a8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    16ac:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    16b0:	21 15       	cp	r18, r1
    16b2:	31 05       	cpc	r19, r1
    16b4:	41 f4       	brne	.+16     	; 0x16c6 <malloc+0xea>
    16b6:	2d b7       	in	r18, 0x3d	; 61
    16b8:	3e b7       	in	r19, 0x3e	; 62
    16ba:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    16be:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    16c2:	24 1b       	sub	r18, r20
    16c4:	35 0b       	sbc	r19, r21
    16c6:	e0 91 59 03 	lds	r30, 0x0359	; 0x800359 <__brkval>
    16ca:	f0 91 5a 03 	lds	r31, 0x035A	; 0x80035a <__brkval+0x1>
    16ce:	e2 17       	cp	r30, r18
    16d0:	f3 07       	cpc	r31, r19
    16d2:	a0 f4       	brcc	.+40     	; 0x16fc <malloc+0x120>
    16d4:	2e 1b       	sub	r18, r30
    16d6:	3f 0b       	sbc	r19, r31
    16d8:	28 17       	cp	r18, r24
    16da:	39 07       	cpc	r19, r25
    16dc:	78 f0       	brcs	.+30     	; 0x16fc <malloc+0x120>
    16de:	ac 01       	movw	r20, r24
    16e0:	4e 5f       	subi	r20, 0xFE	; 254
    16e2:	5f 4f       	sbci	r21, 0xFF	; 255
    16e4:	24 17       	cp	r18, r20
    16e6:	35 07       	cpc	r19, r21
    16e8:	48 f0       	brcs	.+18     	; 0x16fc <malloc+0x120>
    16ea:	4e 0f       	add	r20, r30
    16ec:	5f 1f       	adc	r21, r31
    16ee:	50 93 5a 03 	sts	0x035A, r21	; 0x80035a <__brkval+0x1>
    16f2:	40 93 59 03 	sts	0x0359, r20	; 0x800359 <__brkval>
    16f6:	81 93       	st	Z+, r24
    16f8:	91 93       	st	Z+, r25
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <malloc+0x124>
    16fc:	e0 e0       	ldi	r30, 0x00	; 0
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	cf 01       	movw	r24, r30
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	08 95       	ret

0000170c <free>:
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	09 f4       	brne	.+2      	; 0x1716 <free+0xa>
    1714:	81 c0       	rjmp	.+258    	; 0x1818 <free+0x10c>
    1716:	fc 01       	movw	r30, r24
    1718:	32 97       	sbiw	r30, 0x02	; 2
    171a:	13 82       	std	Z+3, r1	; 0x03
    171c:	12 82       	std	Z+2, r1	; 0x02
    171e:	a0 91 5b 03 	lds	r26, 0x035B	; 0x80035b <__flp>
    1722:	b0 91 5c 03 	lds	r27, 0x035C	; 0x80035c <__flp+0x1>
    1726:	10 97       	sbiw	r26, 0x00	; 0
    1728:	81 f4       	brne	.+32     	; 0x174a <free+0x3e>
    172a:	20 81       	ld	r18, Z
    172c:	31 81       	ldd	r19, Z+1	; 0x01
    172e:	82 0f       	add	r24, r18
    1730:	93 1f       	adc	r25, r19
    1732:	20 91 59 03 	lds	r18, 0x0359	; 0x800359 <__brkval>
    1736:	30 91 5a 03 	lds	r19, 0x035A	; 0x80035a <__brkval+0x1>
    173a:	28 17       	cp	r18, r24
    173c:	39 07       	cpc	r19, r25
    173e:	51 f5       	brne	.+84     	; 0x1794 <free+0x88>
    1740:	f0 93 5a 03 	sts	0x035A, r31	; 0x80035a <__brkval+0x1>
    1744:	e0 93 59 03 	sts	0x0359, r30	; 0x800359 <__brkval>
    1748:	67 c0       	rjmp	.+206    	; 0x1818 <free+0x10c>
    174a:	ed 01       	movw	r28, r26
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	ce 17       	cp	r28, r30
    1752:	df 07       	cpc	r29, r31
    1754:	40 f4       	brcc	.+16     	; 0x1766 <free+0x5a>
    1756:	4a 81       	ldd	r20, Y+2	; 0x02
    1758:	5b 81       	ldd	r21, Y+3	; 0x03
    175a:	9e 01       	movw	r18, r28
    175c:	41 15       	cp	r20, r1
    175e:	51 05       	cpc	r21, r1
    1760:	f1 f0       	breq	.+60     	; 0x179e <free+0x92>
    1762:	ea 01       	movw	r28, r20
    1764:	f5 cf       	rjmp	.-22     	; 0x1750 <free+0x44>
    1766:	d3 83       	std	Z+3, r29	; 0x03
    1768:	c2 83       	std	Z+2, r28	; 0x02
    176a:	40 81       	ld	r20, Z
    176c:	51 81       	ldd	r21, Z+1	; 0x01
    176e:	84 0f       	add	r24, r20
    1770:	95 1f       	adc	r25, r21
    1772:	c8 17       	cp	r28, r24
    1774:	d9 07       	cpc	r29, r25
    1776:	59 f4       	brne	.+22     	; 0x178e <free+0x82>
    1778:	88 81       	ld	r24, Y
    177a:	99 81       	ldd	r25, Y+1	; 0x01
    177c:	84 0f       	add	r24, r20
    177e:	95 1f       	adc	r25, r21
    1780:	02 96       	adiw	r24, 0x02	; 2
    1782:	91 83       	std	Z+1, r25	; 0x01
    1784:	80 83       	st	Z, r24
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	9b 81       	ldd	r25, Y+3	; 0x03
    178a:	93 83       	std	Z+3, r25	; 0x03
    178c:	82 83       	std	Z+2, r24	; 0x02
    178e:	21 15       	cp	r18, r1
    1790:	31 05       	cpc	r19, r1
    1792:	29 f4       	brne	.+10     	; 0x179e <free+0x92>
    1794:	f0 93 5c 03 	sts	0x035C, r31	; 0x80035c <__flp+0x1>
    1798:	e0 93 5b 03 	sts	0x035B, r30	; 0x80035b <__flp>
    179c:	3d c0       	rjmp	.+122    	; 0x1818 <free+0x10c>
    179e:	e9 01       	movw	r28, r18
    17a0:	fb 83       	std	Y+3, r31	; 0x03
    17a2:	ea 83       	std	Y+2, r30	; 0x02
    17a4:	49 91       	ld	r20, Y+
    17a6:	59 91       	ld	r21, Y+
    17a8:	c4 0f       	add	r28, r20
    17aa:	d5 1f       	adc	r29, r21
    17ac:	ec 17       	cp	r30, r28
    17ae:	fd 07       	cpc	r31, r29
    17b0:	61 f4       	brne	.+24     	; 0x17ca <free+0xbe>
    17b2:	80 81       	ld	r24, Z
    17b4:	91 81       	ldd	r25, Z+1	; 0x01
    17b6:	84 0f       	add	r24, r20
    17b8:	95 1f       	adc	r25, r21
    17ba:	02 96       	adiw	r24, 0x02	; 2
    17bc:	e9 01       	movw	r28, r18
    17be:	99 83       	std	Y+1, r25	; 0x01
    17c0:	88 83       	st	Y, r24
    17c2:	82 81       	ldd	r24, Z+2	; 0x02
    17c4:	93 81       	ldd	r25, Z+3	; 0x03
    17c6:	9b 83       	std	Y+3, r25	; 0x03
    17c8:	8a 83       	std	Y+2, r24	; 0x02
    17ca:	e0 e0       	ldi	r30, 0x00	; 0
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	12 96       	adiw	r26, 0x02	; 2
    17d0:	8d 91       	ld	r24, X+
    17d2:	9c 91       	ld	r25, X
    17d4:	13 97       	sbiw	r26, 0x03	; 3
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	19 f0       	breq	.+6      	; 0x17e0 <free+0xd4>
    17da:	fd 01       	movw	r30, r26
    17dc:	dc 01       	movw	r26, r24
    17de:	f7 cf       	rjmp	.-18     	; 0x17ce <free+0xc2>
    17e0:	8d 91       	ld	r24, X+
    17e2:	9c 91       	ld	r25, X
    17e4:	11 97       	sbiw	r26, 0x01	; 1
    17e6:	9d 01       	movw	r18, r26
    17e8:	2e 5f       	subi	r18, 0xFE	; 254
    17ea:	3f 4f       	sbci	r19, 0xFF	; 255
    17ec:	82 0f       	add	r24, r18
    17ee:	93 1f       	adc	r25, r19
    17f0:	20 91 59 03 	lds	r18, 0x0359	; 0x800359 <__brkval>
    17f4:	30 91 5a 03 	lds	r19, 0x035A	; 0x80035a <__brkval+0x1>
    17f8:	28 17       	cp	r18, r24
    17fa:	39 07       	cpc	r19, r25
    17fc:	69 f4       	brne	.+26     	; 0x1818 <free+0x10c>
    17fe:	30 97       	sbiw	r30, 0x00	; 0
    1800:	29 f4       	brne	.+10     	; 0x180c <free+0x100>
    1802:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <__flp+0x1>
    1806:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <__flp>
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <free+0x104>
    180c:	13 82       	std	Z+3, r1	; 0x03
    180e:	12 82       	std	Z+2, r1	; 0x02
    1810:	b0 93 5a 03 	sts	0x035A, r27	; 0x80035a <__brkval+0x1>
    1814:	a0 93 59 03 	sts	0x0359, r26	; 0x800359 <__brkval>
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	08 95       	ret

0000181e <do_rand>:
    181e:	8f 92       	push	r8
    1820:	9f 92       	push	r9
    1822:	af 92       	push	r10
    1824:	bf 92       	push	r11
    1826:	cf 92       	push	r12
    1828:	df 92       	push	r13
    182a:	ef 92       	push	r14
    182c:	ff 92       	push	r15
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	ec 01       	movw	r28, r24
    1834:	68 81       	ld	r22, Y
    1836:	79 81       	ldd	r23, Y+1	; 0x01
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	9b 81       	ldd	r25, Y+3	; 0x03
    183c:	61 15       	cp	r22, r1
    183e:	71 05       	cpc	r23, r1
    1840:	81 05       	cpc	r24, r1
    1842:	91 05       	cpc	r25, r1
    1844:	21 f4       	brne	.+8      	; 0x184e <do_rand+0x30>
    1846:	64 e2       	ldi	r22, 0x24	; 36
    1848:	79 ed       	ldi	r23, 0xD9	; 217
    184a:	8b e5       	ldi	r24, 0x5B	; 91
    184c:	97 e0       	ldi	r25, 0x07	; 7
    184e:	2d e1       	ldi	r18, 0x1D	; 29
    1850:	33 ef       	ldi	r19, 0xF3	; 243
    1852:	41 e0       	ldi	r20, 0x01	; 1
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__divmodsi4>
    185a:	49 01       	movw	r8, r18
    185c:	5a 01       	movw	r10, r20
    185e:	9b 01       	movw	r18, r22
    1860:	ac 01       	movw	r20, r24
    1862:	a7 ea       	ldi	r26, 0xA7	; 167
    1864:	b1 e4       	ldi	r27, 0x41	; 65
    1866:	0e 94 0f 10 	call	0x201e	; 0x201e <__muluhisi3>
    186a:	6b 01       	movw	r12, r22
    186c:	7c 01       	movw	r14, r24
    186e:	ac ee       	ldi	r26, 0xEC	; 236
    1870:	b4 ef       	ldi	r27, 0xF4	; 244
    1872:	a5 01       	movw	r20, r10
    1874:	94 01       	movw	r18, r8
    1876:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulohisi3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	8c 0d       	add	r24, r12
    1880:	9d 1d       	adc	r25, r13
    1882:	ae 1d       	adc	r26, r14
    1884:	bf 1d       	adc	r27, r15
    1886:	b7 ff       	sbrs	r27, 7
    1888:	03 c0       	rjmp	.+6      	; 0x1890 <do_rand+0x72>
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	a1 09       	sbc	r26, r1
    188e:	b0 48       	sbci	r27, 0x80	; 128
    1890:	88 83       	st	Y, r24
    1892:	99 83       	std	Y+1, r25	; 0x01
    1894:	aa 83       	std	Y+2, r26	; 0x02
    1896:	bb 83       	std	Y+3, r27	; 0x03
    1898:	9f 77       	andi	r25, 0x7F	; 127
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	df 90       	pop	r13
    18a4:	cf 90       	pop	r12
    18a6:	bf 90       	pop	r11
    18a8:	af 90       	pop	r10
    18aa:	9f 90       	pop	r9
    18ac:	8f 90       	pop	r8
    18ae:	08 95       	ret

000018b0 <rand_r>:
    18b0:	0e 94 0f 0c 	call	0x181e	; 0x181e <do_rand>
    18b4:	08 95       	ret

000018b6 <rand>:
    18b6:	86 e0       	ldi	r24, 0x06	; 6
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	0e 94 0f 0c 	call	0x181e	; 0x181e <do_rand>
    18be:	08 95       	ret

000018c0 <srand>:
    18c0:	a0 e0       	ldi	r26, 0x00	; 0
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    18c8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    18cc:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    18d0:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    18d4:	08 95       	ret

000018d6 <fdevopen>:
    18d6:	0f 93       	push	r16
    18d8:	1f 93       	push	r17
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	31 f4       	brne	.+12     	; 0x18ee <fdevopen+0x18>
    18e2:	61 15       	cp	r22, r1
    18e4:	71 05       	cpc	r23, r1
    18e6:	19 f4       	brne	.+6      	; 0x18ee <fdevopen+0x18>
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	3a c0       	rjmp	.+116    	; 0x1962 <fdevopen+0x8c>
    18ee:	8b 01       	movw	r16, r22
    18f0:	ec 01       	movw	r28, r24
    18f2:	6e e0       	ldi	r22, 0x0E	; 14
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <calloc>
    18fe:	fc 01       	movw	r30, r24
    1900:	89 2b       	or	r24, r25
    1902:	91 f3       	breq	.-28     	; 0x18e8 <fdevopen+0x12>
    1904:	80 e8       	ldi	r24, 0x80	; 128
    1906:	83 83       	std	Z+3, r24	; 0x03
    1908:	01 15       	cp	r16, r1
    190a:	11 05       	cpc	r17, r1
    190c:	71 f0       	breq	.+28     	; 0x192a <fdevopen+0x54>
    190e:	13 87       	std	Z+11, r17	; 0x0b
    1910:	02 87       	std	Z+10, r16	; 0x0a
    1912:	81 e8       	ldi	r24, 0x81	; 129
    1914:	83 83       	std	Z+3, r24	; 0x03
    1916:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <__iob>
    191a:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <__iob+0x1>
    191e:	89 2b       	or	r24, r25
    1920:	21 f4       	brne	.+8      	; 0x192a <fdevopen+0x54>
    1922:	f0 93 5e 03 	sts	0x035E, r31	; 0x80035e <__iob+0x1>
    1926:	e0 93 5d 03 	sts	0x035D, r30	; 0x80035d <__iob>
    192a:	20 97       	sbiw	r28, 0x00	; 0
    192c:	c9 f0       	breq	.+50     	; 0x1960 <fdevopen+0x8a>
    192e:	d1 87       	std	Z+9, r29	; 0x09
    1930:	c0 87       	std	Z+8, r28	; 0x08
    1932:	83 81       	ldd	r24, Z+3	; 0x03
    1934:	82 60       	ori	r24, 0x02	; 2
    1936:	83 83       	std	Z+3, r24	; 0x03
    1938:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <__iob+0x2>
    193c:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <__iob+0x3>
    1940:	89 2b       	or	r24, r25
    1942:	71 f4       	brne	.+28     	; 0x1960 <fdevopen+0x8a>
    1944:	f0 93 60 03 	sts	0x0360, r31	; 0x800360 <__iob+0x3>
    1948:	e0 93 5f 03 	sts	0x035F, r30	; 0x80035f <__iob+0x2>
    194c:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <__iob+0x4>
    1950:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <__iob+0x5>
    1954:	89 2b       	or	r24, r25
    1956:	21 f4       	brne	.+8      	; 0x1960 <fdevopen+0x8a>
    1958:	f0 93 62 03 	sts	0x0362, r31	; 0x800362 <__iob+0x5>
    195c:	e0 93 61 03 	sts	0x0361, r30	; 0x800361 <__iob+0x4>
    1960:	cf 01       	movw	r24, r30
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	08 95       	ret

0000196c <fprintf>:
    196c:	a0 e0       	ldi	r26, 0x00	; 0
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	ec eb       	ldi	r30, 0xBC	; 188
    1972:	fc e0       	ldi	r31, 0x0C	; 12
    1974:	0c 94 32 10 	jmp	0x2064	; 0x2064 <__prologue_saves__+0x20>
    1978:	ae 01       	movw	r20, r28
    197a:	47 5f       	subi	r20, 0xF7	; 247
    197c:	5f 4f       	sbci	r21, 0xFF	; 255
    197e:	6f 81       	ldd	r22, Y+7	; 0x07
    1980:	78 85       	ldd	r23, Y+8	; 0x08
    1982:	8d 81       	ldd	r24, Y+5	; 0x05
    1984:	9e 81       	ldd	r25, Y+6	; 0x06
    1986:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <vfprintf>
    198a:	e2 e0       	ldi	r30, 0x02	; 2
    198c:	0c 94 4e 10 	jmp	0x209c	; 0x209c <__epilogue_restores__+0x20>

00001990 <fputc>:
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	fb 01       	movw	r30, r22
    199a:	23 81       	ldd	r18, Z+3	; 0x03
    199c:	21 fd       	sbrc	r18, 1
    199e:	03 c0       	rjmp	.+6      	; 0x19a6 <fputc+0x16>
    19a0:	8f ef       	ldi	r24, 0xFF	; 255
    19a2:	9f ef       	ldi	r25, 0xFF	; 255
    19a4:	2c c0       	rjmp	.+88     	; 0x19fe <fputc+0x6e>
    19a6:	22 ff       	sbrs	r18, 2
    19a8:	16 c0       	rjmp	.+44     	; 0x19d6 <fputc+0x46>
    19aa:	46 81       	ldd	r20, Z+6	; 0x06
    19ac:	57 81       	ldd	r21, Z+7	; 0x07
    19ae:	24 81       	ldd	r18, Z+4	; 0x04
    19b0:	35 81       	ldd	r19, Z+5	; 0x05
    19b2:	42 17       	cp	r20, r18
    19b4:	53 07       	cpc	r21, r19
    19b6:	44 f4       	brge	.+16     	; 0x19c8 <fputc+0x38>
    19b8:	a0 81       	ld	r26, Z
    19ba:	b1 81       	ldd	r27, Z+1	; 0x01
    19bc:	9d 01       	movw	r18, r26
    19be:	2f 5f       	subi	r18, 0xFF	; 255
    19c0:	3f 4f       	sbci	r19, 0xFF	; 255
    19c2:	31 83       	std	Z+1, r19	; 0x01
    19c4:	20 83       	st	Z, r18
    19c6:	8c 93       	st	X, r24
    19c8:	26 81       	ldd	r18, Z+6	; 0x06
    19ca:	37 81       	ldd	r19, Z+7	; 0x07
    19cc:	2f 5f       	subi	r18, 0xFF	; 255
    19ce:	3f 4f       	sbci	r19, 0xFF	; 255
    19d0:	37 83       	std	Z+7, r19	; 0x07
    19d2:	26 83       	std	Z+6, r18	; 0x06
    19d4:	14 c0       	rjmp	.+40     	; 0x19fe <fputc+0x6e>
    19d6:	8b 01       	movw	r16, r22
    19d8:	ec 01       	movw	r28, r24
    19da:	fb 01       	movw	r30, r22
    19dc:	00 84       	ldd	r0, Z+8	; 0x08
    19de:	f1 85       	ldd	r31, Z+9	; 0x09
    19e0:	e0 2d       	mov	r30, r0
    19e2:	09 95       	icall
    19e4:	89 2b       	or	r24, r25
    19e6:	e1 f6       	brne	.-72     	; 0x19a0 <fputc+0x10>
    19e8:	d8 01       	movw	r26, r16
    19ea:	16 96       	adiw	r26, 0x06	; 6
    19ec:	8d 91       	ld	r24, X+
    19ee:	9c 91       	ld	r25, X
    19f0:	17 97       	sbiw	r26, 0x07	; 7
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	17 96       	adiw	r26, 0x07	; 7
    19f6:	9c 93       	st	X, r25
    19f8:	8e 93       	st	-X, r24
    19fa:	16 97       	sbiw	r26, 0x06	; 6
    19fc:	ce 01       	movw	r24, r28
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	0f 91       	pop	r16
    1a06:	08 95       	ret

00001a08 <fputs>:
    1a08:	ef 92       	push	r14
    1a0a:	ff 92       	push	r15
    1a0c:	0f 93       	push	r16
    1a0e:	1f 93       	push	r17
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
    1a14:	db 01       	movw	r26, r22
    1a16:	13 96       	adiw	r26, 0x03	; 3
    1a18:	2c 91       	ld	r18, X
    1a1a:	21 ff       	sbrs	r18, 1
    1a1c:	18 c0       	rjmp	.+48     	; 0x1a4e <fputs+0x46>
    1a1e:	8b 01       	movw	r16, r22
    1a20:	7c 01       	movw	r14, r24
    1a22:	d0 e0       	ldi	r29, 0x00	; 0
    1a24:	c0 e0       	ldi	r28, 0x00	; 0
    1a26:	f7 01       	movw	r30, r14
    1a28:	81 91       	ld	r24, Z+
    1a2a:	7f 01       	movw	r14, r30
    1a2c:	88 23       	and	r24, r24
    1a2e:	61 f0       	breq	.+24     	; 0x1a48 <fputs+0x40>
    1a30:	d8 01       	movw	r26, r16
    1a32:	18 96       	adiw	r26, 0x08	; 8
    1a34:	ed 91       	ld	r30, X+
    1a36:	fc 91       	ld	r31, X
    1a38:	19 97       	sbiw	r26, 0x09	; 9
    1a3a:	b8 01       	movw	r22, r16
    1a3c:	09 95       	icall
    1a3e:	89 2b       	or	r24, r25
    1a40:	91 f3       	breq	.-28     	; 0x1a26 <fputs+0x1e>
    1a42:	df ef       	ldi	r29, 0xFF	; 255
    1a44:	cf ef       	ldi	r28, 0xFF	; 255
    1a46:	ef cf       	rjmp	.-34     	; 0x1a26 <fputs+0x1e>
    1a48:	8d 2f       	mov	r24, r29
    1a4a:	9c 2f       	mov	r25, r28
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <fputs+0x4a>
    1a4e:	8f ef       	ldi	r24, 0xFF	; 255
    1a50:	9f ef       	ldi	r25, 0xFF	; 255
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	e6 e0       	ldi	r30, 0x06	; 6
    1a58:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__epilogue_restores__+0x18>

00001a5c <fwrite>:
    1a5c:	a0 e0       	ldi	r26, 0x00	; 0
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e4 e3       	ldi	r30, 0x34	; 52
    1a62:	fd e0       	ldi	r31, 0x0D	; 13
    1a64:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__prologue_saves__+0xc>
    1a68:	5b 01       	movw	r10, r22
    1a6a:	4a 01       	movw	r8, r20
    1a6c:	79 01       	movw	r14, r18
    1a6e:	d9 01       	movw	r26, r18
    1a70:	13 96       	adiw	r26, 0x03	; 3
    1a72:	2c 91       	ld	r18, X
    1a74:	21 ff       	sbrs	r18, 1
    1a76:	1d c0       	rjmp	.+58     	; 0x1ab2 <fwrite+0x56>
    1a78:	c0 e0       	ldi	r28, 0x00	; 0
    1a7a:	d0 e0       	ldi	r29, 0x00	; 0
    1a7c:	c8 15       	cp	r28, r8
    1a7e:	d9 05       	cpc	r29, r9
    1a80:	d9 f0       	breq	.+54     	; 0x1ab8 <fwrite+0x5c>
    1a82:	8c 01       	movw	r16, r24
    1a84:	6c 01       	movw	r12, r24
    1a86:	ca 0c       	add	r12, r10
    1a88:	db 1c       	adc	r13, r11
    1a8a:	c8 01       	movw	r24, r16
    1a8c:	0c 15       	cp	r16, r12
    1a8e:	1d 05       	cpc	r17, r13
    1a90:	71 f0       	breq	.+28     	; 0x1aae <fwrite+0x52>
    1a92:	0f 5f       	subi	r16, 0xFF	; 255
    1a94:	1f 4f       	sbci	r17, 0xFF	; 255
    1a96:	d7 01       	movw	r26, r14
    1a98:	18 96       	adiw	r26, 0x08	; 8
    1a9a:	ed 91       	ld	r30, X+
    1a9c:	fc 91       	ld	r31, X
    1a9e:	19 97       	sbiw	r26, 0x09	; 9
    1aa0:	b7 01       	movw	r22, r14
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	8c 91       	ld	r24, X
    1aa6:	09 95       	icall
    1aa8:	89 2b       	or	r24, r25
    1aaa:	79 f3       	breq	.-34     	; 0x1a8a <fwrite+0x2e>
    1aac:	05 c0       	rjmp	.+10     	; 0x1ab8 <fwrite+0x5c>
    1aae:	21 96       	adiw	r28, 0x01	; 1
    1ab0:	e5 cf       	rjmp	.-54     	; 0x1a7c <fwrite+0x20>
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	01 c0       	rjmp	.+2      	; 0x1aba <fwrite+0x5e>
    1ab8:	ce 01       	movw	r24, r28
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	ec e0       	ldi	r30, 0x0C	; 12
    1ac0:	0c 94 44 10 	jmp	0x2088	; 0x2088 <__epilogue_restores__+0xc>

00001ac4 <printf>:
    1ac4:	a0 e0       	ldi	r26, 0x00	; 0
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e8 e6       	ldi	r30, 0x68	; 104
    1aca:	fd e0       	ldi	r31, 0x0D	; 13
    1acc:	0c 94 32 10 	jmp	0x2064	; 0x2064 <__prologue_saves__+0x20>
    1ad0:	ae 01       	movw	r20, r28
    1ad2:	4b 5f       	subi	r20, 0xFB	; 251
    1ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad6:	fa 01       	movw	r30, r20
    1ad8:	61 91       	ld	r22, Z+
    1ada:	71 91       	ld	r23, Z+
    1adc:	af 01       	movw	r20, r30
    1ade:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <__iob+0x2>
    1ae2:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <__iob+0x3>
    1ae6:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <vfprintf>
    1aea:	e2 e0       	ldi	r30, 0x02	; 2
    1aec:	0c 94 4e 10 	jmp	0x209c	; 0x209c <__epilogue_restores__+0x20>

00001af0 <vfprintf>:
    1af0:	ab e0       	ldi	r26, 0x0B	; 11
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	ee e7       	ldi	r30, 0x7E	; 126
    1af6:	fd e0       	ldi	r31, 0x0D	; 13
    1af8:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__prologue_saves__>
    1afc:	6c 01       	movw	r12, r24
    1afe:	7b 01       	movw	r14, r22
    1b00:	8a 01       	movw	r16, r20
    1b02:	fc 01       	movw	r30, r24
    1b04:	17 82       	std	Z+7, r1	; 0x07
    1b06:	16 82       	std	Z+6, r1	; 0x06
    1b08:	83 81       	ldd	r24, Z+3	; 0x03
    1b0a:	81 ff       	sbrs	r24, 1
    1b0c:	cc c1       	rjmp	.+920    	; 0x1ea6 <vfprintf+0x3b6>
    1b0e:	ce 01       	movw	r24, r28
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	3c 01       	movw	r6, r24
    1b14:	f6 01       	movw	r30, r12
    1b16:	93 81       	ldd	r25, Z+3	; 0x03
    1b18:	f7 01       	movw	r30, r14
    1b1a:	93 fd       	sbrc	r25, 3
    1b1c:	85 91       	lpm	r24, Z+
    1b1e:	93 ff       	sbrs	r25, 3
    1b20:	81 91       	ld	r24, Z+
    1b22:	7f 01       	movw	r14, r30
    1b24:	88 23       	and	r24, r24
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <vfprintf+0x3a>
    1b28:	ba c1       	rjmp	.+884    	; 0x1e9e <vfprintf+0x3ae>
    1b2a:	85 32       	cpi	r24, 0x25	; 37
    1b2c:	39 f4       	brne	.+14     	; 0x1b3c <vfprintf+0x4c>
    1b2e:	93 fd       	sbrc	r25, 3
    1b30:	85 91       	lpm	r24, Z+
    1b32:	93 ff       	sbrs	r25, 3
    1b34:	81 91       	ld	r24, Z+
    1b36:	7f 01       	movw	r14, r30
    1b38:	85 32       	cpi	r24, 0x25	; 37
    1b3a:	29 f4       	brne	.+10     	; 0x1b46 <vfprintf+0x56>
    1b3c:	b6 01       	movw	r22, r12
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    1b44:	e7 cf       	rjmp	.-50     	; 0x1b14 <vfprintf+0x24>
    1b46:	91 2c       	mov	r9, r1
    1b48:	21 2c       	mov	r2, r1
    1b4a:	31 2c       	mov	r3, r1
    1b4c:	ff e1       	ldi	r31, 0x1F	; 31
    1b4e:	f3 15       	cp	r31, r3
    1b50:	d8 f0       	brcs	.+54     	; 0x1b88 <vfprintf+0x98>
    1b52:	8b 32       	cpi	r24, 0x2B	; 43
    1b54:	79 f0       	breq	.+30     	; 0x1b74 <vfprintf+0x84>
    1b56:	38 f4       	brcc	.+14     	; 0x1b66 <vfprintf+0x76>
    1b58:	80 32       	cpi	r24, 0x20	; 32
    1b5a:	79 f0       	breq	.+30     	; 0x1b7a <vfprintf+0x8a>
    1b5c:	83 32       	cpi	r24, 0x23	; 35
    1b5e:	a1 f4       	brne	.+40     	; 0x1b88 <vfprintf+0x98>
    1b60:	23 2d       	mov	r18, r3
    1b62:	20 61       	ori	r18, 0x10	; 16
    1b64:	1d c0       	rjmp	.+58     	; 0x1ba0 <vfprintf+0xb0>
    1b66:	8d 32       	cpi	r24, 0x2D	; 45
    1b68:	61 f0       	breq	.+24     	; 0x1b82 <vfprintf+0x92>
    1b6a:	80 33       	cpi	r24, 0x30	; 48
    1b6c:	69 f4       	brne	.+26     	; 0x1b88 <vfprintf+0x98>
    1b6e:	23 2d       	mov	r18, r3
    1b70:	21 60       	ori	r18, 0x01	; 1
    1b72:	16 c0       	rjmp	.+44     	; 0x1ba0 <vfprintf+0xb0>
    1b74:	83 2d       	mov	r24, r3
    1b76:	82 60       	ori	r24, 0x02	; 2
    1b78:	38 2e       	mov	r3, r24
    1b7a:	e3 2d       	mov	r30, r3
    1b7c:	e4 60       	ori	r30, 0x04	; 4
    1b7e:	3e 2e       	mov	r3, r30
    1b80:	2a c0       	rjmp	.+84     	; 0x1bd6 <vfprintf+0xe6>
    1b82:	f3 2d       	mov	r31, r3
    1b84:	f8 60       	ori	r31, 0x08	; 8
    1b86:	1d c0       	rjmp	.+58     	; 0x1bc2 <vfprintf+0xd2>
    1b88:	37 fc       	sbrc	r3, 7
    1b8a:	2d c0       	rjmp	.+90     	; 0x1be6 <vfprintf+0xf6>
    1b8c:	20 ed       	ldi	r18, 0xD0	; 208
    1b8e:	28 0f       	add	r18, r24
    1b90:	2a 30       	cpi	r18, 0x0A	; 10
    1b92:	40 f0       	brcs	.+16     	; 0x1ba4 <vfprintf+0xb4>
    1b94:	8e 32       	cpi	r24, 0x2E	; 46
    1b96:	b9 f4       	brne	.+46     	; 0x1bc6 <vfprintf+0xd6>
    1b98:	36 fc       	sbrc	r3, 6
    1b9a:	81 c1       	rjmp	.+770    	; 0x1e9e <vfprintf+0x3ae>
    1b9c:	23 2d       	mov	r18, r3
    1b9e:	20 64       	ori	r18, 0x40	; 64
    1ba0:	32 2e       	mov	r3, r18
    1ba2:	19 c0       	rjmp	.+50     	; 0x1bd6 <vfprintf+0xe6>
    1ba4:	36 fe       	sbrs	r3, 6
    1ba6:	06 c0       	rjmp	.+12     	; 0x1bb4 <vfprintf+0xc4>
    1ba8:	8a e0       	ldi	r24, 0x0A	; 10
    1baa:	98 9e       	mul	r9, r24
    1bac:	20 0d       	add	r18, r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	92 2e       	mov	r9, r18
    1bb2:	11 c0       	rjmp	.+34     	; 0x1bd6 <vfprintf+0xe6>
    1bb4:	ea e0       	ldi	r30, 0x0A	; 10
    1bb6:	2e 9e       	mul	r2, r30
    1bb8:	20 0d       	add	r18, r0
    1bba:	11 24       	eor	r1, r1
    1bbc:	22 2e       	mov	r2, r18
    1bbe:	f3 2d       	mov	r31, r3
    1bc0:	f0 62       	ori	r31, 0x20	; 32
    1bc2:	3f 2e       	mov	r3, r31
    1bc4:	08 c0       	rjmp	.+16     	; 0x1bd6 <vfprintf+0xe6>
    1bc6:	8c 36       	cpi	r24, 0x6C	; 108
    1bc8:	21 f4       	brne	.+8      	; 0x1bd2 <vfprintf+0xe2>
    1bca:	83 2d       	mov	r24, r3
    1bcc:	80 68       	ori	r24, 0x80	; 128
    1bce:	38 2e       	mov	r3, r24
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <vfprintf+0xe6>
    1bd2:	88 36       	cpi	r24, 0x68	; 104
    1bd4:	41 f4       	brne	.+16     	; 0x1be6 <vfprintf+0xf6>
    1bd6:	f7 01       	movw	r30, r14
    1bd8:	93 fd       	sbrc	r25, 3
    1bda:	85 91       	lpm	r24, Z+
    1bdc:	93 ff       	sbrs	r25, 3
    1bde:	81 91       	ld	r24, Z+
    1be0:	7f 01       	movw	r14, r30
    1be2:	81 11       	cpse	r24, r1
    1be4:	b3 cf       	rjmp	.-154    	; 0x1b4c <vfprintf+0x5c>
    1be6:	98 2f       	mov	r25, r24
    1be8:	9f 7d       	andi	r25, 0xDF	; 223
    1bea:	95 54       	subi	r25, 0x45	; 69
    1bec:	93 30       	cpi	r25, 0x03	; 3
    1bee:	28 f4       	brcc	.+10     	; 0x1bfa <vfprintf+0x10a>
    1bf0:	0c 5f       	subi	r16, 0xFC	; 252
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf4:	9f e3       	ldi	r25, 0x3F	; 63
    1bf6:	99 83       	std	Y+1, r25	; 0x01
    1bf8:	0d c0       	rjmp	.+26     	; 0x1c14 <vfprintf+0x124>
    1bfa:	83 36       	cpi	r24, 0x63	; 99
    1bfc:	31 f0       	breq	.+12     	; 0x1c0a <vfprintf+0x11a>
    1bfe:	83 37       	cpi	r24, 0x73	; 115
    1c00:	71 f0       	breq	.+28     	; 0x1c1e <vfprintf+0x12e>
    1c02:	83 35       	cpi	r24, 0x53	; 83
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <vfprintf+0x118>
    1c06:	59 c0       	rjmp	.+178    	; 0x1cba <vfprintf+0x1ca>
    1c08:	21 c0       	rjmp	.+66     	; 0x1c4c <vfprintf+0x15c>
    1c0a:	f8 01       	movw	r30, r16
    1c0c:	80 81       	ld	r24, Z
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	0e 5f       	subi	r16, 0xFE	; 254
    1c12:	1f 4f       	sbci	r17, 0xFF	; 255
    1c14:	88 24       	eor	r8, r8
    1c16:	83 94       	inc	r8
    1c18:	91 2c       	mov	r9, r1
    1c1a:	53 01       	movw	r10, r6
    1c1c:	13 c0       	rjmp	.+38     	; 0x1c44 <vfprintf+0x154>
    1c1e:	28 01       	movw	r4, r16
    1c20:	f2 e0       	ldi	r31, 0x02	; 2
    1c22:	4f 0e       	add	r4, r31
    1c24:	51 1c       	adc	r5, r1
    1c26:	f8 01       	movw	r30, r16
    1c28:	a0 80       	ld	r10, Z
    1c2a:	b1 80       	ldd	r11, Z+1	; 0x01
    1c2c:	36 fe       	sbrs	r3, 6
    1c2e:	03 c0       	rjmp	.+6      	; 0x1c36 <vfprintf+0x146>
    1c30:	69 2d       	mov	r22, r9
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <vfprintf+0x14a>
    1c36:	6f ef       	ldi	r22, 0xFF	; 255
    1c38:	7f ef       	ldi	r23, 0xFF	; 255
    1c3a:	c5 01       	movw	r24, r10
    1c3c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <strnlen>
    1c40:	4c 01       	movw	r8, r24
    1c42:	82 01       	movw	r16, r4
    1c44:	f3 2d       	mov	r31, r3
    1c46:	ff 77       	andi	r31, 0x7F	; 127
    1c48:	3f 2e       	mov	r3, r31
    1c4a:	16 c0       	rjmp	.+44     	; 0x1c78 <vfprintf+0x188>
    1c4c:	28 01       	movw	r4, r16
    1c4e:	22 e0       	ldi	r18, 0x02	; 2
    1c50:	42 0e       	add	r4, r18
    1c52:	51 1c       	adc	r5, r1
    1c54:	f8 01       	movw	r30, r16
    1c56:	a0 80       	ld	r10, Z
    1c58:	b1 80       	ldd	r11, Z+1	; 0x01
    1c5a:	36 fe       	sbrs	r3, 6
    1c5c:	03 c0       	rjmp	.+6      	; 0x1c64 <vfprintf+0x174>
    1c5e:	69 2d       	mov	r22, r9
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <vfprintf+0x178>
    1c64:	6f ef       	ldi	r22, 0xFF	; 255
    1c66:	7f ef       	ldi	r23, 0xFF	; 255
    1c68:	c5 01       	movw	r24, r10
    1c6a:	0e 94 75 0f 	call	0x1eea	; 0x1eea <strnlen_P>
    1c6e:	4c 01       	movw	r8, r24
    1c70:	f3 2d       	mov	r31, r3
    1c72:	f0 68       	ori	r31, 0x80	; 128
    1c74:	3f 2e       	mov	r3, r31
    1c76:	82 01       	movw	r16, r4
    1c78:	33 fc       	sbrc	r3, 3
    1c7a:	1b c0       	rjmp	.+54     	; 0x1cb2 <vfprintf+0x1c2>
    1c7c:	82 2d       	mov	r24, r2
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	88 16       	cp	r8, r24
    1c82:	99 06       	cpc	r9, r25
    1c84:	b0 f4       	brcc	.+44     	; 0x1cb2 <vfprintf+0x1c2>
    1c86:	b6 01       	movw	r22, r12
    1c88:	80 e2       	ldi	r24, 0x20	; 32
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    1c90:	2a 94       	dec	r2
    1c92:	f4 cf       	rjmp	.-24     	; 0x1c7c <vfprintf+0x18c>
    1c94:	f5 01       	movw	r30, r10
    1c96:	37 fc       	sbrc	r3, 7
    1c98:	85 91       	lpm	r24, Z+
    1c9a:	37 fe       	sbrs	r3, 7
    1c9c:	81 91       	ld	r24, Z+
    1c9e:	5f 01       	movw	r10, r30
    1ca0:	b6 01       	movw	r22, r12
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    1ca8:	21 10       	cpse	r2, r1
    1caa:	2a 94       	dec	r2
    1cac:	21 e0       	ldi	r18, 0x01	; 1
    1cae:	82 1a       	sub	r8, r18
    1cb0:	91 08       	sbc	r9, r1
    1cb2:	81 14       	cp	r8, r1
    1cb4:	91 04       	cpc	r9, r1
    1cb6:	71 f7       	brne	.-36     	; 0x1c94 <vfprintf+0x1a4>
    1cb8:	e8 c0       	rjmp	.+464    	; 0x1e8a <vfprintf+0x39a>
    1cba:	84 36       	cpi	r24, 0x64	; 100
    1cbc:	11 f0       	breq	.+4      	; 0x1cc2 <vfprintf+0x1d2>
    1cbe:	89 36       	cpi	r24, 0x69	; 105
    1cc0:	41 f5       	brne	.+80     	; 0x1d12 <vfprintf+0x222>
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	37 fe       	sbrs	r3, 7
    1cc6:	07 c0       	rjmp	.+14     	; 0x1cd6 <vfprintf+0x1e6>
    1cc8:	60 81       	ld	r22, Z
    1cca:	71 81       	ldd	r23, Z+1	; 0x01
    1ccc:	82 81       	ldd	r24, Z+2	; 0x02
    1cce:	93 81       	ldd	r25, Z+3	; 0x03
    1cd0:	0c 5f       	subi	r16, 0xFC	; 252
    1cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd4:	08 c0       	rjmp	.+16     	; 0x1ce6 <vfprintf+0x1f6>
    1cd6:	60 81       	ld	r22, Z
    1cd8:	71 81       	ldd	r23, Z+1	; 0x01
    1cda:	07 2e       	mov	r0, r23
    1cdc:	00 0c       	add	r0, r0
    1cde:	88 0b       	sbc	r24, r24
    1ce0:	99 0b       	sbc	r25, r25
    1ce2:	0e 5f       	subi	r16, 0xFE	; 254
    1ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce6:	f3 2d       	mov	r31, r3
    1ce8:	ff 76       	andi	r31, 0x6F	; 111
    1cea:	3f 2e       	mov	r3, r31
    1cec:	97 ff       	sbrs	r25, 7
    1cee:	09 c0       	rjmp	.+18     	; 0x1d02 <vfprintf+0x212>
    1cf0:	90 95       	com	r25
    1cf2:	80 95       	com	r24
    1cf4:	70 95       	com	r23
    1cf6:	61 95       	neg	r22
    1cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfa:	8f 4f       	sbci	r24, 0xFF	; 255
    1cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfe:	f0 68       	ori	r31, 0x80	; 128
    1d00:	3f 2e       	mov	r3, r31
    1d02:	2a e0       	ldi	r18, 0x0A	; 10
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	a3 01       	movw	r20, r6
    1d08:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__ultoa_invert>
    1d0c:	88 2e       	mov	r8, r24
    1d0e:	86 18       	sub	r8, r6
    1d10:	45 c0       	rjmp	.+138    	; 0x1d9c <vfprintf+0x2ac>
    1d12:	85 37       	cpi	r24, 0x75	; 117
    1d14:	31 f4       	brne	.+12     	; 0x1d22 <vfprintf+0x232>
    1d16:	23 2d       	mov	r18, r3
    1d18:	2f 7e       	andi	r18, 0xEF	; 239
    1d1a:	b2 2e       	mov	r11, r18
    1d1c:	2a e0       	ldi	r18, 0x0A	; 10
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	25 c0       	rjmp	.+74     	; 0x1d6c <vfprintf+0x27c>
    1d22:	93 2d       	mov	r25, r3
    1d24:	99 7f       	andi	r25, 0xF9	; 249
    1d26:	b9 2e       	mov	r11, r25
    1d28:	8f 36       	cpi	r24, 0x6F	; 111
    1d2a:	c1 f0       	breq	.+48     	; 0x1d5c <vfprintf+0x26c>
    1d2c:	18 f4       	brcc	.+6      	; 0x1d34 <vfprintf+0x244>
    1d2e:	88 35       	cpi	r24, 0x58	; 88
    1d30:	79 f0       	breq	.+30     	; 0x1d50 <vfprintf+0x260>
    1d32:	b5 c0       	rjmp	.+362    	; 0x1e9e <vfprintf+0x3ae>
    1d34:	80 37       	cpi	r24, 0x70	; 112
    1d36:	19 f0       	breq	.+6      	; 0x1d3e <vfprintf+0x24e>
    1d38:	88 37       	cpi	r24, 0x78	; 120
    1d3a:	21 f0       	breq	.+8      	; 0x1d44 <vfprintf+0x254>
    1d3c:	b0 c0       	rjmp	.+352    	; 0x1e9e <vfprintf+0x3ae>
    1d3e:	e9 2f       	mov	r30, r25
    1d40:	e0 61       	ori	r30, 0x10	; 16
    1d42:	be 2e       	mov	r11, r30
    1d44:	b4 fe       	sbrs	r11, 4
    1d46:	0d c0       	rjmp	.+26     	; 0x1d62 <vfprintf+0x272>
    1d48:	fb 2d       	mov	r31, r11
    1d4a:	f4 60       	ori	r31, 0x04	; 4
    1d4c:	bf 2e       	mov	r11, r31
    1d4e:	09 c0       	rjmp	.+18     	; 0x1d62 <vfprintf+0x272>
    1d50:	34 fe       	sbrs	r3, 4
    1d52:	0a c0       	rjmp	.+20     	; 0x1d68 <vfprintf+0x278>
    1d54:	29 2f       	mov	r18, r25
    1d56:	26 60       	ori	r18, 0x06	; 6
    1d58:	b2 2e       	mov	r11, r18
    1d5a:	06 c0       	rjmp	.+12     	; 0x1d68 <vfprintf+0x278>
    1d5c:	28 e0       	ldi	r18, 0x08	; 8
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	05 c0       	rjmp	.+10     	; 0x1d6c <vfprintf+0x27c>
    1d62:	20 e1       	ldi	r18, 0x10	; 16
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <vfprintf+0x27c>
    1d68:	20 e1       	ldi	r18, 0x10	; 16
    1d6a:	32 e0       	ldi	r19, 0x02	; 2
    1d6c:	f8 01       	movw	r30, r16
    1d6e:	b7 fe       	sbrs	r11, 7
    1d70:	07 c0       	rjmp	.+14     	; 0x1d80 <vfprintf+0x290>
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	0c 5f       	subi	r16, 0xFC	; 252
    1d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7e:	06 c0       	rjmp	.+12     	; 0x1d8c <vfprintf+0x29c>
    1d80:	60 81       	ld	r22, Z
    1d82:	71 81       	ldd	r23, Z+1	; 0x01
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	0e 5f       	subi	r16, 0xFE	; 254
    1d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8c:	a3 01       	movw	r20, r6
    1d8e:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__ultoa_invert>
    1d92:	88 2e       	mov	r8, r24
    1d94:	86 18       	sub	r8, r6
    1d96:	fb 2d       	mov	r31, r11
    1d98:	ff 77       	andi	r31, 0x7F	; 127
    1d9a:	3f 2e       	mov	r3, r31
    1d9c:	36 fe       	sbrs	r3, 6
    1d9e:	0d c0       	rjmp	.+26     	; 0x1dba <vfprintf+0x2ca>
    1da0:	23 2d       	mov	r18, r3
    1da2:	2e 7f       	andi	r18, 0xFE	; 254
    1da4:	a2 2e       	mov	r10, r18
    1da6:	89 14       	cp	r8, r9
    1da8:	58 f4       	brcc	.+22     	; 0x1dc0 <vfprintf+0x2d0>
    1daa:	34 fe       	sbrs	r3, 4
    1dac:	0b c0       	rjmp	.+22     	; 0x1dc4 <vfprintf+0x2d4>
    1dae:	32 fc       	sbrc	r3, 2
    1db0:	09 c0       	rjmp	.+18     	; 0x1dc4 <vfprintf+0x2d4>
    1db2:	83 2d       	mov	r24, r3
    1db4:	8e 7e       	andi	r24, 0xEE	; 238
    1db6:	a8 2e       	mov	r10, r24
    1db8:	05 c0       	rjmp	.+10     	; 0x1dc4 <vfprintf+0x2d4>
    1dba:	b8 2c       	mov	r11, r8
    1dbc:	a3 2c       	mov	r10, r3
    1dbe:	03 c0       	rjmp	.+6      	; 0x1dc6 <vfprintf+0x2d6>
    1dc0:	b8 2c       	mov	r11, r8
    1dc2:	01 c0       	rjmp	.+2      	; 0x1dc6 <vfprintf+0x2d6>
    1dc4:	b9 2c       	mov	r11, r9
    1dc6:	a4 fe       	sbrs	r10, 4
    1dc8:	0f c0       	rjmp	.+30     	; 0x1de8 <vfprintf+0x2f8>
    1dca:	fe 01       	movw	r30, r28
    1dcc:	e8 0d       	add	r30, r8
    1dce:	f1 1d       	adc	r31, r1
    1dd0:	80 81       	ld	r24, Z
    1dd2:	80 33       	cpi	r24, 0x30	; 48
    1dd4:	21 f4       	brne	.+8      	; 0x1dde <vfprintf+0x2ee>
    1dd6:	9a 2d       	mov	r25, r10
    1dd8:	99 7e       	andi	r25, 0xE9	; 233
    1dda:	a9 2e       	mov	r10, r25
    1ddc:	09 c0       	rjmp	.+18     	; 0x1df0 <vfprintf+0x300>
    1dde:	a2 fe       	sbrs	r10, 2
    1de0:	06 c0       	rjmp	.+12     	; 0x1dee <vfprintf+0x2fe>
    1de2:	b3 94       	inc	r11
    1de4:	b3 94       	inc	r11
    1de6:	04 c0       	rjmp	.+8      	; 0x1df0 <vfprintf+0x300>
    1de8:	8a 2d       	mov	r24, r10
    1dea:	86 78       	andi	r24, 0x86	; 134
    1dec:	09 f0       	breq	.+2      	; 0x1df0 <vfprintf+0x300>
    1dee:	b3 94       	inc	r11
    1df0:	a3 fc       	sbrc	r10, 3
    1df2:	11 c0       	rjmp	.+34     	; 0x1e16 <vfprintf+0x326>
    1df4:	a0 fe       	sbrs	r10, 0
    1df6:	06 c0       	rjmp	.+12     	; 0x1e04 <vfprintf+0x314>
    1df8:	b2 14       	cp	r11, r2
    1dfa:	88 f4       	brcc	.+34     	; 0x1e1e <vfprintf+0x32e>
    1dfc:	28 0c       	add	r2, r8
    1dfe:	92 2c       	mov	r9, r2
    1e00:	9b 18       	sub	r9, r11
    1e02:	0e c0       	rjmp	.+28     	; 0x1e20 <vfprintf+0x330>
    1e04:	b2 14       	cp	r11, r2
    1e06:	60 f4       	brcc	.+24     	; 0x1e20 <vfprintf+0x330>
    1e08:	b6 01       	movw	r22, r12
    1e0a:	80 e2       	ldi	r24, 0x20	; 32
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    1e12:	b3 94       	inc	r11
    1e14:	f7 cf       	rjmp	.-18     	; 0x1e04 <vfprintf+0x314>
    1e16:	b2 14       	cp	r11, r2
    1e18:	18 f4       	brcc	.+6      	; 0x1e20 <vfprintf+0x330>
    1e1a:	2b 18       	sub	r2, r11
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <vfprintf+0x332>
    1e1e:	98 2c       	mov	r9, r8
    1e20:	21 2c       	mov	r2, r1
    1e22:	a4 fe       	sbrs	r10, 4
    1e24:	10 c0       	rjmp	.+32     	; 0x1e46 <vfprintf+0x356>
    1e26:	b6 01       	movw	r22, r12
    1e28:	80 e3       	ldi	r24, 0x30	; 48
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    1e30:	a2 fe       	sbrs	r10, 2
    1e32:	17 c0       	rjmp	.+46     	; 0x1e62 <vfprintf+0x372>
    1e34:	a1 fc       	sbrc	r10, 1
    1e36:	03 c0       	rjmp	.+6      	; 0x1e3e <vfprintf+0x34e>
    1e38:	88 e7       	ldi	r24, 0x78	; 120
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <vfprintf+0x352>
    1e3e:	88 e5       	ldi	r24, 0x58	; 88
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	b6 01       	movw	r22, r12
    1e44:	0c c0       	rjmp	.+24     	; 0x1e5e <vfprintf+0x36e>
    1e46:	8a 2d       	mov	r24, r10
    1e48:	86 78       	andi	r24, 0x86	; 134
    1e4a:	59 f0       	breq	.+22     	; 0x1e62 <vfprintf+0x372>
    1e4c:	a1 fe       	sbrs	r10, 1
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <vfprintf+0x364>
    1e50:	8b e2       	ldi	r24, 0x2B	; 43
    1e52:	01 c0       	rjmp	.+2      	; 0x1e56 <vfprintf+0x366>
    1e54:	80 e2       	ldi	r24, 0x20	; 32
    1e56:	a7 fc       	sbrc	r10, 7
    1e58:	8d e2       	ldi	r24, 0x2D	; 45
    1e5a:	b6 01       	movw	r22, r12
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    1e62:	89 14       	cp	r8, r9
    1e64:	38 f4       	brcc	.+14     	; 0x1e74 <vfprintf+0x384>
    1e66:	b6 01       	movw	r22, r12
    1e68:	80 e3       	ldi	r24, 0x30	; 48
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    1e70:	9a 94       	dec	r9
    1e72:	f7 cf       	rjmp	.-18     	; 0x1e62 <vfprintf+0x372>
    1e74:	8a 94       	dec	r8
    1e76:	f3 01       	movw	r30, r6
    1e78:	e8 0d       	add	r30, r8
    1e7a:	f1 1d       	adc	r31, r1
    1e7c:	80 81       	ld	r24, Z
    1e7e:	b6 01       	movw	r22, r12
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    1e86:	81 10       	cpse	r8, r1
    1e88:	f5 cf       	rjmp	.-22     	; 0x1e74 <vfprintf+0x384>
    1e8a:	22 20       	and	r2, r2
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <vfprintf+0x3a0>
    1e8e:	42 ce       	rjmp	.-892    	; 0x1b14 <vfprintf+0x24>
    1e90:	b6 01       	movw	r22, r12
    1e92:	80 e2       	ldi	r24, 0x20	; 32
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    1e9a:	2a 94       	dec	r2
    1e9c:	f6 cf       	rjmp	.-20     	; 0x1e8a <vfprintf+0x39a>
    1e9e:	f6 01       	movw	r30, r12
    1ea0:	86 81       	ldd	r24, Z+6	; 0x06
    1ea2:	97 81       	ldd	r25, Z+7	; 0x07
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <vfprintf+0x3ba>
    1ea6:	8f ef       	ldi	r24, 0xFF	; 255
    1ea8:	9f ef       	ldi	r25, 0xFF	; 255
    1eaa:	2b 96       	adiw	r28, 0x0b	; 11
    1eac:	e2 e1       	ldi	r30, 0x12	; 18
    1eae:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__epilogue_restores__>

00001eb2 <calloc>:
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	86 9f       	mul	r24, r22
    1ebc:	80 01       	movw	r16, r0
    1ebe:	87 9f       	mul	r24, r23
    1ec0:	10 0d       	add	r17, r0
    1ec2:	96 9f       	mul	r25, r22
    1ec4:	10 0d       	add	r17, r0
    1ec6:	11 24       	eor	r1, r1
    1ec8:	c8 01       	movw	r24, r16
    1eca:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <malloc>
    1ece:	ec 01       	movw	r28, r24
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	29 f0       	breq	.+10     	; 0x1ede <calloc+0x2c>
    1ed4:	a8 01       	movw	r20, r16
    1ed6:	60 e0       	ldi	r22, 0x00	; 0
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <memset>
    1ede:	ce 01       	movw	r24, r28
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	1f 91       	pop	r17
    1ee6:	0f 91       	pop	r16
    1ee8:	08 95       	ret

00001eea <strnlen_P>:
    1eea:	fc 01       	movw	r30, r24
    1eec:	05 90       	lpm	r0, Z+
    1eee:	61 50       	subi	r22, 0x01	; 1
    1ef0:	70 40       	sbci	r23, 0x00	; 0
    1ef2:	01 10       	cpse	r0, r1
    1ef4:	d8 f7       	brcc	.-10     	; 0x1eec <strnlen_P+0x2>
    1ef6:	80 95       	com	r24
    1ef8:	90 95       	com	r25
    1efa:	8e 0f       	add	r24, r30
    1efc:	9f 1f       	adc	r25, r31
    1efe:	08 95       	ret

00001f00 <memset>:
    1f00:	dc 01       	movw	r26, r24
    1f02:	01 c0       	rjmp	.+2      	; 0x1f06 <memset+0x6>
    1f04:	6d 93       	st	X+, r22
    1f06:	41 50       	subi	r20, 0x01	; 1
    1f08:	50 40       	sbci	r21, 0x00	; 0
    1f0a:	e0 f7       	brcc	.-8      	; 0x1f04 <memset+0x4>
    1f0c:	08 95       	ret

00001f0e <strnlen>:
    1f0e:	fc 01       	movw	r30, r24
    1f10:	61 50       	subi	r22, 0x01	; 1
    1f12:	70 40       	sbci	r23, 0x00	; 0
    1f14:	01 90       	ld	r0, Z+
    1f16:	01 10       	cpse	r0, r1
    1f18:	d8 f7       	brcc	.-10     	; 0x1f10 <strnlen+0x2>
    1f1a:	80 95       	com	r24
    1f1c:	90 95       	com	r25
    1f1e:	8e 0f       	add	r24, r30
    1f20:	9f 1f       	adc	r25, r31
    1f22:	08 95       	ret

00001f24 <__ultoa_invert>:
    1f24:	fa 01       	movw	r30, r20
    1f26:	aa 27       	eor	r26, r26
    1f28:	28 30       	cpi	r18, 0x08	; 8
    1f2a:	51 f1       	breq	.+84     	; 0x1f80 <__ultoa_invert+0x5c>
    1f2c:	20 31       	cpi	r18, 0x10	; 16
    1f2e:	81 f1       	breq	.+96     	; 0x1f90 <__ultoa_invert+0x6c>
    1f30:	e8 94       	clt
    1f32:	6f 93       	push	r22
    1f34:	6e 7f       	andi	r22, 0xFE	; 254
    1f36:	6e 5f       	subi	r22, 0xFE	; 254
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3e:	af 4f       	sbci	r26, 0xFF	; 255
    1f40:	b1 e0       	ldi	r27, 0x01	; 1
    1f42:	3e d0       	rcall	.+124    	; 0x1fc0 <__ultoa_invert+0x9c>
    1f44:	b4 e0       	ldi	r27, 0x04	; 4
    1f46:	3c d0       	rcall	.+120    	; 0x1fc0 <__ultoa_invert+0x9c>
    1f48:	67 0f       	add	r22, r23
    1f4a:	78 1f       	adc	r23, r24
    1f4c:	89 1f       	adc	r24, r25
    1f4e:	9a 1f       	adc	r25, r26
    1f50:	a1 1d       	adc	r26, r1
    1f52:	68 0f       	add	r22, r24
    1f54:	79 1f       	adc	r23, r25
    1f56:	8a 1f       	adc	r24, r26
    1f58:	91 1d       	adc	r25, r1
    1f5a:	a1 1d       	adc	r26, r1
    1f5c:	6a 0f       	add	r22, r26
    1f5e:	71 1d       	adc	r23, r1
    1f60:	81 1d       	adc	r24, r1
    1f62:	91 1d       	adc	r25, r1
    1f64:	a1 1d       	adc	r26, r1
    1f66:	20 d0       	rcall	.+64     	; 0x1fa8 <__ultoa_invert+0x84>
    1f68:	09 f4       	brne	.+2      	; 0x1f6c <__ultoa_invert+0x48>
    1f6a:	68 94       	set
    1f6c:	3f 91       	pop	r19
    1f6e:	2a e0       	ldi	r18, 0x0A	; 10
    1f70:	26 9f       	mul	r18, r22
    1f72:	11 24       	eor	r1, r1
    1f74:	30 19       	sub	r19, r0
    1f76:	30 5d       	subi	r19, 0xD0	; 208
    1f78:	31 93       	st	Z+, r19
    1f7a:	de f6       	brtc	.-74     	; 0x1f32 <__ultoa_invert+0xe>
    1f7c:	cf 01       	movw	r24, r30
    1f7e:	08 95       	ret
    1f80:	46 2f       	mov	r20, r22
    1f82:	47 70       	andi	r20, 0x07	; 7
    1f84:	40 5d       	subi	r20, 0xD0	; 208
    1f86:	41 93       	st	Z+, r20
    1f88:	b3 e0       	ldi	r27, 0x03	; 3
    1f8a:	0f d0       	rcall	.+30     	; 0x1faa <__ultoa_invert+0x86>
    1f8c:	c9 f7       	brne	.-14     	; 0x1f80 <__ultoa_invert+0x5c>
    1f8e:	f6 cf       	rjmp	.-20     	; 0x1f7c <__ultoa_invert+0x58>
    1f90:	46 2f       	mov	r20, r22
    1f92:	4f 70       	andi	r20, 0x0F	; 15
    1f94:	40 5d       	subi	r20, 0xD0	; 208
    1f96:	4a 33       	cpi	r20, 0x3A	; 58
    1f98:	18 f0       	brcs	.+6      	; 0x1fa0 <__ultoa_invert+0x7c>
    1f9a:	49 5d       	subi	r20, 0xD9	; 217
    1f9c:	31 fd       	sbrc	r19, 1
    1f9e:	40 52       	subi	r20, 0x20	; 32
    1fa0:	41 93       	st	Z+, r20
    1fa2:	02 d0       	rcall	.+4      	; 0x1fa8 <__ultoa_invert+0x84>
    1fa4:	a9 f7       	brne	.-22     	; 0x1f90 <__ultoa_invert+0x6c>
    1fa6:	ea cf       	rjmp	.-44     	; 0x1f7c <__ultoa_invert+0x58>
    1fa8:	b4 e0       	ldi	r27, 0x04	; 4
    1faa:	a6 95       	lsr	r26
    1fac:	97 95       	ror	r25
    1fae:	87 95       	ror	r24
    1fb0:	77 95       	ror	r23
    1fb2:	67 95       	ror	r22
    1fb4:	ba 95       	dec	r27
    1fb6:	c9 f7       	brne	.-14     	; 0x1faa <__ultoa_invert+0x86>
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	61 05       	cpc	r22, r1
    1fbc:	71 05       	cpc	r23, r1
    1fbe:	08 95       	ret
    1fc0:	9b 01       	movw	r18, r22
    1fc2:	ac 01       	movw	r20, r24
    1fc4:	0a 2e       	mov	r0, r26
    1fc6:	06 94       	lsr	r0
    1fc8:	57 95       	ror	r21
    1fca:	47 95       	ror	r20
    1fcc:	37 95       	ror	r19
    1fce:	27 95       	ror	r18
    1fd0:	ba 95       	dec	r27
    1fd2:	c9 f7       	brne	.-14     	; 0x1fc6 <__ultoa_invert+0xa2>
    1fd4:	62 0f       	add	r22, r18
    1fd6:	73 1f       	adc	r23, r19
    1fd8:	84 1f       	adc	r24, r20
    1fda:	95 1f       	adc	r25, r21
    1fdc:	a0 1d       	adc	r26, r0
    1fde:	08 95       	ret

00001fe0 <__divmodsi4>:
    1fe0:	05 2e       	mov	r0, r21
    1fe2:	97 fb       	bst	r25, 7
    1fe4:	1e f4       	brtc	.+6      	; 0x1fec <__divmodsi4+0xc>
    1fe6:	00 94       	com	r0
    1fe8:	0e 94 07 10 	call	0x200e	; 0x200e <__negsi2>
    1fec:	57 fd       	sbrc	r21, 7
    1fee:	07 d0       	rcall	.+14     	; 0x1ffe <__divmodsi4_neg2>
    1ff0:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__udivmodsi4>
    1ff4:	07 fc       	sbrc	r0, 7
    1ff6:	03 d0       	rcall	.+6      	; 0x1ffe <__divmodsi4_neg2>
    1ff8:	4e f4       	brtc	.+18     	; 0x200c <__divmodsi4_exit>
    1ffa:	0c 94 07 10 	jmp	0x200e	; 0x200e <__negsi2>

00001ffe <__divmodsi4_neg2>:
    1ffe:	50 95       	com	r21
    2000:	40 95       	com	r20
    2002:	30 95       	com	r19
    2004:	21 95       	neg	r18
    2006:	3f 4f       	sbci	r19, 0xFF	; 255
    2008:	4f 4f       	sbci	r20, 0xFF	; 255
    200a:	5f 4f       	sbci	r21, 0xFF	; 255

0000200c <__divmodsi4_exit>:
    200c:	08 95       	ret

0000200e <__negsi2>:
    200e:	90 95       	com	r25
    2010:	80 95       	com	r24
    2012:	70 95       	com	r23
    2014:	61 95       	neg	r22
    2016:	7f 4f       	sbci	r23, 0xFF	; 255
    2018:	8f 4f       	sbci	r24, 0xFF	; 255
    201a:	9f 4f       	sbci	r25, 0xFF	; 255
    201c:	08 95       	ret

0000201e <__muluhisi3>:
    201e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__umulhisi3>
    2022:	a5 9f       	mul	r26, r21
    2024:	90 0d       	add	r25, r0
    2026:	b4 9f       	mul	r27, r20
    2028:	90 0d       	add	r25, r0
    202a:	a4 9f       	mul	r26, r20
    202c:	80 0d       	add	r24, r0
    202e:	91 1d       	adc	r25, r1
    2030:	11 24       	eor	r1, r1
    2032:	08 95       	ret

00002034 <__mulshisi3>:
    2034:	b7 ff       	sbrs	r27, 7
    2036:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__muluhisi3>

0000203a <__mulohisi3>:
    203a:	0e 94 0f 10 	call	0x201e	; 0x201e <__muluhisi3>
    203e:	82 1b       	sub	r24, r18
    2040:	93 0b       	sbc	r25, r19
    2042:	08 95       	ret

00002044 <__prologue_saves__>:
    2044:	2f 92       	push	r2
    2046:	3f 92       	push	r3
    2048:	4f 92       	push	r4
    204a:	5f 92       	push	r5
    204c:	6f 92       	push	r6
    204e:	7f 92       	push	r7
    2050:	8f 92       	push	r8
    2052:	9f 92       	push	r9
    2054:	af 92       	push	r10
    2056:	bf 92       	push	r11
    2058:	cf 92       	push	r12
    205a:	df 92       	push	r13
    205c:	ef 92       	push	r14
    205e:	ff 92       	push	r15
    2060:	0f 93       	push	r16
    2062:	1f 93       	push	r17
    2064:	cf 93       	push	r28
    2066:	df 93       	push	r29
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	ca 1b       	sub	r28, r26
    206e:	db 0b       	sbc	r29, r27
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	09 94       	ijmp

0000207c <__epilogue_restores__>:
    207c:	2a 88       	ldd	r2, Y+18	; 0x12
    207e:	39 88       	ldd	r3, Y+17	; 0x11
    2080:	48 88       	ldd	r4, Y+16	; 0x10
    2082:	5f 84       	ldd	r5, Y+15	; 0x0f
    2084:	6e 84       	ldd	r6, Y+14	; 0x0e
    2086:	7d 84       	ldd	r7, Y+13	; 0x0d
    2088:	8c 84       	ldd	r8, Y+12	; 0x0c
    208a:	9b 84       	ldd	r9, Y+11	; 0x0b
    208c:	aa 84       	ldd	r10, Y+10	; 0x0a
    208e:	b9 84       	ldd	r11, Y+9	; 0x09
    2090:	c8 84       	ldd	r12, Y+8	; 0x08
    2092:	df 80       	ldd	r13, Y+7	; 0x07
    2094:	ee 80       	ldd	r14, Y+6	; 0x06
    2096:	fd 80       	ldd	r15, Y+5	; 0x05
    2098:	0c 81       	ldd	r16, Y+4	; 0x04
    209a:	1b 81       	ldd	r17, Y+3	; 0x03
    209c:	aa 81       	ldd	r26, Y+2	; 0x02
    209e:	b9 81       	ldd	r27, Y+1	; 0x01
    20a0:	ce 0f       	add	r28, r30
    20a2:	d1 1d       	adc	r29, r1
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	de bf       	out	0x3e, r29	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	cd bf       	out	0x3d, r28	; 61
    20ae:	ed 01       	movw	r28, r26
    20b0:	08 95       	ret

000020b2 <__udivmodsi4>:
    20b2:	a1 e2       	ldi	r26, 0x21	; 33
    20b4:	1a 2e       	mov	r1, r26
    20b6:	aa 1b       	sub	r26, r26
    20b8:	bb 1b       	sub	r27, r27
    20ba:	fd 01       	movw	r30, r26
    20bc:	0d c0       	rjmp	.+26     	; 0x20d8 <__udivmodsi4_ep>

000020be <__udivmodsi4_loop>:
    20be:	aa 1f       	adc	r26, r26
    20c0:	bb 1f       	adc	r27, r27
    20c2:	ee 1f       	adc	r30, r30
    20c4:	ff 1f       	adc	r31, r31
    20c6:	a2 17       	cp	r26, r18
    20c8:	b3 07       	cpc	r27, r19
    20ca:	e4 07       	cpc	r30, r20
    20cc:	f5 07       	cpc	r31, r21
    20ce:	20 f0       	brcs	.+8      	; 0x20d8 <__udivmodsi4_ep>
    20d0:	a2 1b       	sub	r26, r18
    20d2:	b3 0b       	sbc	r27, r19
    20d4:	e4 0b       	sbc	r30, r20
    20d6:	f5 0b       	sbc	r31, r21

000020d8 <__udivmodsi4_ep>:
    20d8:	66 1f       	adc	r22, r22
    20da:	77 1f       	adc	r23, r23
    20dc:	88 1f       	adc	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	1a 94       	dec	r1
    20e2:	69 f7       	brne	.-38     	; 0x20be <__udivmodsi4_loop>
    20e4:	60 95       	com	r22
    20e6:	70 95       	com	r23
    20e8:	80 95       	com	r24
    20ea:	90 95       	com	r25
    20ec:	9b 01       	movw	r18, r22
    20ee:	ac 01       	movw	r20, r24
    20f0:	bd 01       	movw	r22, r26
    20f2:	cf 01       	movw	r24, r30
    20f4:	08 95       	ret

000020f6 <_exit>:
    20f6:	f8 94       	cli

000020f8 <__stop_program>:
    20f8:	ff cf       	rjmp	.-2      	; 0x20f8 <__stop_program>
