
ping-pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800100  00000e10  00000ea4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  008001f8  008001f8  00000f9c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ff8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001263  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb3  00000000  00000000  000023bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000966  00000000  00000000  00002f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  000038d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055a  00000000  00000000  00003bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007b0  00000000  00000000  00004122  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000048d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_23>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e1       	ldi	r30, 0x10	; 16
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 3f       	cpi	r26, 0xF8	; 248
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a8 ef       	ldi	r26, 0xF8	; 248
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a5 30       	cpi	r26, 0x05	; 5
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 0c 02 	call	0x418	; 0x418 <main>
  a6:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_send>:
	MCP_init(MODE_LOOPBACK);
	
	//sei();
}

void CAN_send(message_ptr msg){
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	8c 01       	movw	r16, r24
	//set ID 
	MCP_write(MCP_TXB0SIDH, msg->id >> 3);
  b6:	fc 01       	movw	r30, r24
  b8:	60 81       	ld	r22, Z
  ba:	71 81       	ldd	r23, Z+1	; 0x01
  bc:	76 95       	lsr	r23
  be:	67 95       	ror	r22
  c0:	76 95       	lsr	r23
  c2:	67 95       	ror	r22
  c4:	76 95       	lsr	r23
  c6:	67 95       	ror	r22
  c8:	81 e3       	ldi	r24, 0x31	; 49
  ca:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <MCP_write>
	MCP_write(MCP_TXB0SIDL, (msg->id % 8) << 5);
  ce:	f8 01       	movw	r30, r16
  d0:	60 81       	ld	r22, Z
  d2:	62 95       	swap	r22
  d4:	66 0f       	add	r22, r22
  d6:	60 7e       	andi	r22, 0xE0	; 224
  d8:	82 e3       	ldi	r24, 0x32	; 50
  da:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <MCP_write>
	
	//set length
	MCP_write(MCP_TXB0DLC, msg->length);
  de:	f8 01       	movw	r30, r16
  e0:	62 81       	ldd	r22, Z+2	; 0x02
  e2:	85 e3       	ldi	r24, 0x35	; 53
  e4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <MCP_write>
	
	//store data
	for(uint8_t i = 0; i < msg->length; i++){
  e8:	c0 e0       	ldi	r28, 0x00	; 0
  ea:	09 c0       	rjmp	.+18     	; 0xfe <CAN_send+0x50>
		MCP_write(MCP_TXB0D0 + i,msg->data[i]);
  ec:	f8 01       	movw	r30, r16
  ee:	ec 0f       	add	r30, r28
  f0:	f1 1d       	adc	r31, r1
  f2:	63 81       	ldd	r22, Z+3	; 0x03
  f4:	86 e3       	ldi	r24, 0x36	; 54
  f6:	8c 0f       	add	r24, r28
  f8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <MCP_write>
	
	//set length
	MCP_write(MCP_TXB0DLC, msg->length);
	
	//store data
	for(uint8_t i = 0; i < msg->length; i++){
  fc:	cf 5f       	subi	r28, 0xFF	; 255
  fe:	f8 01       	movw	r30, r16
 100:	82 81       	ldd	r24, Z+2	; 0x02
 102:	c8 17       	cp	r28, r24
 104:	98 f3       	brcs	.-26     	; 0xec <CAN_send+0x3e>
		MCP_write(MCP_TXB0D0 + i,msg->data[i]);
	}
	
	//request to send
	MCP_request_to_send(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 f6 00 	call	0x1ec	; 0x1ec <MCP_request_to_send>
}
 10c:	cf 91       	pop	r28
 10e:	1f 91       	pop	r17
 110:	0f 91       	pop	r16
 112:	08 95       	ret

00000114 <CAN_receive>:

message_t CAN_receive(){
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	8c 01       	movw	r16, r24
	message_t msg = {};
 120:	8b e0       	ldi	r24, 0x0B	; 11
 122:	f8 01       	movw	r30, r16
 124:	11 92       	st	Z+, r1
 126:	8a 95       	dec	r24
 128:	e9 f7       	brne	.-6      	; 0x124 <CAN_receive+0x10>
		
	//get ID
	uint8_t id_low = (MCP_read(MCP_RXB0SIDL)>>5);
 12a:	82 e6       	ldi	r24, 0x62	; 98
 12c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <MCP_read>
 130:	c8 2f       	mov	r28, r24
 132:	c2 95       	swap	r28
 134:	c6 95       	lsr	r28
 136:	c7 70       	andi	r28, 0x07	; 7
	uint8_t id_high = MCP_read(MCP_RXB0SIDH);
 138:	81 e6       	ldi	r24, 0x61	; 97
 13a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <MCP_read>
	msg.id = (id_high << 3) | id_low;
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	8c 2b       	or	r24, r28
 14e:	f8 01       	movw	r30, r16
 150:	91 83       	std	Z+1, r25	; 0x01
 152:	80 83       	st	Z, r24
	
	//get data length 
	msg.length = MCP_read(MCP_RXB0DLC);
 154:	85 e6       	ldi	r24, 0x65	; 101
 156:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <MCP_read>
 15a:	f8 2e       	mov	r15, r24
 15c:	f8 01       	movw	r30, r16
 15e:	82 83       	std	Z+2, r24	; 0x02
	
	//get data
	for (int i = 0; i < msg.length; i++) {
 160:	c0 e0       	ldi	r28, 0x00	; 0
 162:	d0 e0       	ldi	r29, 0x00	; 0
 164:	09 c0       	rjmp	.+18     	; 0x178 <CAN_receive+0x64>
		msg.data[i] = MCP_read(MCP_RXB0D0 + i);
 166:	8c 2f       	mov	r24, r28
 168:	8a 59       	subi	r24, 0x9A	; 154
 16a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <MCP_read>
 16e:	f8 01       	movw	r30, r16
 170:	ec 0f       	add	r30, r28
 172:	fd 1f       	adc	r31, r29
 174:	83 83       	std	Z+3, r24	; 0x03
	
	//get data length 
	msg.length = MCP_read(MCP_RXB0DLC);
	
	//get data
	for (int i = 0; i < msg.length; i++) {
 176:	21 96       	adiw	r28, 0x01	; 1
 178:	8f 2d       	mov	r24, r15
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	c8 17       	cp	r28, r24
 17e:	d9 07       	cpc	r29, r25
 180:	94 f3       	brlt	.-28     	; 0x166 <CAN_receive+0x52>
		msg.data[i] = MCP_read(MCP_RXB0D0 + i);
	}
	
	return msg;
}
 182:	c8 01       	movw	r24, r16
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	ff 90       	pop	r15
 18e:	08 95       	ret

00000190 <MCP_reset>:
	SPI_send(MCP_READ_STATUS);
	char data = SPI_receive();
	
	SPI_SS_high();
	return data;
}
 190:	0e 94 91 01 	call	0x322	; 0x322 <SPI_SS_low>
 194:	80 ec       	ldi	r24, 0xC0	; 192
 196:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SPI_send>
 19a:	0e 94 81 01 	call	0x302	; 0x302 <SPI_SS_high>
 19e:	08 95       	ret

000001a0 <MCP_read>:
 1a0:	cf 93       	push	r28
 1a2:	c8 2f       	mov	r28, r24
 1a4:	0e 94 91 01 	call	0x322	; 0x322 <SPI_SS_low>
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SPI_send>
 1ae:	8c 2f       	mov	r24, r28
 1b0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SPI_send>
 1b4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SPI_receive>
 1b8:	c8 2f       	mov	r28, r24
 1ba:	0e 94 81 01 	call	0x302	; 0x302 <SPI_SS_high>
 1be:	8c 2f       	mov	r24, r28
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <MCP_write>:
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	d8 2f       	mov	r29, r24
 1ca:	c6 2f       	mov	r28, r22
 1cc:	0e 94 91 01 	call	0x322	; 0x322 <SPI_SS_low>
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SPI_send>
 1d6:	8d 2f       	mov	r24, r29
 1d8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SPI_send>
 1dc:	8c 2f       	mov	r24, r28
 1de:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SPI_send>
 1e2:	0e 94 81 01 	call	0x302	; 0x302 <SPI_SS_high>
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <MCP_request_to_send>:
 1ec:	cf 93       	push	r28
 1ee:	c8 2f       	mov	r28, r24
 1f0:	0e 94 91 01 	call	0x322	; 0x322 <SPI_SS_low>
 1f4:	8b ea       	ldi	r24, 0xAB	; 171
 1f6:	c8 9f       	mul	r28, r24
 1f8:	81 2d       	mov	r24, r1
 1fa:	11 24       	eor	r1, r1
 1fc:	86 95       	lsr	r24
 1fe:	98 2f       	mov	r25, r24
 200:	99 0f       	add	r25, r25
 202:	89 0f       	add	r24, r25
 204:	c8 1b       	sub	r28, r24
 206:	31 f0       	breq	.+12     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 208:	c1 30       	cpi	r28, 0x01	; 1
 20a:	31 f0       	breq	.+12     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 20c:	c2 30       	cpi	r28, 0x02	; 2
 20e:	31 f0       	breq	.+12     	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
 210:	81 e8       	ldi	r24, 0x81	; 129
 212:	05 c0       	rjmp	.+10     	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
 214:	81 e8       	ldi	r24, 0x81	; 129
 216:	03 c0       	rjmp	.+6      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
 218:	82 e8       	ldi	r24, 0x82	; 130
 21a:	01 c0       	rjmp	.+2      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
 21c:	84 e8       	ldi	r24, 0x84	; 132
 21e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SPI_send>
 222:	0e 94 81 01 	call	0x302	; 0x302 <SPI_SS_high>
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <MCP_bit_modify>:

void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data) {
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	18 2f       	mov	r17, r24
 232:	d6 2f       	mov	r29, r22
 234:	c4 2f       	mov	r28, r20
	SPI_SS_low();
 236:	0e 94 91 01 	call	0x322	; 0x322 <SPI_SS_low>
	
	SPI_send(MCP_BITMOD);
 23a:	85 e0       	ldi	r24, 0x05	; 5
 23c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SPI_send>
	SPI_send(address);
 240:	81 2f       	mov	r24, r17
 242:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SPI_send>
	SPI_send(mask);
 246:	8d 2f       	mov	r24, r29
 248:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SPI_send>
	SPI_send(data);
 24c:	8c 2f       	mov	r24, r28
 24e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SPI_send>
	
	SPI_SS_high();
 252:	0e 94 81 01 	call	0x302	; 0x302 <SPI_SS_high>
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	08 95       	ret

0000025e <MCP_init>:
#include "../include/MCP.h"

void MCP_init(uint8_t mode){
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	d8 2f       	mov	r29, r24
	SPI_master_init();
 264:	0e 94 85 01 	call	0x30a	; 0x30a <SPI_master_init>
	MCP_reset();
 268:	0e 94 c8 00 	call	0x190	; 0x190 <MCP_reset>
	
	// Self-test
	uint8_t val = MCP_read(MCP_CANSTAT);
 26c:	8e e0       	ldi	r24, 0x0E	; 14
 26e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <MCP_read>
 272:	c8 2f       	mov	r28, r24
	if((val & MODE_MASK) != MODE_CONFIG) {
 274:	80 7e       	andi	r24, 0xE0	; 224
 276:	80 38       	cpi	r24, 0x80	; 128
 278:	d1 f0       	breq	.+52     	; 0x2ae <MCP_init+0x50>
		printf("\nMCP2515 is NOT in configuration mode after reset!\n\r");
 27a:	86 e0       	ldi	r24, 0x06	; 6
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	9f 93       	push	r25
 280:	8f 93       	push	r24
 282:	0e 94 41 04 	call	0x882	; 0x882 <printf>
		printf("read value: %x should be: %x\n\r", val, MODE_CONFIG);
 286:	1f 92       	push	r1
 288:	80 e8       	ldi	r24, 0x80	; 128
 28a:	8f 93       	push	r24
 28c:	1f 92       	push	r1
 28e:	cf 93       	push	r28
 290:	8b e3       	ldi	r24, 0x3B	; 59
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	9f 93       	push	r25
 296:	8f 93       	push	r24
 298:	0e 94 41 04 	call	0x882	; 0x882 <printf>
		return;
 29c:	8d b7       	in	r24, 0x3d	; 61
 29e:	9e b7       	in	r25, 0x3e	; 62
 2a0:	08 96       	adiw	r24, 0x08	; 8
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	f8 94       	cli
 2a6:	9e bf       	out	0x3e, r25	; 62
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	8d bf       	out	0x3d, r24	; 61
 2ac:	1e c0       	rjmp	.+60     	; 0x2ea <MCP_init+0x8c>
	}
	
	printf("\nMCP2515 is in configuration mode...\n\r");
 2ae:	8a e5       	ldi	r24, 0x5A	; 90
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	9f 93       	push	r25
 2b4:	8f 93       	push	r24
 2b6:	0e 94 41 04 	call	0x882	; 0x882 <printf>
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, mode);
 2ba:	4d 2f       	mov	r20, r29
 2bc:	60 ee       	ldi	r22, 0xE0	; 224
 2be:	8f e0       	ldi	r24, 0x0F	; 15
 2c0:	0e 94 15 01 	call	0x22a	; 0x22a <MCP_bit_modify>
	printf("set to MODE: %x\n\r",mode);
 2c4:	1f 92       	push	r1
 2c6:	df 93       	push	r29
 2c8:	81 e8       	ldi	r24, 0x81	; 129
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	9f 93       	push	r25
 2ce:	8f 93       	push	r24
 2d0:	0e 94 41 04 	call	0x882	; 0x882 <printf>
	
	//enable ONLY rx interrupt on buffer 0
	MCP_bit_modify(MCP_CANINTE, 0xFF, MCP_RX0IF);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	6f ef       	ldi	r22, 0xFF	; 255
 2d8:	8b e2       	ldi	r24, 0x2B	; 43
 2da:	0e 94 15 01 	call	0x22a	; 0x22a <MCP_bit_modify>
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <SPI_send>:
	SPI_SS_high(); // !SS to 1 
}

void SPI_send(uint8_t data){ 
	//remember to set SS low before calling
	SPDR = data;
 2f0:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))){} //Wait for transmission complete
 2f2:	77 9b       	sbis	0x0e, 7	; 14
 2f4:	fe cf       	rjmp	.-4      	; 0x2f2 <SPI_send+0x2>
}
 2f6:	08 95       	ret

000002f8 <SPI_receive>:

uint8_t SPI_receive() {
	SPI_send(0xAA);		//send dummy
 2f8:	8a ea       	ldi	r24, 0xAA	; 170
 2fa:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SPI_send>
	return SPDR;		// Return data register
 2fe:	8f b1       	in	r24, 0x0f	; 15
}
 300:	08 95       	ret

00000302 <SPI_SS_high>:

void SPI_SS_high(){
	PORT_SPI |= (1 << SS);
 302:	88 b3       	in	r24, 0x18	; 24
 304:	80 61       	ori	r24, 0x10	; 16
 306:	88 bb       	out	0x18, r24	; 24
 308:	08 95       	ret

0000030a <SPI_master_init>:
#include "../include/SPI.h"

void SPI_master_init(){
	// Set MOSI, SCK and !SS output
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SS);
 30a:	87 b3       	in	r24, 0x17	; 23
 30c:	80 6b       	ori	r24, 0xB0	; 176
 30e:	87 bb       	out	0x17, r24	; 23
	
	// Enable SPI, Master, set clock rate fck/16, TODO? enable interrupts
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0); //|(1<<SPIE);
 310:	8d b1       	in	r24, 0x0d	; 13
 312:	81 65       	ori	r24, 0x51	; 81
 314:	8d b9       	out	0x0d, r24	; 13
	SPCR &= ~((1 << CPOL) | (1 << CPHA)); // explicitly setting mode 00
 316:	8d b1       	in	r24, 0x0d	; 13
 318:	83 7f       	andi	r24, 0xF3	; 243
 31a:	8d b9       	out	0x0d, r24	; 13
	SPI_SS_high(); // !SS to 1 
 31c:	0e 94 81 01 	call	0x302	; 0x302 <SPI_SS_high>
 320:	08 95       	ret

00000322 <SPI_SS_low>:
void SPI_SS_high(){
	PORT_SPI |= (1 << SS);
}

void SPI_SS_low(){
	PORT_SPI &= ~(1 << SS);
 322:	88 b3       	in	r24, 0x18	; 24
 324:	8f 7e       	andi	r24, 0xEF	; 239
 326:	88 bb       	out	0x18, r24	; 24
 328:	08 95       	ret

0000032a <UART_init>:

//--------

void UART_init(unsigned int ubrr) {

	cli(); //disable interrupts
 32a:	f8 94       	cli

	UBRR0H = (unsigned char)(ubrr>>8);	//set baud rate
 32c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 32e:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<TXCIE0) | (1<<RXCIE0);  //enable RX,TX and TXC,RXC interrupts
 330:	88 ed       	ldi	r24, 0xD8	; 216
 332:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3<<UCSZ00); //frame format: 8 data bits, 2 stop bit, parity: none
 334:	8e e8       	ldi	r24, 0x8E	; 142
 336:	80 bd       	out	0x20, r24	; 32
	
	uart_output = fdevopen(UART_putchar, NULL);
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	88 ec       	ldi	r24, 0xC8	; 200
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 ba 03 	call	0x774	; 0x774 <fdevopen>
 344:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <__data_end+0x1>
 348:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <__data_end>
	stdout = uart_output;
 34c:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__iob+0x3>
 350:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__iob+0x2>
	
	sei();  //re-enable global interrupt
 354:	78 94       	sei
	
	//set led pins
	DDRB |= (1<<TXLED) | (1<<RXLED);	//direction: output
 356:	87 b3       	in	r24, 0x17	; 23
 358:	86 60       	ori	r24, 0x06	; 6
 35a:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<TXLED) | (1<<RXLED);	//turn them off (sink-mode)
 35c:	88 b3       	in	r24, 0x18	; 24
 35e:	86 60       	ori	r24, 0x06	; 6
 360:	88 bb       	out	0x18, r24	; 24
 362:	08 95       	ret

00000364 <__vector_23>:
}

//-------- TRANSMISSION -----------

ISR(USART0_TXC_vect) {
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	8f 93       	push	r24
 370:	9f 93       	push	r25
	PORTB ^= (1<<TXLED); //blink as response of successful transmission
 372:	98 b3       	in	r25, 0x18	; 24
 374:	84 e0       	ldi	r24, 0x04	; 4
 376:	89 27       	eor	r24, r25
 378:	88 bb       	out	0x18, r24	; 24
}
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <UART_transmit>:

void UART_transmit(char data){
	while (!(UCSR0A & (1<<UDRE0))); //wait until UDRE->1 = ready
 388:	5d 9b       	sbis	0x0b, 5	; 11
 38a:	fe cf       	rjmp	.-4      	; 0x388 <UART_transmit>
	UDR0 = data;
 38c:	8c b9       	out	0x0c, r24	; 12
 38e:	08 95       	ret

00000390 <UART_putchar>:
}

// using two different functions transmit data (maybe unify them under putchar) / maybe adding ring buffer to write data also
int UART_putchar(char c, FILE *stream)
{	UART_transmit(c);
 390:	0e 94 c4 01 	call	0x388	; 0x388 <UART_transmit>
	return 0;
}
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	08 95       	ret

0000039a <UART_receive>:

//---------- RECEIVING ------------

char UART_receive(){
	//frame-error OR data-over-run OR parity-error
	if ( UCSR0A & ((1<<FE0)|(1<<DOR0)|(1<<UPE0)) )
 39a:	8b b1       	in	r24, 0x0b	; 11
 39c:	8c 71       	andi	r24, 0x1C	; 28
 39e:	31 f4       	brne	.+12     	; 0x3ac <UART_receive+0x12>
		return -1;
	
	PORTB ^= (1<<RXLED); //blink led to report success of rx
 3a0:	98 b3       	in	r25, 0x18	; 24
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	89 27       	eor	r24, r25
 3a6:	88 bb       	out	0x18, r24	; 24
	return UDR0;
 3a8:	8c b1       	in	r24, 0x0c	; 12
 3aa:	08 95       	ret
//---------- RECEIVING ------------

char UART_receive(){
	//frame-error OR data-over-run OR parity-error
	if ( UCSR0A & ((1<<FE0)|(1<<DOR0)|(1<<UPE0)) )
		return -1;
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
	
	PORTB ^= (1<<RXLED); //blink led to report success of rx
	return UDR0;
}
 3ae:	08 95       	ret

000003b0 <__vector_19>:

// Interrupt service routine for receiving data
ISR(USART0_RXC_vect) {
 3b0:	1f 92       	push	r1
 3b2:	0f 92       	push	r0
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
	received_data = UART_receive();
 3d2:	0e 94 cd 01 	call	0x39a	; 0x39a <UART_receive>
 3d6:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <received_data>
	printf("@echo: %c\n\r", received_data);
 3da:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <received_data>
 3de:	1f 92       	push	r1
 3e0:	8f 93       	push	r24
 3e2:	83 e9       	ldi	r24, 0x93	; 147
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	9f 93       	push	r25
 3e8:	8f 93       	push	r24
 3ea:	0e 94 41 04 	call	0x882	; 0x882 <printf>
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	bf 91       	pop	r27
 3fc:	af 91       	pop	r26
 3fe:	9f 91       	pop	r25
 400:	8f 91       	pop	r24
 402:	7f 91       	pop	r23
 404:	6f 91       	pop	r22
 406:	5f 91       	pop	r21
 408:	4f 91       	pop	r20
 40a:	3f 91       	pop	r19
 40c:	2f 91       	pop	r18
 40e:	0f 90       	pop	r0
 410:	0f be       	out	0x3f, r0	; 63
 412:	0f 90       	pop	r0
 414:	1f 90       	pop	r1
 416:	18 95       	reti

00000418 <main>:
#include "utils.h"

int main(void) {
 418:	ef 92       	push	r14
 41a:	ff 92       	push	r15
 41c:	0f 93       	push	r16
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
 428:	66 97       	sbiw	r28, 0x16	; 22
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	f8 94       	cli
 42e:	de bf       	out	0x3e, r29	; 62
 430:	0f be       	out	0x3f, r0	; 63
 432:	cd bf       	out	0x3d, r28	; 61
	UART_init(MYUBRR);
 434:	8f e1       	ldi	r24, 0x1F	; 31
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 95 01 	call	0x32a	; 0x32a <UART_init>
	MCP_init(MODE_LOOPBACK); // set loopback mode
 43c:	80 e4       	ldi	r24, 0x40	; 64
 43e:	0e 94 2f 01 	call	0x25e	; 0x25e <MCP_init>
	
	//create data
	message_t msg = {1, 2, {0xC1, 0xA0, 0x33}};
 442:	ce 01       	movw	r24, r28
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	2b e0       	ldi	r18, 0x0B	; 11
 448:	fc 01       	movw	r30, r24
 44a:	11 92       	st	Z+, r1
 44c:	2a 95       	dec	r18
 44e:	e9 f7       	brne	.-6      	; 0x44a <main+0x32>
 450:	21 e0       	ldi	r18, 0x01	; 1
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	3a 83       	std	Y+2, r19	; 0x02
 456:	29 83       	std	Y+1, r18	; 0x01
 458:	22 e0       	ldi	r18, 0x02	; 2
 45a:	2b 83       	std	Y+3, r18	; 0x03
 45c:	21 ec       	ldi	r18, 0xC1	; 193
 45e:	2c 83       	std	Y+4, r18	; 0x04
 460:	20 ea       	ldi	r18, 0xA0	; 160
 462:	2d 83       	std	Y+5, r18	; 0x05
 464:	23 e3       	ldi	r18, 0x33	; 51
 466:	2e 83       	std	Y+6, r18	; 0x06
	
	//send
	CAN_send(&msg);
 468:	0e 94 57 00 	call	0xae	; 0xae <CAN_send>
	
	//check flag
	uint8_t flag = (MCP_read(MCP_CANINTF) & MCP_RX0IF);
 46c:	8c e2       	ldi	r24, 0x2C	; 44
 46e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <MCP_read>
 472:	81 70       	andi	r24, 0x01	; 1
	printf("interrupt flag: %x\r\n", flag);
 474:	1f 92       	push	r1
 476:	8f 93       	push	r24
 478:	8f e9       	ldi	r24, 0x9F	; 159
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	9f 93       	push	r25
 47e:	8f 93       	push	r24
 480:	0e 94 41 04 	call	0x882	; 0x882 <printf>
	
	//read data
	message_t rec = CAN_receive();
 484:	ce 01       	movw	r24, r28
 486:	0c 96       	adiw	r24, 0x0c	; 12
 488:	0e 94 8a 00 	call	0x114	; 0x114 <CAN_receive>
	printf("received: %x: long %d bytes:: ", rec.id, rec.length);
 48c:	8e 85       	ldd	r24, Y+14	; 0x0e
 48e:	e8 2e       	mov	r14, r24
 490:	f1 2c       	mov	r15, r1
 492:	1f 92       	push	r1
 494:	8f 93       	push	r24
 496:	8d 85       	ldd	r24, Y+13	; 0x0d
 498:	8f 93       	push	r24
 49a:	8c 85       	ldd	r24, Y+12	; 0x0c
 49c:	8f 93       	push	r24
 49e:	84 eb       	ldi	r24, 0xB4	; 180
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	9f 93       	push	r25
 4a4:	8f 93       	push	r24
 4a6:	0e 94 41 04 	call	0x882	; 0x882 <printf>
	
	for(int i=0; i<rec.length; i++){
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	f8 94       	cli
 4ae:	de bf       	out	0x3e, r29	; 62
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	cd bf       	out	0x3d, r28	; 61
 4b4:	00 e0       	ldi	r16, 0x00	; 0
 4b6:	10 e0       	ldi	r17, 0x00	; 0
 4b8:	15 c0       	rjmp	.+42     	; 0x4e4 <main+0xcc>
		printf("%x",rec.data[i]);
 4ba:	ef e0       	ldi	r30, 0x0F	; 15
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	ec 0f       	add	r30, r28
 4c0:	fd 1f       	adc	r31, r29
 4c2:	e0 0f       	add	r30, r16
 4c4:	f1 1f       	adc	r31, r17
 4c6:	80 81       	ld	r24, Z
 4c8:	1f 92       	push	r1
 4ca:	8f 93       	push	r24
 4cc:	83 ed       	ldi	r24, 0xD3	; 211
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	9f 93       	push	r25
 4d2:	8f 93       	push	r24
 4d4:	0e 94 41 04 	call	0x882	; 0x882 <printf>
	
	//read data
	message_t rec = CAN_receive();
	printf("received: %x: long %d bytes:: ", rec.id, rec.length);
	
	for(int i=0; i<rec.length; i++){
 4d8:	0f 5f       	subi	r16, 0xFF	; 255
 4da:	1f 4f       	sbci	r17, 0xFF	; 255
 4dc:	0f 90       	pop	r0
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	0e 15       	cp	r16, r14
 4e6:	1f 05       	cpc	r17, r15
 4e8:	44 f3       	brlt	.-48     	; 0x4ba <main+0xa2>
		printf("%x",rec.data[i]);
	}
	
	//clear flag
	MCP_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
 4ea:	40 e0       	ldi	r20, 0x00	; 0
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	8c e2       	ldi	r24, 0x2C	; 44
 4f0:	0e 94 15 01 	call	0x22a	; 0x22a <MCP_bit_modify>
	flag = (MCP_read(MCP_CANINTF) & MCP_RX0IF);
 4f4:	8c e2       	ldi	r24, 0x2C	; 44
 4f6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <MCP_read>
 4fa:	81 70       	andi	r24, 0x01	; 1
	printf("\n\ris it CLEARED?: int flag: %x\r\n", flag);
 4fc:	1f 92       	push	r1
 4fe:	8f 93       	push	r24
 500:	86 ed       	ldi	r24, 0xD6	; 214
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	9f 93       	push	r25
 506:	8f 93       	push	r24
 508:	0e 94 41 04 	call	0x882	; 0x882 <printf>
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	66 96       	adiw	r28, 0x16	; 22
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	f8 94       	cli
 51e:	de bf       	out	0x3e, r29	; 62
 520:	0f be       	out	0x3f, r0	; 63
 522:	cd bf       	out	0x3d, r28	; 61
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	ff 90       	pop	r15
 52e:	ef 90       	pop	r14
 530:	08 95       	ret

00000532 <malloc>:
 532:	0f 93       	push	r16
 534:	1f 93       	push	r17
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	82 30       	cpi	r24, 0x02	; 2
 53c:	91 05       	cpc	r25, r1
 53e:	10 f4       	brcc	.+4      	; 0x544 <malloc+0x12>
 540:	82 e0       	ldi	r24, 0x02	; 2
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <__flp>
 548:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <__flp+0x1>
 54c:	20 e0       	ldi	r18, 0x00	; 0
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	a0 e0       	ldi	r26, 0x00	; 0
 552:	b0 e0       	ldi	r27, 0x00	; 0
 554:	30 97       	sbiw	r30, 0x00	; 0
 556:	19 f1       	breq	.+70     	; 0x59e <malloc+0x6c>
 558:	40 81       	ld	r20, Z
 55a:	51 81       	ldd	r21, Z+1	; 0x01
 55c:	02 81       	ldd	r16, Z+2	; 0x02
 55e:	13 81       	ldd	r17, Z+3	; 0x03
 560:	48 17       	cp	r20, r24
 562:	59 07       	cpc	r21, r25
 564:	c8 f0       	brcs	.+50     	; 0x598 <malloc+0x66>
 566:	84 17       	cp	r24, r20
 568:	95 07       	cpc	r25, r21
 56a:	69 f4       	brne	.+26     	; 0x586 <malloc+0x54>
 56c:	10 97       	sbiw	r26, 0x00	; 0
 56e:	31 f0       	breq	.+12     	; 0x57c <malloc+0x4a>
 570:	12 96       	adiw	r26, 0x02	; 2
 572:	0c 93       	st	X, r16
 574:	12 97       	sbiw	r26, 0x02	; 2
 576:	13 96       	adiw	r26, 0x03	; 3
 578:	1c 93       	st	X, r17
 57a:	27 c0       	rjmp	.+78     	; 0x5ca <malloc+0x98>
 57c:	00 93 fd 01 	sts	0x01FD, r16	; 0x8001fd <__flp>
 580:	10 93 fe 01 	sts	0x01FE, r17	; 0x8001fe <__flp+0x1>
 584:	22 c0       	rjmp	.+68     	; 0x5ca <malloc+0x98>
 586:	21 15       	cp	r18, r1
 588:	31 05       	cpc	r19, r1
 58a:	19 f0       	breq	.+6      	; 0x592 <malloc+0x60>
 58c:	42 17       	cp	r20, r18
 58e:	53 07       	cpc	r21, r19
 590:	18 f4       	brcc	.+6      	; 0x598 <malloc+0x66>
 592:	9a 01       	movw	r18, r20
 594:	bd 01       	movw	r22, r26
 596:	ef 01       	movw	r28, r30
 598:	df 01       	movw	r26, r30
 59a:	f8 01       	movw	r30, r16
 59c:	db cf       	rjmp	.-74     	; 0x554 <malloc+0x22>
 59e:	21 15       	cp	r18, r1
 5a0:	31 05       	cpc	r19, r1
 5a2:	f9 f0       	breq	.+62     	; 0x5e2 <malloc+0xb0>
 5a4:	28 1b       	sub	r18, r24
 5a6:	39 0b       	sbc	r19, r25
 5a8:	24 30       	cpi	r18, 0x04	; 4
 5aa:	31 05       	cpc	r19, r1
 5ac:	80 f4       	brcc	.+32     	; 0x5ce <malloc+0x9c>
 5ae:	8a 81       	ldd	r24, Y+2	; 0x02
 5b0:	9b 81       	ldd	r25, Y+3	; 0x03
 5b2:	61 15       	cp	r22, r1
 5b4:	71 05       	cpc	r23, r1
 5b6:	21 f0       	breq	.+8      	; 0x5c0 <malloc+0x8e>
 5b8:	fb 01       	movw	r30, r22
 5ba:	93 83       	std	Z+3, r25	; 0x03
 5bc:	82 83       	std	Z+2, r24	; 0x02
 5be:	04 c0       	rjmp	.+8      	; 0x5c8 <malloc+0x96>
 5c0:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <__flp+0x1>
 5c4:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <__flp>
 5c8:	fe 01       	movw	r30, r28
 5ca:	32 96       	adiw	r30, 0x02	; 2
 5cc:	44 c0       	rjmp	.+136    	; 0x656 <malloc+0x124>
 5ce:	fe 01       	movw	r30, r28
 5d0:	e2 0f       	add	r30, r18
 5d2:	f3 1f       	adc	r31, r19
 5d4:	81 93       	st	Z+, r24
 5d6:	91 93       	st	Z+, r25
 5d8:	22 50       	subi	r18, 0x02	; 2
 5da:	31 09       	sbc	r19, r1
 5dc:	39 83       	std	Y+1, r19	; 0x01
 5de:	28 83       	st	Y, r18
 5e0:	3a c0       	rjmp	.+116    	; 0x656 <malloc+0x124>
 5e2:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <__brkval>
 5e6:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <__brkval+0x1>
 5ea:	23 2b       	or	r18, r19
 5ec:	41 f4       	brne	.+16     	; 0x5fe <malloc+0xcc>
 5ee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 5f2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 5f6:	30 93 fc 01 	sts	0x01FC, r19	; 0x8001fc <__brkval+0x1>
 5fa:	20 93 fb 01 	sts	0x01FB, r18	; 0x8001fb <__brkval>
 5fe:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 602:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 606:	21 15       	cp	r18, r1
 608:	31 05       	cpc	r19, r1
 60a:	41 f4       	brne	.+16     	; 0x61c <malloc+0xea>
 60c:	2d b7       	in	r18, 0x3d	; 61
 60e:	3e b7       	in	r19, 0x3e	; 62
 610:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 614:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 618:	24 1b       	sub	r18, r20
 61a:	35 0b       	sbc	r19, r21
 61c:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <__brkval>
 620:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <__brkval+0x1>
 624:	e2 17       	cp	r30, r18
 626:	f3 07       	cpc	r31, r19
 628:	a0 f4       	brcc	.+40     	; 0x652 <malloc+0x120>
 62a:	2e 1b       	sub	r18, r30
 62c:	3f 0b       	sbc	r19, r31
 62e:	28 17       	cp	r18, r24
 630:	39 07       	cpc	r19, r25
 632:	78 f0       	brcs	.+30     	; 0x652 <malloc+0x120>
 634:	ac 01       	movw	r20, r24
 636:	4e 5f       	subi	r20, 0xFE	; 254
 638:	5f 4f       	sbci	r21, 0xFF	; 255
 63a:	24 17       	cp	r18, r20
 63c:	35 07       	cpc	r19, r21
 63e:	48 f0       	brcs	.+18     	; 0x652 <malloc+0x120>
 640:	4e 0f       	add	r20, r30
 642:	5f 1f       	adc	r21, r31
 644:	50 93 fc 01 	sts	0x01FC, r21	; 0x8001fc <__brkval+0x1>
 648:	40 93 fb 01 	sts	0x01FB, r20	; 0x8001fb <__brkval>
 64c:	81 93       	st	Z+, r24
 64e:	91 93       	st	Z+, r25
 650:	02 c0       	rjmp	.+4      	; 0x656 <malloc+0x124>
 652:	e0 e0       	ldi	r30, 0x00	; 0
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	cf 01       	movw	r24, r30
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	1f 91       	pop	r17
 65e:	0f 91       	pop	r16
 660:	08 95       	ret

00000662 <free>:
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	00 97       	sbiw	r24, 0x00	; 0
 668:	09 f4       	brne	.+2      	; 0x66c <free+0xa>
 66a:	81 c0       	rjmp	.+258    	; 0x76e <free+0x10c>
 66c:	fc 01       	movw	r30, r24
 66e:	32 97       	sbiw	r30, 0x02	; 2
 670:	13 82       	std	Z+3, r1	; 0x03
 672:	12 82       	std	Z+2, r1	; 0x02
 674:	a0 91 fd 01 	lds	r26, 0x01FD	; 0x8001fd <__flp>
 678:	b0 91 fe 01 	lds	r27, 0x01FE	; 0x8001fe <__flp+0x1>
 67c:	10 97       	sbiw	r26, 0x00	; 0
 67e:	81 f4       	brne	.+32     	; 0x6a0 <free+0x3e>
 680:	20 81       	ld	r18, Z
 682:	31 81       	ldd	r19, Z+1	; 0x01
 684:	82 0f       	add	r24, r18
 686:	93 1f       	adc	r25, r19
 688:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <__brkval>
 68c:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <__brkval+0x1>
 690:	28 17       	cp	r18, r24
 692:	39 07       	cpc	r19, r25
 694:	51 f5       	brne	.+84     	; 0x6ea <free+0x88>
 696:	f0 93 fc 01 	sts	0x01FC, r31	; 0x8001fc <__brkval+0x1>
 69a:	e0 93 fb 01 	sts	0x01FB, r30	; 0x8001fb <__brkval>
 69e:	67 c0       	rjmp	.+206    	; 0x76e <free+0x10c>
 6a0:	ed 01       	movw	r28, r26
 6a2:	20 e0       	ldi	r18, 0x00	; 0
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	ce 17       	cp	r28, r30
 6a8:	df 07       	cpc	r29, r31
 6aa:	40 f4       	brcc	.+16     	; 0x6bc <free+0x5a>
 6ac:	4a 81       	ldd	r20, Y+2	; 0x02
 6ae:	5b 81       	ldd	r21, Y+3	; 0x03
 6b0:	9e 01       	movw	r18, r28
 6b2:	41 15       	cp	r20, r1
 6b4:	51 05       	cpc	r21, r1
 6b6:	f1 f0       	breq	.+60     	; 0x6f4 <free+0x92>
 6b8:	ea 01       	movw	r28, r20
 6ba:	f5 cf       	rjmp	.-22     	; 0x6a6 <free+0x44>
 6bc:	d3 83       	std	Z+3, r29	; 0x03
 6be:	c2 83       	std	Z+2, r28	; 0x02
 6c0:	40 81       	ld	r20, Z
 6c2:	51 81       	ldd	r21, Z+1	; 0x01
 6c4:	84 0f       	add	r24, r20
 6c6:	95 1f       	adc	r25, r21
 6c8:	c8 17       	cp	r28, r24
 6ca:	d9 07       	cpc	r29, r25
 6cc:	59 f4       	brne	.+22     	; 0x6e4 <free+0x82>
 6ce:	88 81       	ld	r24, Y
 6d0:	99 81       	ldd	r25, Y+1	; 0x01
 6d2:	84 0f       	add	r24, r20
 6d4:	95 1f       	adc	r25, r21
 6d6:	02 96       	adiw	r24, 0x02	; 2
 6d8:	91 83       	std	Z+1, r25	; 0x01
 6da:	80 83       	st	Z, r24
 6dc:	8a 81       	ldd	r24, Y+2	; 0x02
 6de:	9b 81       	ldd	r25, Y+3	; 0x03
 6e0:	93 83       	std	Z+3, r25	; 0x03
 6e2:	82 83       	std	Z+2, r24	; 0x02
 6e4:	21 15       	cp	r18, r1
 6e6:	31 05       	cpc	r19, r1
 6e8:	29 f4       	brne	.+10     	; 0x6f4 <free+0x92>
 6ea:	f0 93 fe 01 	sts	0x01FE, r31	; 0x8001fe <__flp+0x1>
 6ee:	e0 93 fd 01 	sts	0x01FD, r30	; 0x8001fd <__flp>
 6f2:	3d c0       	rjmp	.+122    	; 0x76e <free+0x10c>
 6f4:	e9 01       	movw	r28, r18
 6f6:	fb 83       	std	Y+3, r31	; 0x03
 6f8:	ea 83       	std	Y+2, r30	; 0x02
 6fa:	49 91       	ld	r20, Y+
 6fc:	59 91       	ld	r21, Y+
 6fe:	c4 0f       	add	r28, r20
 700:	d5 1f       	adc	r29, r21
 702:	ec 17       	cp	r30, r28
 704:	fd 07       	cpc	r31, r29
 706:	61 f4       	brne	.+24     	; 0x720 <free+0xbe>
 708:	80 81       	ld	r24, Z
 70a:	91 81       	ldd	r25, Z+1	; 0x01
 70c:	84 0f       	add	r24, r20
 70e:	95 1f       	adc	r25, r21
 710:	02 96       	adiw	r24, 0x02	; 2
 712:	e9 01       	movw	r28, r18
 714:	99 83       	std	Y+1, r25	; 0x01
 716:	88 83       	st	Y, r24
 718:	82 81       	ldd	r24, Z+2	; 0x02
 71a:	93 81       	ldd	r25, Z+3	; 0x03
 71c:	9b 83       	std	Y+3, r25	; 0x03
 71e:	8a 83       	std	Y+2, r24	; 0x02
 720:	e0 e0       	ldi	r30, 0x00	; 0
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	12 96       	adiw	r26, 0x02	; 2
 726:	8d 91       	ld	r24, X+
 728:	9c 91       	ld	r25, X
 72a:	13 97       	sbiw	r26, 0x03	; 3
 72c:	00 97       	sbiw	r24, 0x00	; 0
 72e:	19 f0       	breq	.+6      	; 0x736 <free+0xd4>
 730:	fd 01       	movw	r30, r26
 732:	dc 01       	movw	r26, r24
 734:	f7 cf       	rjmp	.-18     	; 0x724 <free+0xc2>
 736:	8d 91       	ld	r24, X+
 738:	9c 91       	ld	r25, X
 73a:	11 97       	sbiw	r26, 0x01	; 1
 73c:	9d 01       	movw	r18, r26
 73e:	2e 5f       	subi	r18, 0xFE	; 254
 740:	3f 4f       	sbci	r19, 0xFF	; 255
 742:	82 0f       	add	r24, r18
 744:	93 1f       	adc	r25, r19
 746:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <__brkval>
 74a:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <__brkval+0x1>
 74e:	28 17       	cp	r18, r24
 750:	39 07       	cpc	r19, r25
 752:	69 f4       	brne	.+26     	; 0x76e <free+0x10c>
 754:	30 97       	sbiw	r30, 0x00	; 0
 756:	29 f4       	brne	.+10     	; 0x762 <free+0x100>
 758:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <__flp+0x1>
 75c:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <__flp>
 760:	02 c0       	rjmp	.+4      	; 0x766 <free+0x104>
 762:	13 82       	std	Z+3, r1	; 0x03
 764:	12 82       	std	Z+2, r1	; 0x02
 766:	b0 93 fc 01 	sts	0x01FC, r27	; 0x8001fc <__brkval+0x1>
 76a:	a0 93 fb 01 	sts	0x01FB, r26	; 0x8001fb <__brkval>
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	08 95       	ret

00000774 <fdevopen>:
 774:	0f 93       	push	r16
 776:	1f 93       	push	r17
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	00 97       	sbiw	r24, 0x00	; 0
 77e:	31 f4       	brne	.+12     	; 0x78c <fdevopen+0x18>
 780:	61 15       	cp	r22, r1
 782:	71 05       	cpc	r23, r1
 784:	19 f4       	brne	.+6      	; 0x78c <fdevopen+0x18>
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	3a c0       	rjmp	.+116    	; 0x800 <fdevopen+0x8c>
 78c:	8b 01       	movw	r16, r22
 78e:	ec 01       	movw	r28, r24
 790:	6e e0       	ldi	r22, 0x0E	; 14
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	0e 94 38 06 	call	0xc70	; 0xc70 <calloc>
 79c:	fc 01       	movw	r30, r24
 79e:	89 2b       	or	r24, r25
 7a0:	91 f3       	breq	.-28     	; 0x786 <fdevopen+0x12>
 7a2:	80 e8       	ldi	r24, 0x80	; 128
 7a4:	83 83       	std	Z+3, r24	; 0x03
 7a6:	01 15       	cp	r16, r1
 7a8:	11 05       	cpc	r17, r1
 7aa:	71 f0       	breq	.+28     	; 0x7c8 <fdevopen+0x54>
 7ac:	13 87       	std	Z+11, r17	; 0x0b
 7ae:	02 87       	std	Z+10, r16	; 0x0a
 7b0:	81 e8       	ldi	r24, 0x81	; 129
 7b2:	83 83       	std	Z+3, r24	; 0x03
 7b4:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <__iob>
 7b8:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__iob+0x1>
 7bc:	89 2b       	or	r24, r25
 7be:	21 f4       	brne	.+8      	; 0x7c8 <fdevopen+0x54>
 7c0:	f0 93 00 02 	sts	0x0200, r31	; 0x800200 <__iob+0x1>
 7c4:	e0 93 ff 01 	sts	0x01FF, r30	; 0x8001ff <__iob>
 7c8:	20 97       	sbiw	r28, 0x00	; 0
 7ca:	c9 f0       	breq	.+50     	; 0x7fe <fdevopen+0x8a>
 7cc:	d1 87       	std	Z+9, r29	; 0x09
 7ce:	c0 87       	std	Z+8, r28	; 0x08
 7d0:	83 81       	ldd	r24, Z+3	; 0x03
 7d2:	82 60       	ori	r24, 0x02	; 2
 7d4:	83 83       	std	Z+3, r24	; 0x03
 7d6:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <__iob+0x2>
 7da:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <__iob+0x3>
 7de:	89 2b       	or	r24, r25
 7e0:	71 f4       	brne	.+28     	; 0x7fe <fdevopen+0x8a>
 7e2:	f0 93 02 02 	sts	0x0202, r31	; 0x800202 <__iob+0x3>
 7e6:	e0 93 01 02 	sts	0x0201, r30	; 0x800201 <__iob+0x2>
 7ea:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <__iob+0x4>
 7ee:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <__iob+0x5>
 7f2:	89 2b       	or	r24, r25
 7f4:	21 f4       	brne	.+8      	; 0x7fe <fdevopen+0x8a>
 7f6:	f0 93 04 02 	sts	0x0204, r31	; 0x800204 <__iob+0x5>
 7fa:	e0 93 03 02 	sts	0x0203, r30	; 0x800203 <__iob+0x4>
 7fe:	cf 01       	movw	r24, r30
 800:	df 91       	pop	r29
 802:	cf 91       	pop	r28
 804:	1f 91       	pop	r17
 806:	0f 91       	pop	r16
 808:	08 95       	ret

0000080a <fputc>:
 80a:	0f 93       	push	r16
 80c:	1f 93       	push	r17
 80e:	cf 93       	push	r28
 810:	df 93       	push	r29
 812:	fb 01       	movw	r30, r22
 814:	23 81       	ldd	r18, Z+3	; 0x03
 816:	21 fd       	sbrc	r18, 1
 818:	03 c0       	rjmp	.+6      	; 0x820 <fputc+0x16>
 81a:	8f ef       	ldi	r24, 0xFF	; 255
 81c:	9f ef       	ldi	r25, 0xFF	; 255
 81e:	2c c0       	rjmp	.+88     	; 0x878 <fputc+0x6e>
 820:	22 ff       	sbrs	r18, 2
 822:	16 c0       	rjmp	.+44     	; 0x850 <fputc+0x46>
 824:	46 81       	ldd	r20, Z+6	; 0x06
 826:	57 81       	ldd	r21, Z+7	; 0x07
 828:	24 81       	ldd	r18, Z+4	; 0x04
 82a:	35 81       	ldd	r19, Z+5	; 0x05
 82c:	42 17       	cp	r20, r18
 82e:	53 07       	cpc	r21, r19
 830:	44 f4       	brge	.+16     	; 0x842 <fputc+0x38>
 832:	a0 81       	ld	r26, Z
 834:	b1 81       	ldd	r27, Z+1	; 0x01
 836:	9d 01       	movw	r18, r26
 838:	2f 5f       	subi	r18, 0xFF	; 255
 83a:	3f 4f       	sbci	r19, 0xFF	; 255
 83c:	31 83       	std	Z+1, r19	; 0x01
 83e:	20 83       	st	Z, r18
 840:	8c 93       	st	X, r24
 842:	26 81       	ldd	r18, Z+6	; 0x06
 844:	37 81       	ldd	r19, Z+7	; 0x07
 846:	2f 5f       	subi	r18, 0xFF	; 255
 848:	3f 4f       	sbci	r19, 0xFF	; 255
 84a:	37 83       	std	Z+7, r19	; 0x07
 84c:	26 83       	std	Z+6, r18	; 0x06
 84e:	14 c0       	rjmp	.+40     	; 0x878 <fputc+0x6e>
 850:	8b 01       	movw	r16, r22
 852:	ec 01       	movw	r28, r24
 854:	fb 01       	movw	r30, r22
 856:	00 84       	ldd	r0, Z+8	; 0x08
 858:	f1 85       	ldd	r31, Z+9	; 0x09
 85a:	e0 2d       	mov	r30, r0
 85c:	09 95       	icall
 85e:	89 2b       	or	r24, r25
 860:	e1 f6       	brne	.-72     	; 0x81a <fputc+0x10>
 862:	d8 01       	movw	r26, r16
 864:	16 96       	adiw	r26, 0x06	; 6
 866:	8d 91       	ld	r24, X+
 868:	9c 91       	ld	r25, X
 86a:	17 97       	sbiw	r26, 0x07	; 7
 86c:	01 96       	adiw	r24, 0x01	; 1
 86e:	17 96       	adiw	r26, 0x07	; 7
 870:	9c 93       	st	X, r25
 872:	8e 93       	st	-X, r24
 874:	16 97       	sbiw	r26, 0x06	; 6
 876:	ce 01       	movw	r24, r28
 878:	df 91       	pop	r29
 87a:	cf 91       	pop	r28
 87c:	1f 91       	pop	r17
 87e:	0f 91       	pop	r16
 880:	08 95       	ret

00000882 <printf>:
 882:	a0 e0       	ldi	r26, 0x00	; 0
 884:	b0 e0       	ldi	r27, 0x00	; 0
 886:	e7 e4       	ldi	r30, 0x47	; 71
 888:	f4 e0       	ldi	r31, 0x04	; 4
 88a:	0c 94 df 06 	jmp	0xdbe	; 0xdbe <__prologue_saves__+0x20>
 88e:	ae 01       	movw	r20, r28
 890:	4b 5f       	subi	r20, 0xFB	; 251
 892:	5f 4f       	sbci	r21, 0xFF	; 255
 894:	fa 01       	movw	r30, r20
 896:	61 91       	ld	r22, Z+
 898:	71 91       	ld	r23, Z+
 89a:	af 01       	movw	r20, r30
 89c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <__iob+0x2>
 8a0:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <__iob+0x3>
 8a4:	0e 94 57 04 	call	0x8ae	; 0x8ae <vfprintf>
 8a8:	e2 e0       	ldi	r30, 0x02	; 2
 8aa:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__epilogue_restores__+0x20>

000008ae <vfprintf>:
 8ae:	ab e0       	ldi	r26, 0x0B	; 11
 8b0:	b0 e0       	ldi	r27, 0x00	; 0
 8b2:	ed e5       	ldi	r30, 0x5D	; 93
 8b4:	f4 e0       	ldi	r31, 0x04	; 4
 8b6:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__prologue_saves__>
 8ba:	6c 01       	movw	r12, r24
 8bc:	7b 01       	movw	r14, r22
 8be:	8a 01       	movw	r16, r20
 8c0:	fc 01       	movw	r30, r24
 8c2:	17 82       	std	Z+7, r1	; 0x07
 8c4:	16 82       	std	Z+6, r1	; 0x06
 8c6:	83 81       	ldd	r24, Z+3	; 0x03
 8c8:	81 ff       	sbrs	r24, 1
 8ca:	cc c1       	rjmp	.+920    	; 0xc64 <vfprintf+0x3b6>
 8cc:	ce 01       	movw	r24, r28
 8ce:	01 96       	adiw	r24, 0x01	; 1
 8d0:	3c 01       	movw	r6, r24
 8d2:	f6 01       	movw	r30, r12
 8d4:	93 81       	ldd	r25, Z+3	; 0x03
 8d6:	f7 01       	movw	r30, r14
 8d8:	93 fd       	sbrc	r25, 3
 8da:	85 91       	lpm	r24, Z+
 8dc:	93 ff       	sbrs	r25, 3
 8de:	81 91       	ld	r24, Z+
 8e0:	7f 01       	movw	r14, r30
 8e2:	88 23       	and	r24, r24
 8e4:	09 f4       	brne	.+2      	; 0x8e8 <vfprintf+0x3a>
 8e6:	ba c1       	rjmp	.+884    	; 0xc5c <vfprintf+0x3ae>
 8e8:	85 32       	cpi	r24, 0x25	; 37
 8ea:	39 f4       	brne	.+14     	; 0x8fa <vfprintf+0x4c>
 8ec:	93 fd       	sbrc	r25, 3
 8ee:	85 91       	lpm	r24, Z+
 8f0:	93 ff       	sbrs	r25, 3
 8f2:	81 91       	ld	r24, Z+
 8f4:	7f 01       	movw	r14, r30
 8f6:	85 32       	cpi	r24, 0x25	; 37
 8f8:	29 f4       	brne	.+10     	; 0x904 <vfprintf+0x56>
 8fa:	b6 01       	movw	r22, r12
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	0e 94 05 04 	call	0x80a	; 0x80a <fputc>
 902:	e7 cf       	rjmp	.-50     	; 0x8d2 <vfprintf+0x24>
 904:	91 2c       	mov	r9, r1
 906:	21 2c       	mov	r2, r1
 908:	31 2c       	mov	r3, r1
 90a:	ff e1       	ldi	r31, 0x1F	; 31
 90c:	f3 15       	cp	r31, r3
 90e:	d8 f0       	brcs	.+54     	; 0x946 <vfprintf+0x98>
 910:	8b 32       	cpi	r24, 0x2B	; 43
 912:	79 f0       	breq	.+30     	; 0x932 <vfprintf+0x84>
 914:	38 f4       	brcc	.+14     	; 0x924 <vfprintf+0x76>
 916:	80 32       	cpi	r24, 0x20	; 32
 918:	79 f0       	breq	.+30     	; 0x938 <vfprintf+0x8a>
 91a:	83 32       	cpi	r24, 0x23	; 35
 91c:	a1 f4       	brne	.+40     	; 0x946 <vfprintf+0x98>
 91e:	23 2d       	mov	r18, r3
 920:	20 61       	ori	r18, 0x10	; 16
 922:	1d c0       	rjmp	.+58     	; 0x95e <vfprintf+0xb0>
 924:	8d 32       	cpi	r24, 0x2D	; 45
 926:	61 f0       	breq	.+24     	; 0x940 <vfprintf+0x92>
 928:	80 33       	cpi	r24, 0x30	; 48
 92a:	69 f4       	brne	.+26     	; 0x946 <vfprintf+0x98>
 92c:	23 2d       	mov	r18, r3
 92e:	21 60       	ori	r18, 0x01	; 1
 930:	16 c0       	rjmp	.+44     	; 0x95e <vfprintf+0xb0>
 932:	83 2d       	mov	r24, r3
 934:	82 60       	ori	r24, 0x02	; 2
 936:	38 2e       	mov	r3, r24
 938:	e3 2d       	mov	r30, r3
 93a:	e4 60       	ori	r30, 0x04	; 4
 93c:	3e 2e       	mov	r3, r30
 93e:	2a c0       	rjmp	.+84     	; 0x994 <vfprintf+0xe6>
 940:	f3 2d       	mov	r31, r3
 942:	f8 60       	ori	r31, 0x08	; 8
 944:	1d c0       	rjmp	.+58     	; 0x980 <vfprintf+0xd2>
 946:	37 fc       	sbrc	r3, 7
 948:	2d c0       	rjmp	.+90     	; 0x9a4 <vfprintf+0xf6>
 94a:	20 ed       	ldi	r18, 0xD0	; 208
 94c:	28 0f       	add	r18, r24
 94e:	2a 30       	cpi	r18, 0x0A	; 10
 950:	40 f0       	brcs	.+16     	; 0x962 <vfprintf+0xb4>
 952:	8e 32       	cpi	r24, 0x2E	; 46
 954:	b9 f4       	brne	.+46     	; 0x984 <vfprintf+0xd6>
 956:	36 fc       	sbrc	r3, 6
 958:	81 c1       	rjmp	.+770    	; 0xc5c <vfprintf+0x3ae>
 95a:	23 2d       	mov	r18, r3
 95c:	20 64       	ori	r18, 0x40	; 64
 95e:	32 2e       	mov	r3, r18
 960:	19 c0       	rjmp	.+50     	; 0x994 <vfprintf+0xe6>
 962:	36 fe       	sbrs	r3, 6
 964:	06 c0       	rjmp	.+12     	; 0x972 <vfprintf+0xc4>
 966:	8a e0       	ldi	r24, 0x0A	; 10
 968:	98 9e       	mul	r9, r24
 96a:	20 0d       	add	r18, r0
 96c:	11 24       	eor	r1, r1
 96e:	92 2e       	mov	r9, r18
 970:	11 c0       	rjmp	.+34     	; 0x994 <vfprintf+0xe6>
 972:	ea e0       	ldi	r30, 0x0A	; 10
 974:	2e 9e       	mul	r2, r30
 976:	20 0d       	add	r18, r0
 978:	11 24       	eor	r1, r1
 97a:	22 2e       	mov	r2, r18
 97c:	f3 2d       	mov	r31, r3
 97e:	f0 62       	ori	r31, 0x20	; 32
 980:	3f 2e       	mov	r3, r31
 982:	08 c0       	rjmp	.+16     	; 0x994 <vfprintf+0xe6>
 984:	8c 36       	cpi	r24, 0x6C	; 108
 986:	21 f4       	brne	.+8      	; 0x990 <vfprintf+0xe2>
 988:	83 2d       	mov	r24, r3
 98a:	80 68       	ori	r24, 0x80	; 128
 98c:	38 2e       	mov	r3, r24
 98e:	02 c0       	rjmp	.+4      	; 0x994 <vfprintf+0xe6>
 990:	88 36       	cpi	r24, 0x68	; 104
 992:	41 f4       	brne	.+16     	; 0x9a4 <vfprintf+0xf6>
 994:	f7 01       	movw	r30, r14
 996:	93 fd       	sbrc	r25, 3
 998:	85 91       	lpm	r24, Z+
 99a:	93 ff       	sbrs	r25, 3
 99c:	81 91       	ld	r24, Z+
 99e:	7f 01       	movw	r14, r30
 9a0:	81 11       	cpse	r24, r1
 9a2:	b3 cf       	rjmp	.-154    	; 0x90a <vfprintf+0x5c>
 9a4:	98 2f       	mov	r25, r24
 9a6:	9f 7d       	andi	r25, 0xDF	; 223
 9a8:	95 54       	subi	r25, 0x45	; 69
 9aa:	93 30       	cpi	r25, 0x03	; 3
 9ac:	28 f4       	brcc	.+10     	; 0x9b8 <vfprintf+0x10a>
 9ae:	0c 5f       	subi	r16, 0xFC	; 252
 9b0:	1f 4f       	sbci	r17, 0xFF	; 255
 9b2:	9f e3       	ldi	r25, 0x3F	; 63
 9b4:	99 83       	std	Y+1, r25	; 0x01
 9b6:	0d c0       	rjmp	.+26     	; 0x9d2 <vfprintf+0x124>
 9b8:	83 36       	cpi	r24, 0x63	; 99
 9ba:	31 f0       	breq	.+12     	; 0x9c8 <vfprintf+0x11a>
 9bc:	83 37       	cpi	r24, 0x73	; 115
 9be:	71 f0       	breq	.+28     	; 0x9dc <vfprintf+0x12e>
 9c0:	83 35       	cpi	r24, 0x53	; 83
 9c2:	09 f0       	breq	.+2      	; 0x9c6 <vfprintf+0x118>
 9c4:	59 c0       	rjmp	.+178    	; 0xa78 <vfprintf+0x1ca>
 9c6:	21 c0       	rjmp	.+66     	; 0xa0a <vfprintf+0x15c>
 9c8:	f8 01       	movw	r30, r16
 9ca:	80 81       	ld	r24, Z
 9cc:	89 83       	std	Y+1, r24	; 0x01
 9ce:	0e 5f       	subi	r16, 0xFE	; 254
 9d0:	1f 4f       	sbci	r17, 0xFF	; 255
 9d2:	88 24       	eor	r8, r8
 9d4:	83 94       	inc	r8
 9d6:	91 2c       	mov	r9, r1
 9d8:	53 01       	movw	r10, r6
 9da:	13 c0       	rjmp	.+38     	; 0xa02 <vfprintf+0x154>
 9dc:	28 01       	movw	r4, r16
 9de:	f2 e0       	ldi	r31, 0x02	; 2
 9e0:	4f 0e       	add	r4, r31
 9e2:	51 1c       	adc	r5, r1
 9e4:	f8 01       	movw	r30, r16
 9e6:	a0 80       	ld	r10, Z
 9e8:	b1 80       	ldd	r11, Z+1	; 0x01
 9ea:	36 fe       	sbrs	r3, 6
 9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <vfprintf+0x146>
 9ee:	69 2d       	mov	r22, r9
 9f0:	70 e0       	ldi	r23, 0x00	; 0
 9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <vfprintf+0x14a>
 9f4:	6f ef       	ldi	r22, 0xFF	; 255
 9f6:	7f ef       	ldi	r23, 0xFF	; 255
 9f8:	c5 01       	movw	r24, r10
 9fa:	0e 94 66 06 	call	0xccc	; 0xccc <strnlen>
 9fe:	4c 01       	movw	r8, r24
 a00:	82 01       	movw	r16, r4
 a02:	f3 2d       	mov	r31, r3
 a04:	ff 77       	andi	r31, 0x7F	; 127
 a06:	3f 2e       	mov	r3, r31
 a08:	16 c0       	rjmp	.+44     	; 0xa36 <vfprintf+0x188>
 a0a:	28 01       	movw	r4, r16
 a0c:	22 e0       	ldi	r18, 0x02	; 2
 a0e:	42 0e       	add	r4, r18
 a10:	51 1c       	adc	r5, r1
 a12:	f8 01       	movw	r30, r16
 a14:	a0 80       	ld	r10, Z
 a16:	b1 80       	ldd	r11, Z+1	; 0x01
 a18:	36 fe       	sbrs	r3, 6
 a1a:	03 c0       	rjmp	.+6      	; 0xa22 <vfprintf+0x174>
 a1c:	69 2d       	mov	r22, r9
 a1e:	70 e0       	ldi	r23, 0x00	; 0
 a20:	02 c0       	rjmp	.+4      	; 0xa26 <vfprintf+0x178>
 a22:	6f ef       	ldi	r22, 0xFF	; 255
 a24:	7f ef       	ldi	r23, 0xFF	; 255
 a26:	c5 01       	movw	r24, r10
 a28:	0e 94 54 06 	call	0xca8	; 0xca8 <strnlen_P>
 a2c:	4c 01       	movw	r8, r24
 a2e:	f3 2d       	mov	r31, r3
 a30:	f0 68       	ori	r31, 0x80	; 128
 a32:	3f 2e       	mov	r3, r31
 a34:	82 01       	movw	r16, r4
 a36:	33 fc       	sbrc	r3, 3
 a38:	1b c0       	rjmp	.+54     	; 0xa70 <vfprintf+0x1c2>
 a3a:	82 2d       	mov	r24, r2
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	88 16       	cp	r8, r24
 a40:	99 06       	cpc	r9, r25
 a42:	b0 f4       	brcc	.+44     	; 0xa70 <vfprintf+0x1c2>
 a44:	b6 01       	movw	r22, r12
 a46:	80 e2       	ldi	r24, 0x20	; 32
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	0e 94 05 04 	call	0x80a	; 0x80a <fputc>
 a4e:	2a 94       	dec	r2
 a50:	f4 cf       	rjmp	.-24     	; 0xa3a <vfprintf+0x18c>
 a52:	f5 01       	movw	r30, r10
 a54:	37 fc       	sbrc	r3, 7
 a56:	85 91       	lpm	r24, Z+
 a58:	37 fe       	sbrs	r3, 7
 a5a:	81 91       	ld	r24, Z+
 a5c:	5f 01       	movw	r10, r30
 a5e:	b6 01       	movw	r22, r12
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	0e 94 05 04 	call	0x80a	; 0x80a <fputc>
 a66:	21 10       	cpse	r2, r1
 a68:	2a 94       	dec	r2
 a6a:	21 e0       	ldi	r18, 0x01	; 1
 a6c:	82 1a       	sub	r8, r18
 a6e:	91 08       	sbc	r9, r1
 a70:	81 14       	cp	r8, r1
 a72:	91 04       	cpc	r9, r1
 a74:	71 f7       	brne	.-36     	; 0xa52 <vfprintf+0x1a4>
 a76:	e8 c0       	rjmp	.+464    	; 0xc48 <vfprintf+0x39a>
 a78:	84 36       	cpi	r24, 0x64	; 100
 a7a:	11 f0       	breq	.+4      	; 0xa80 <vfprintf+0x1d2>
 a7c:	89 36       	cpi	r24, 0x69	; 105
 a7e:	41 f5       	brne	.+80     	; 0xad0 <vfprintf+0x222>
 a80:	f8 01       	movw	r30, r16
 a82:	37 fe       	sbrs	r3, 7
 a84:	07 c0       	rjmp	.+14     	; 0xa94 <vfprintf+0x1e6>
 a86:	60 81       	ld	r22, Z
 a88:	71 81       	ldd	r23, Z+1	; 0x01
 a8a:	82 81       	ldd	r24, Z+2	; 0x02
 a8c:	93 81       	ldd	r25, Z+3	; 0x03
 a8e:	0c 5f       	subi	r16, 0xFC	; 252
 a90:	1f 4f       	sbci	r17, 0xFF	; 255
 a92:	08 c0       	rjmp	.+16     	; 0xaa4 <vfprintf+0x1f6>
 a94:	60 81       	ld	r22, Z
 a96:	71 81       	ldd	r23, Z+1	; 0x01
 a98:	07 2e       	mov	r0, r23
 a9a:	00 0c       	add	r0, r0
 a9c:	88 0b       	sbc	r24, r24
 a9e:	99 0b       	sbc	r25, r25
 aa0:	0e 5f       	subi	r16, 0xFE	; 254
 aa2:	1f 4f       	sbci	r17, 0xFF	; 255
 aa4:	f3 2d       	mov	r31, r3
 aa6:	ff 76       	andi	r31, 0x6F	; 111
 aa8:	3f 2e       	mov	r3, r31
 aaa:	97 ff       	sbrs	r25, 7
 aac:	09 c0       	rjmp	.+18     	; 0xac0 <vfprintf+0x212>
 aae:	90 95       	com	r25
 ab0:	80 95       	com	r24
 ab2:	70 95       	com	r23
 ab4:	61 95       	neg	r22
 ab6:	7f 4f       	sbci	r23, 0xFF	; 255
 ab8:	8f 4f       	sbci	r24, 0xFF	; 255
 aba:	9f 4f       	sbci	r25, 0xFF	; 255
 abc:	f0 68       	ori	r31, 0x80	; 128
 abe:	3f 2e       	mov	r3, r31
 ac0:	2a e0       	ldi	r18, 0x0A	; 10
 ac2:	30 e0       	ldi	r19, 0x00	; 0
 ac4:	a3 01       	movw	r20, r6
 ac6:	0e 94 71 06 	call	0xce2	; 0xce2 <__ultoa_invert>
 aca:	88 2e       	mov	r8, r24
 acc:	86 18       	sub	r8, r6
 ace:	45 c0       	rjmp	.+138    	; 0xb5a <vfprintf+0x2ac>
 ad0:	85 37       	cpi	r24, 0x75	; 117
 ad2:	31 f4       	brne	.+12     	; 0xae0 <vfprintf+0x232>
 ad4:	23 2d       	mov	r18, r3
 ad6:	2f 7e       	andi	r18, 0xEF	; 239
 ad8:	b2 2e       	mov	r11, r18
 ada:	2a e0       	ldi	r18, 0x0A	; 10
 adc:	30 e0       	ldi	r19, 0x00	; 0
 ade:	25 c0       	rjmp	.+74     	; 0xb2a <vfprintf+0x27c>
 ae0:	93 2d       	mov	r25, r3
 ae2:	99 7f       	andi	r25, 0xF9	; 249
 ae4:	b9 2e       	mov	r11, r25
 ae6:	8f 36       	cpi	r24, 0x6F	; 111
 ae8:	c1 f0       	breq	.+48     	; 0xb1a <vfprintf+0x26c>
 aea:	18 f4       	brcc	.+6      	; 0xaf2 <vfprintf+0x244>
 aec:	88 35       	cpi	r24, 0x58	; 88
 aee:	79 f0       	breq	.+30     	; 0xb0e <vfprintf+0x260>
 af0:	b5 c0       	rjmp	.+362    	; 0xc5c <vfprintf+0x3ae>
 af2:	80 37       	cpi	r24, 0x70	; 112
 af4:	19 f0       	breq	.+6      	; 0xafc <vfprintf+0x24e>
 af6:	88 37       	cpi	r24, 0x78	; 120
 af8:	21 f0       	breq	.+8      	; 0xb02 <vfprintf+0x254>
 afa:	b0 c0       	rjmp	.+352    	; 0xc5c <vfprintf+0x3ae>
 afc:	e9 2f       	mov	r30, r25
 afe:	e0 61       	ori	r30, 0x10	; 16
 b00:	be 2e       	mov	r11, r30
 b02:	b4 fe       	sbrs	r11, 4
 b04:	0d c0       	rjmp	.+26     	; 0xb20 <vfprintf+0x272>
 b06:	fb 2d       	mov	r31, r11
 b08:	f4 60       	ori	r31, 0x04	; 4
 b0a:	bf 2e       	mov	r11, r31
 b0c:	09 c0       	rjmp	.+18     	; 0xb20 <vfprintf+0x272>
 b0e:	34 fe       	sbrs	r3, 4
 b10:	0a c0       	rjmp	.+20     	; 0xb26 <vfprintf+0x278>
 b12:	29 2f       	mov	r18, r25
 b14:	26 60       	ori	r18, 0x06	; 6
 b16:	b2 2e       	mov	r11, r18
 b18:	06 c0       	rjmp	.+12     	; 0xb26 <vfprintf+0x278>
 b1a:	28 e0       	ldi	r18, 0x08	; 8
 b1c:	30 e0       	ldi	r19, 0x00	; 0
 b1e:	05 c0       	rjmp	.+10     	; 0xb2a <vfprintf+0x27c>
 b20:	20 e1       	ldi	r18, 0x10	; 16
 b22:	30 e0       	ldi	r19, 0x00	; 0
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <vfprintf+0x27c>
 b26:	20 e1       	ldi	r18, 0x10	; 16
 b28:	32 e0       	ldi	r19, 0x02	; 2
 b2a:	f8 01       	movw	r30, r16
 b2c:	b7 fe       	sbrs	r11, 7
 b2e:	07 c0       	rjmp	.+14     	; 0xb3e <vfprintf+0x290>
 b30:	60 81       	ld	r22, Z
 b32:	71 81       	ldd	r23, Z+1	; 0x01
 b34:	82 81       	ldd	r24, Z+2	; 0x02
 b36:	93 81       	ldd	r25, Z+3	; 0x03
 b38:	0c 5f       	subi	r16, 0xFC	; 252
 b3a:	1f 4f       	sbci	r17, 0xFF	; 255
 b3c:	06 c0       	rjmp	.+12     	; 0xb4a <vfprintf+0x29c>
 b3e:	60 81       	ld	r22, Z
 b40:	71 81       	ldd	r23, Z+1	; 0x01
 b42:	80 e0       	ldi	r24, 0x00	; 0
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	0e 5f       	subi	r16, 0xFE	; 254
 b48:	1f 4f       	sbci	r17, 0xFF	; 255
 b4a:	a3 01       	movw	r20, r6
 b4c:	0e 94 71 06 	call	0xce2	; 0xce2 <__ultoa_invert>
 b50:	88 2e       	mov	r8, r24
 b52:	86 18       	sub	r8, r6
 b54:	fb 2d       	mov	r31, r11
 b56:	ff 77       	andi	r31, 0x7F	; 127
 b58:	3f 2e       	mov	r3, r31
 b5a:	36 fe       	sbrs	r3, 6
 b5c:	0d c0       	rjmp	.+26     	; 0xb78 <vfprintf+0x2ca>
 b5e:	23 2d       	mov	r18, r3
 b60:	2e 7f       	andi	r18, 0xFE	; 254
 b62:	a2 2e       	mov	r10, r18
 b64:	89 14       	cp	r8, r9
 b66:	58 f4       	brcc	.+22     	; 0xb7e <vfprintf+0x2d0>
 b68:	34 fe       	sbrs	r3, 4
 b6a:	0b c0       	rjmp	.+22     	; 0xb82 <vfprintf+0x2d4>
 b6c:	32 fc       	sbrc	r3, 2
 b6e:	09 c0       	rjmp	.+18     	; 0xb82 <vfprintf+0x2d4>
 b70:	83 2d       	mov	r24, r3
 b72:	8e 7e       	andi	r24, 0xEE	; 238
 b74:	a8 2e       	mov	r10, r24
 b76:	05 c0       	rjmp	.+10     	; 0xb82 <vfprintf+0x2d4>
 b78:	b8 2c       	mov	r11, r8
 b7a:	a3 2c       	mov	r10, r3
 b7c:	03 c0       	rjmp	.+6      	; 0xb84 <vfprintf+0x2d6>
 b7e:	b8 2c       	mov	r11, r8
 b80:	01 c0       	rjmp	.+2      	; 0xb84 <vfprintf+0x2d6>
 b82:	b9 2c       	mov	r11, r9
 b84:	a4 fe       	sbrs	r10, 4
 b86:	0f c0       	rjmp	.+30     	; 0xba6 <vfprintf+0x2f8>
 b88:	fe 01       	movw	r30, r28
 b8a:	e8 0d       	add	r30, r8
 b8c:	f1 1d       	adc	r31, r1
 b8e:	80 81       	ld	r24, Z
 b90:	80 33       	cpi	r24, 0x30	; 48
 b92:	21 f4       	brne	.+8      	; 0xb9c <vfprintf+0x2ee>
 b94:	9a 2d       	mov	r25, r10
 b96:	99 7e       	andi	r25, 0xE9	; 233
 b98:	a9 2e       	mov	r10, r25
 b9a:	09 c0       	rjmp	.+18     	; 0xbae <vfprintf+0x300>
 b9c:	a2 fe       	sbrs	r10, 2
 b9e:	06 c0       	rjmp	.+12     	; 0xbac <vfprintf+0x2fe>
 ba0:	b3 94       	inc	r11
 ba2:	b3 94       	inc	r11
 ba4:	04 c0       	rjmp	.+8      	; 0xbae <vfprintf+0x300>
 ba6:	8a 2d       	mov	r24, r10
 ba8:	86 78       	andi	r24, 0x86	; 134
 baa:	09 f0       	breq	.+2      	; 0xbae <vfprintf+0x300>
 bac:	b3 94       	inc	r11
 bae:	a3 fc       	sbrc	r10, 3
 bb0:	11 c0       	rjmp	.+34     	; 0xbd4 <vfprintf+0x326>
 bb2:	a0 fe       	sbrs	r10, 0
 bb4:	06 c0       	rjmp	.+12     	; 0xbc2 <vfprintf+0x314>
 bb6:	b2 14       	cp	r11, r2
 bb8:	88 f4       	brcc	.+34     	; 0xbdc <vfprintf+0x32e>
 bba:	28 0c       	add	r2, r8
 bbc:	92 2c       	mov	r9, r2
 bbe:	9b 18       	sub	r9, r11
 bc0:	0e c0       	rjmp	.+28     	; 0xbde <vfprintf+0x330>
 bc2:	b2 14       	cp	r11, r2
 bc4:	60 f4       	brcc	.+24     	; 0xbde <vfprintf+0x330>
 bc6:	b6 01       	movw	r22, r12
 bc8:	80 e2       	ldi	r24, 0x20	; 32
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	0e 94 05 04 	call	0x80a	; 0x80a <fputc>
 bd0:	b3 94       	inc	r11
 bd2:	f7 cf       	rjmp	.-18     	; 0xbc2 <vfprintf+0x314>
 bd4:	b2 14       	cp	r11, r2
 bd6:	18 f4       	brcc	.+6      	; 0xbde <vfprintf+0x330>
 bd8:	2b 18       	sub	r2, r11
 bda:	02 c0       	rjmp	.+4      	; 0xbe0 <vfprintf+0x332>
 bdc:	98 2c       	mov	r9, r8
 bde:	21 2c       	mov	r2, r1
 be0:	a4 fe       	sbrs	r10, 4
 be2:	10 c0       	rjmp	.+32     	; 0xc04 <vfprintf+0x356>
 be4:	b6 01       	movw	r22, r12
 be6:	80 e3       	ldi	r24, 0x30	; 48
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	0e 94 05 04 	call	0x80a	; 0x80a <fputc>
 bee:	a2 fe       	sbrs	r10, 2
 bf0:	17 c0       	rjmp	.+46     	; 0xc20 <vfprintf+0x372>
 bf2:	a1 fc       	sbrc	r10, 1
 bf4:	03 c0       	rjmp	.+6      	; 0xbfc <vfprintf+0x34e>
 bf6:	88 e7       	ldi	r24, 0x78	; 120
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	02 c0       	rjmp	.+4      	; 0xc00 <vfprintf+0x352>
 bfc:	88 e5       	ldi	r24, 0x58	; 88
 bfe:	90 e0       	ldi	r25, 0x00	; 0
 c00:	b6 01       	movw	r22, r12
 c02:	0c c0       	rjmp	.+24     	; 0xc1c <vfprintf+0x36e>
 c04:	8a 2d       	mov	r24, r10
 c06:	86 78       	andi	r24, 0x86	; 134
 c08:	59 f0       	breq	.+22     	; 0xc20 <vfprintf+0x372>
 c0a:	a1 fe       	sbrs	r10, 1
 c0c:	02 c0       	rjmp	.+4      	; 0xc12 <vfprintf+0x364>
 c0e:	8b e2       	ldi	r24, 0x2B	; 43
 c10:	01 c0       	rjmp	.+2      	; 0xc14 <vfprintf+0x366>
 c12:	80 e2       	ldi	r24, 0x20	; 32
 c14:	a7 fc       	sbrc	r10, 7
 c16:	8d e2       	ldi	r24, 0x2D	; 45
 c18:	b6 01       	movw	r22, r12
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	0e 94 05 04 	call	0x80a	; 0x80a <fputc>
 c20:	89 14       	cp	r8, r9
 c22:	38 f4       	brcc	.+14     	; 0xc32 <vfprintf+0x384>
 c24:	b6 01       	movw	r22, r12
 c26:	80 e3       	ldi	r24, 0x30	; 48
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	0e 94 05 04 	call	0x80a	; 0x80a <fputc>
 c2e:	9a 94       	dec	r9
 c30:	f7 cf       	rjmp	.-18     	; 0xc20 <vfprintf+0x372>
 c32:	8a 94       	dec	r8
 c34:	f3 01       	movw	r30, r6
 c36:	e8 0d       	add	r30, r8
 c38:	f1 1d       	adc	r31, r1
 c3a:	80 81       	ld	r24, Z
 c3c:	b6 01       	movw	r22, r12
 c3e:	90 e0       	ldi	r25, 0x00	; 0
 c40:	0e 94 05 04 	call	0x80a	; 0x80a <fputc>
 c44:	81 10       	cpse	r8, r1
 c46:	f5 cf       	rjmp	.-22     	; 0xc32 <vfprintf+0x384>
 c48:	22 20       	and	r2, r2
 c4a:	09 f4       	brne	.+2      	; 0xc4e <vfprintf+0x3a0>
 c4c:	42 ce       	rjmp	.-892    	; 0x8d2 <vfprintf+0x24>
 c4e:	b6 01       	movw	r22, r12
 c50:	80 e2       	ldi	r24, 0x20	; 32
 c52:	90 e0       	ldi	r25, 0x00	; 0
 c54:	0e 94 05 04 	call	0x80a	; 0x80a <fputc>
 c58:	2a 94       	dec	r2
 c5a:	f6 cf       	rjmp	.-20     	; 0xc48 <vfprintf+0x39a>
 c5c:	f6 01       	movw	r30, r12
 c5e:	86 81       	ldd	r24, Z+6	; 0x06
 c60:	97 81       	ldd	r25, Z+7	; 0x07
 c62:	02 c0       	rjmp	.+4      	; 0xc68 <vfprintf+0x3ba>
 c64:	8f ef       	ldi	r24, 0xFF	; 255
 c66:	9f ef       	ldi	r25, 0xFF	; 255
 c68:	2b 96       	adiw	r28, 0x0b	; 11
 c6a:	e2 e1       	ldi	r30, 0x12	; 18
 c6c:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__epilogue_restores__>

00000c70 <calloc>:
 c70:	0f 93       	push	r16
 c72:	1f 93       	push	r17
 c74:	cf 93       	push	r28
 c76:	df 93       	push	r29
 c78:	86 9f       	mul	r24, r22
 c7a:	80 01       	movw	r16, r0
 c7c:	87 9f       	mul	r24, r23
 c7e:	10 0d       	add	r17, r0
 c80:	96 9f       	mul	r25, r22
 c82:	10 0d       	add	r17, r0
 c84:	11 24       	eor	r1, r1
 c86:	c8 01       	movw	r24, r16
 c88:	0e 94 99 02 	call	0x532	; 0x532 <malloc>
 c8c:	ec 01       	movw	r28, r24
 c8e:	00 97       	sbiw	r24, 0x00	; 0
 c90:	29 f0       	breq	.+10     	; 0xc9c <calloc+0x2c>
 c92:	a8 01       	movw	r20, r16
 c94:	60 e0       	ldi	r22, 0x00	; 0
 c96:	70 e0       	ldi	r23, 0x00	; 0
 c98:	0e 94 5f 06 	call	0xcbe	; 0xcbe <memset>
 c9c:	ce 01       	movw	r24, r28
 c9e:	df 91       	pop	r29
 ca0:	cf 91       	pop	r28
 ca2:	1f 91       	pop	r17
 ca4:	0f 91       	pop	r16
 ca6:	08 95       	ret

00000ca8 <strnlen_P>:
 ca8:	fc 01       	movw	r30, r24
 caa:	05 90       	lpm	r0, Z+
 cac:	61 50       	subi	r22, 0x01	; 1
 cae:	70 40       	sbci	r23, 0x00	; 0
 cb0:	01 10       	cpse	r0, r1
 cb2:	d8 f7       	brcc	.-10     	; 0xcaa <strnlen_P+0x2>
 cb4:	80 95       	com	r24
 cb6:	90 95       	com	r25
 cb8:	8e 0f       	add	r24, r30
 cba:	9f 1f       	adc	r25, r31
 cbc:	08 95       	ret

00000cbe <memset>:
 cbe:	dc 01       	movw	r26, r24
 cc0:	01 c0       	rjmp	.+2      	; 0xcc4 <memset+0x6>
 cc2:	6d 93       	st	X+, r22
 cc4:	41 50       	subi	r20, 0x01	; 1
 cc6:	50 40       	sbci	r21, 0x00	; 0
 cc8:	e0 f7       	brcc	.-8      	; 0xcc2 <memset+0x4>
 cca:	08 95       	ret

00000ccc <strnlen>:
 ccc:	fc 01       	movw	r30, r24
 cce:	61 50       	subi	r22, 0x01	; 1
 cd0:	70 40       	sbci	r23, 0x00	; 0
 cd2:	01 90       	ld	r0, Z+
 cd4:	01 10       	cpse	r0, r1
 cd6:	d8 f7       	brcc	.-10     	; 0xcce <strnlen+0x2>
 cd8:	80 95       	com	r24
 cda:	90 95       	com	r25
 cdc:	8e 0f       	add	r24, r30
 cde:	9f 1f       	adc	r25, r31
 ce0:	08 95       	ret

00000ce2 <__ultoa_invert>:
 ce2:	fa 01       	movw	r30, r20
 ce4:	aa 27       	eor	r26, r26
 ce6:	28 30       	cpi	r18, 0x08	; 8
 ce8:	51 f1       	breq	.+84     	; 0xd3e <__ultoa_invert+0x5c>
 cea:	20 31       	cpi	r18, 0x10	; 16
 cec:	81 f1       	breq	.+96     	; 0xd4e <__ultoa_invert+0x6c>
 cee:	e8 94       	clt
 cf0:	6f 93       	push	r22
 cf2:	6e 7f       	andi	r22, 0xFE	; 254
 cf4:	6e 5f       	subi	r22, 0xFE	; 254
 cf6:	7f 4f       	sbci	r23, 0xFF	; 255
 cf8:	8f 4f       	sbci	r24, 0xFF	; 255
 cfa:	9f 4f       	sbci	r25, 0xFF	; 255
 cfc:	af 4f       	sbci	r26, 0xFF	; 255
 cfe:	b1 e0       	ldi	r27, 0x01	; 1
 d00:	3e d0       	rcall	.+124    	; 0xd7e <__ultoa_invert+0x9c>
 d02:	b4 e0       	ldi	r27, 0x04	; 4
 d04:	3c d0       	rcall	.+120    	; 0xd7e <__ultoa_invert+0x9c>
 d06:	67 0f       	add	r22, r23
 d08:	78 1f       	adc	r23, r24
 d0a:	89 1f       	adc	r24, r25
 d0c:	9a 1f       	adc	r25, r26
 d0e:	a1 1d       	adc	r26, r1
 d10:	68 0f       	add	r22, r24
 d12:	79 1f       	adc	r23, r25
 d14:	8a 1f       	adc	r24, r26
 d16:	91 1d       	adc	r25, r1
 d18:	a1 1d       	adc	r26, r1
 d1a:	6a 0f       	add	r22, r26
 d1c:	71 1d       	adc	r23, r1
 d1e:	81 1d       	adc	r24, r1
 d20:	91 1d       	adc	r25, r1
 d22:	a1 1d       	adc	r26, r1
 d24:	20 d0       	rcall	.+64     	; 0xd66 <__ultoa_invert+0x84>
 d26:	09 f4       	brne	.+2      	; 0xd2a <__ultoa_invert+0x48>
 d28:	68 94       	set
 d2a:	3f 91       	pop	r19
 d2c:	2a e0       	ldi	r18, 0x0A	; 10
 d2e:	26 9f       	mul	r18, r22
 d30:	11 24       	eor	r1, r1
 d32:	30 19       	sub	r19, r0
 d34:	30 5d       	subi	r19, 0xD0	; 208
 d36:	31 93       	st	Z+, r19
 d38:	de f6       	brtc	.-74     	; 0xcf0 <__ultoa_invert+0xe>
 d3a:	cf 01       	movw	r24, r30
 d3c:	08 95       	ret
 d3e:	46 2f       	mov	r20, r22
 d40:	47 70       	andi	r20, 0x07	; 7
 d42:	40 5d       	subi	r20, 0xD0	; 208
 d44:	41 93       	st	Z+, r20
 d46:	b3 e0       	ldi	r27, 0x03	; 3
 d48:	0f d0       	rcall	.+30     	; 0xd68 <__ultoa_invert+0x86>
 d4a:	c9 f7       	brne	.-14     	; 0xd3e <__ultoa_invert+0x5c>
 d4c:	f6 cf       	rjmp	.-20     	; 0xd3a <__ultoa_invert+0x58>
 d4e:	46 2f       	mov	r20, r22
 d50:	4f 70       	andi	r20, 0x0F	; 15
 d52:	40 5d       	subi	r20, 0xD0	; 208
 d54:	4a 33       	cpi	r20, 0x3A	; 58
 d56:	18 f0       	brcs	.+6      	; 0xd5e <__ultoa_invert+0x7c>
 d58:	49 5d       	subi	r20, 0xD9	; 217
 d5a:	31 fd       	sbrc	r19, 1
 d5c:	40 52       	subi	r20, 0x20	; 32
 d5e:	41 93       	st	Z+, r20
 d60:	02 d0       	rcall	.+4      	; 0xd66 <__ultoa_invert+0x84>
 d62:	a9 f7       	brne	.-22     	; 0xd4e <__ultoa_invert+0x6c>
 d64:	ea cf       	rjmp	.-44     	; 0xd3a <__ultoa_invert+0x58>
 d66:	b4 e0       	ldi	r27, 0x04	; 4
 d68:	a6 95       	lsr	r26
 d6a:	97 95       	ror	r25
 d6c:	87 95       	ror	r24
 d6e:	77 95       	ror	r23
 d70:	67 95       	ror	r22
 d72:	ba 95       	dec	r27
 d74:	c9 f7       	brne	.-14     	; 0xd68 <__ultoa_invert+0x86>
 d76:	00 97       	sbiw	r24, 0x00	; 0
 d78:	61 05       	cpc	r22, r1
 d7a:	71 05       	cpc	r23, r1
 d7c:	08 95       	ret
 d7e:	9b 01       	movw	r18, r22
 d80:	ac 01       	movw	r20, r24
 d82:	0a 2e       	mov	r0, r26
 d84:	06 94       	lsr	r0
 d86:	57 95       	ror	r21
 d88:	47 95       	ror	r20
 d8a:	37 95       	ror	r19
 d8c:	27 95       	ror	r18
 d8e:	ba 95       	dec	r27
 d90:	c9 f7       	brne	.-14     	; 0xd84 <__ultoa_invert+0xa2>
 d92:	62 0f       	add	r22, r18
 d94:	73 1f       	adc	r23, r19
 d96:	84 1f       	adc	r24, r20
 d98:	95 1f       	adc	r25, r21
 d9a:	a0 1d       	adc	r26, r0
 d9c:	08 95       	ret

00000d9e <__prologue_saves__>:
 d9e:	2f 92       	push	r2
 da0:	3f 92       	push	r3
 da2:	4f 92       	push	r4
 da4:	5f 92       	push	r5
 da6:	6f 92       	push	r6
 da8:	7f 92       	push	r7
 daa:	8f 92       	push	r8
 dac:	9f 92       	push	r9
 dae:	af 92       	push	r10
 db0:	bf 92       	push	r11
 db2:	cf 92       	push	r12
 db4:	df 92       	push	r13
 db6:	ef 92       	push	r14
 db8:	ff 92       	push	r15
 dba:	0f 93       	push	r16
 dbc:	1f 93       	push	r17
 dbe:	cf 93       	push	r28
 dc0:	df 93       	push	r29
 dc2:	cd b7       	in	r28, 0x3d	; 61
 dc4:	de b7       	in	r29, 0x3e	; 62
 dc6:	ca 1b       	sub	r28, r26
 dc8:	db 0b       	sbc	r29, r27
 dca:	0f b6       	in	r0, 0x3f	; 63
 dcc:	f8 94       	cli
 dce:	de bf       	out	0x3e, r29	; 62
 dd0:	0f be       	out	0x3f, r0	; 63
 dd2:	cd bf       	out	0x3d, r28	; 61
 dd4:	09 94       	ijmp

00000dd6 <__epilogue_restores__>:
 dd6:	2a 88       	ldd	r2, Y+18	; 0x12
 dd8:	39 88       	ldd	r3, Y+17	; 0x11
 dda:	48 88       	ldd	r4, Y+16	; 0x10
 ddc:	5f 84       	ldd	r5, Y+15	; 0x0f
 dde:	6e 84       	ldd	r6, Y+14	; 0x0e
 de0:	7d 84       	ldd	r7, Y+13	; 0x0d
 de2:	8c 84       	ldd	r8, Y+12	; 0x0c
 de4:	9b 84       	ldd	r9, Y+11	; 0x0b
 de6:	aa 84       	ldd	r10, Y+10	; 0x0a
 de8:	b9 84       	ldd	r11, Y+9	; 0x09
 dea:	c8 84       	ldd	r12, Y+8	; 0x08
 dec:	df 80       	ldd	r13, Y+7	; 0x07
 dee:	ee 80       	ldd	r14, Y+6	; 0x06
 df0:	fd 80       	ldd	r15, Y+5	; 0x05
 df2:	0c 81       	ldd	r16, Y+4	; 0x04
 df4:	1b 81       	ldd	r17, Y+3	; 0x03
 df6:	aa 81       	ldd	r26, Y+2	; 0x02
 df8:	b9 81       	ldd	r27, Y+1	; 0x01
 dfa:	ce 0f       	add	r28, r30
 dfc:	d1 1d       	adc	r29, r1
 dfe:	0f b6       	in	r0, 0x3f	; 63
 e00:	f8 94       	cli
 e02:	de bf       	out	0x3e, r29	; 62
 e04:	0f be       	out	0x3f, r0	; 63
 e06:	cd bf       	out	0x3d, r28	; 61
 e08:	ed 01       	movw	r28, r26
 e0a:	08 95       	ret

00000e0c <_exit>:
 e0c:	f8 94       	cli

00000e0e <__stop_program>:
 e0e:	ff cf       	rjmp	.-2      	; 0xe0e <__stop_program>
