
ping-pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00000d90  00000e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080017e  0080017e  00000ea2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ea2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fab  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd6  00000000  00000000  00001ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b2  00000000  00000000  00002bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00003480  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000553  00000000  00000000  00003734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c3  00000000  00000000  00003c87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000434a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 91 01 	jmp	0x322	; 0x322 <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_23>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e9       	ldi	r30, 0x90	; 144
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 37       	cpi	r26, 0x7E	; 126
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	ae e7       	ldi	r26, 0x7E	; 126
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a9 38       	cpi	r26, 0x89	; 137
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 cb 01 	call	0x396	; 0x396 <main>
  a6:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:
	uint8_t ret_val;
	for(uint8_t i=0; (i<ADC_CHANNELS) && (i<=channel); i++){
		ret_val = adc[0x0000]; //discard first channel-1 values
	}
	return ret_val;	//return last one
}
  ae:	87 b3       	in	r24, 0x17	; 23
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	87 bb       	out	0x17, r24	; 23
  b4:	81 b3       	in	r24, 0x11	; 17
  b6:	8f 7e       	andi	r24, 0xEF	; 239
  b8:	81 bb       	out	0x11, r24	; 17
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	80 61       	ori	r24, 0x10	; 16
  be:	82 bb       	out	0x12, r24	; 18
  c0:	08 95       	ret

000000c2 <ADC_sample4>:
  c2:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x1277>
  c6:	08 95       	ret

000000c8 <ADC_is_busy>:
  c8:	80 b3       	in	r24, 0x10	; 16
  ca:	82 95       	swap	r24
  cc:	81 70       	andi	r24, 0x01	; 1
  ce:	08 95       	ret

000000d0 <ADC_read>:

uint8_t ADC_read(void){
	volatile char *adc = (char *) ADC_BASE_ADDR;
	while(!ADC_is_busy()); //wait till busy goes up
  d0:	0e 94 64 00 	call	0xc8	; 0xc8 <ADC_is_busy>
  d4:	88 23       	and	r24, r24
  d6:	e1 f3       	breq	.-8      	; 0xd0 <ADC_read>
	return adc[0x0000];
  d8:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x1277>
  dc:	08 95       	ret

000000de <JOY_calibrate>:
#include "gamepad.h"

pos_t JOY_calibrate(){
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
	//should have already initialized XMEM, UART, ADC
	printf("\n\rGamePad calibration v 0.1\n\r");
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	9f 93       	push	r25
  ee:	8f 93       	push	r24
  f0:	0e 94 a4 02 	call	0x548	; 0x548 <printf>
	printf("CENTER : ");
  f4:	84 e2       	ldi	r24, 0x24	; 36
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	9f 93       	push	r25
  fa:	8f 93       	push	r24
  fc:	0e 94 a4 02 	call	0x548	; 0x548 <printf>
	uint16_t x = 0;
	uint16_t y = 0;
	for(uint8_t i=0; i<CALIB_SAMPLES; i++){
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	0f 90       	pop	r0
 108:	c0 e0       	ldi	r28, 0x00	; 0
pos_t JOY_calibrate(){
	//should have already initialized XMEM, UART, ADC
	printf("\n\rGamePad calibration v 0.1\n\r");
	printf("CENTER : ");
	uint16_t x = 0;
	uint16_t y = 0;
 10a:	e1 2c       	mov	r14, r1
 10c:	f1 2c       	mov	r15, r1

pos_t JOY_calibrate(){
	//should have already initialized XMEM, UART, ADC
	printf("\n\rGamePad calibration v 0.1\n\r");
	printf("CENTER : ");
	uint16_t x = 0;
 10e:	00 e0       	ldi	r16, 0x00	; 0
 110:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t y = 0;
	for(uint8_t i=0; i<CALIB_SAMPLES; i++){
 112:	0b c0       	rjmp	.+22     	; 0x12a <JOY_calibrate+0x4c>
		ADC_sample4();
 114:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_sample4>
		y += ADC_read(); //in order: vert-horiz- ...
 118:	0e 94 68 00 	call	0xd0	; 0xd0 <ADC_read>
 11c:	e8 0e       	add	r14, r24
 11e:	f1 1c       	adc	r15, r1
		x += ADC_read();
 120:	0e 94 68 00 	call	0xd0	; 0xd0 <ADC_read>
 124:	08 0f       	add	r16, r24
 126:	11 1d       	adc	r17, r1
	//should have already initialized XMEM, UART, ADC
	printf("\n\rGamePad calibration v 0.1\n\r");
	printf("CENTER : ");
	uint16_t x = 0;
	uint16_t y = 0;
	for(uint8_t i=0; i<CALIB_SAMPLES; i++){
 128:	cf 5f       	subi	r28, 0xFF	; 255
 12a:	c0 31       	cpi	r28, 0x10	; 16
 12c:	98 f3       	brcs	.-26     	; 0x114 <JOY_calibrate+0x36>
		ADC_sample4();
		y += ADC_read(); //in order: vert-horiz- ...
		x += ADC_read();
	}
	y /= CALIB_SAMPLES;
 12e:	f6 94       	lsr	r15
 130:	e7 94       	ror	r14
 132:	f6 94       	lsr	r15
 134:	e7 94       	ror	r14
 136:	f6 94       	lsr	r15
 138:	e7 94       	ror	r14
 13a:	f6 94       	lsr	r15
 13c:	e7 94       	ror	r14
	x /= CALIB_SAMPLES;
 13e:	12 95       	swap	r17
 140:	02 95       	swap	r16
 142:	0f 70       	andi	r16, 0x0F	; 15
 144:	01 27       	eor	r16, r17
 146:	1f 70       	andi	r17, 0x0F	; 15
 148:	01 27       	eor	r16, r17
	printf("[%d,%d]\n\r",x,y);
 14a:	ff 92       	push	r15
 14c:	ef 92       	push	r14
 14e:	1f 93       	push	r17
 150:	0f 93       	push	r16
 152:	8e e2       	ldi	r24, 0x2E	; 46
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	9f 93       	push	r25
 158:	8f 93       	push	r24
 15a:	0e 94 a4 02 	call	0x548	; 0x548 <printf>
	return (pos_t){x,y};
 15e:	b8 01       	movw	r22, r16
 160:	c7 01       	movw	r24, r14
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
}
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	ff 90       	pop	r15
 176:	ef 90       	pop	r14
 178:	08 95       	ret

0000017a <JOY_get_rel_pos>:

pos_t JOY_get_rel_pos(pos_t center){
 17a:	cf 92       	push	r12
 17c:	df 92       	push	r13
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	6b 01       	movw	r12, r22
 188:	7c 01       	movw	r14, r24
	ADC_sample4();
 18a:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_sample4>
	int16_t y = ADC_read() - center.y;
 18e:	0e 94 68 00 	call	0xd0	; 0xd0 <ADC_read>
 192:	28 2f       	mov	r18, r24
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	b7 01       	movw	r22, r14
 198:	2e 19       	sub	r18, r14
 19a:	3f 09       	sbc	r19, r15
	if (y>=0){	y = y * 100/(255-center.y);	}
 19c:	72 f0       	brmi	.+28     	; 0x1ba <JOY_get_rel_pos+0x40>
 19e:	44 e6       	ldi	r20, 0x64	; 100
 1a0:	42 9f       	mul	r20, r18
 1a2:	c0 01       	movw	r24, r0
 1a4:	43 9f       	mul	r20, r19
 1a6:	90 0d       	add	r25, r0
 1a8:	11 24       	eor	r1, r1
 1aa:	6f ef       	ldi	r22, 0xFF	; 255
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	6e 19       	sub	r22, r14
 1b0:	7f 09       	sbc	r23, r15
 1b2:	0e 94 31 02 	call	0x462	; 0x462 <__divmodhi4>
 1b6:	eb 01       	movw	r28, r22
 1b8:	09 c0       	rjmp	.+18     	; 0x1cc <JOY_get_rel_pos+0x52>
	else{		y = y * 100/(0+center.y);		}
 1ba:	44 e6       	ldi	r20, 0x64	; 100
 1bc:	42 9f       	mul	r20, r18
 1be:	c0 01       	movw	r24, r0
 1c0:	43 9f       	mul	r20, r19
 1c2:	90 0d       	add	r25, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	0e 94 31 02 	call	0x462	; 0x462 <__divmodhi4>
 1ca:	eb 01       	movw	r28, r22
	int16_t x = ADC_read() - center.x;
 1cc:	0e 94 68 00 	call	0xd0	; 0xd0 <ADC_read>
 1d0:	28 2f       	mov	r18, r24
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	b6 01       	movw	r22, r12
 1d6:	2c 19       	sub	r18, r12
 1d8:	3d 09       	sbc	r19, r13
	if (x>=0){	x = x * 100/(255-center.x);	}
 1da:	72 f0       	brmi	.+28     	; 0x1f8 <JOY_get_rel_pos+0x7e>
 1dc:	44 e6       	ldi	r20, 0x64	; 100
 1de:	42 9f       	mul	r20, r18
 1e0:	c0 01       	movw	r24, r0
 1e2:	43 9f       	mul	r20, r19
 1e4:	90 0d       	add	r25, r0
 1e6:	11 24       	eor	r1, r1
 1e8:	6f ef       	ldi	r22, 0xFF	; 255
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	6c 19       	sub	r22, r12
 1ee:	7d 09       	sbc	r23, r13
 1f0:	0e 94 31 02 	call	0x462	; 0x462 <__divmodhi4>
 1f4:	9b 01       	movw	r18, r22
 1f6:	09 c0       	rjmp	.+18     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
	else{		x = x * 100/(0+center.x);		}
 1f8:	44 e6       	ldi	r20, 0x64	; 100
 1fa:	42 9f       	mul	r20, r18
 1fc:	c0 01       	movw	r24, r0
 1fe:	43 9f       	mul	r20, r19
 200:	90 0d       	add	r25, r0
 202:	11 24       	eor	r1, r1
 204:	0e 94 31 02 	call	0x462	; 0x462 <__divmodhi4>
 208:	9b 01       	movw	r18, r22
	return (pos_t){x,y};
 20a:	b9 01       	movw	r22, r18
 20c:	ce 01       	movw	r24, r28
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	ff 90       	pop	r15
 214:	ef 90       	pop	r14
 216:	df 90       	pop	r13
 218:	cf 90       	pop	r12
 21a:	08 95       	ret

0000021c <JOY_get_dir>:

dir JOY_get_dir(pos_t rel_pos){
	if ((abs(rel_pos.x) <= IDLE_VAL) && (abs(rel_pos.y) <= IDLE_VAL)){
 21c:	ab 01       	movw	r20, r22
 21e:	9b 01       	movw	r18, r22
 220:	2e 5c       	subi	r18, 0xCE	; 206
 222:	3f 4f       	sbci	r19, 0xFF	; 255
 224:	25 36       	cpi	r18, 0x65	; 101
 226:	31 05       	cpc	r19, r1
 228:	30 f4       	brcc	.+12     	; 0x236 <JOY_get_dir+0x1a>
 22a:	9c 01       	movw	r18, r24
 22c:	2e 5c       	subi	r18, 0xCE	; 206
 22e:	3f 4f       	sbci	r19, 0xFF	; 255
 230:	25 36       	cpi	r18, 0x65	; 101
 232:	31 05       	cpc	r19, r1
 234:	e0 f0       	brcs	.+56     	; 0x26e <JOY_get_dir+0x52>
		return IDLE;
	}
	else if (abs(rel_pos.y) > abs(rel_pos.x)){
 236:	fc 01       	movw	r30, r24
 238:	9c 01       	movw	r18, r24
 23a:	99 23       	and	r25, r25
 23c:	24 f4       	brge	.+8      	; 0x246 <JOY_get_dir+0x2a>
 23e:	22 27       	eor	r18, r18
 240:	33 27       	eor	r19, r19
 242:	28 1b       	sub	r18, r24
 244:	39 0b       	sbc	r19, r25
 246:	db 01       	movw	r26, r22
 248:	55 23       	and	r21, r21
 24a:	24 f4       	brge	.+8      	; 0x254 <JOY_get_dir+0x38>
 24c:	aa 27       	eor	r26, r26
 24e:	bb 27       	eor	r27, r27
 250:	a6 1b       	sub	r26, r22
 252:	b7 0b       	sbc	r27, r23
 254:	a2 17       	cp	r26, r18
 256:	b3 07       	cpc	r27, r19
 258:	2c f4       	brge	.+10     	; 0x264 <JOY_get_dir+0x48>
		if (rel_pos.y > 0){ return UP; }
 25a:	1e 16       	cp	r1, r30
 25c:	1f 06       	cpc	r1, r31
 25e:	4c f4       	brge	.+18     	; 0x272 <JOY_get_dir+0x56>
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret
		else {				return DOWN; }
	}
	else{
		if (rel_pos.x > 0){ return RIGHT; }
 264:	14 16       	cp	r1, r20
 266:	15 06       	cpc	r1, r21
 268:	34 f4       	brge	.+12     	; 0x276 <JOY_get_dir+0x5a>
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	08 95       	ret
	return (pos_t){x,y};
}

dir JOY_get_dir(pos_t rel_pos){
	if ((abs(rel_pos.x) <= IDLE_VAL) && (abs(rel_pos.y) <= IDLE_VAL)){
		return IDLE;
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	08 95       	ret
	}
	else if (abs(rel_pos.y) > abs(rel_pos.x)){
		if (rel_pos.y > 0){ return UP; }
		else {				return DOWN; }
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	08 95       	ret
	}
	else{
		if (rel_pos.x > 0){ return RIGHT; }
		else {				return LEFT; }
 276:	82 e0       	ldi	r24, 0x02	; 2
	}
}
 278:	08 95       	ret

0000027a <JOY_get_sliders>:

pos_t JOY_get_sliders(){
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
	ADC_sample4();
 27e:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_sample4>
	ADC_read(); ADC_read(); //trash the first two
 282:	0e 94 68 00 	call	0xd0	; 0xd0 <ADC_read>
 286:	0e 94 68 00 	call	0xd0	; 0xd0 <ADC_read>
	
	int16_t left = ADC_read();
 28a:	0e 94 68 00 	call	0xd0	; 0xd0 <ADC_read>
 28e:	c8 2f       	mov	r28, r24
 290:	d0 e0       	ldi	r29, 0x00	; 0
	int16_t right = ADC_read();
 292:	0e 94 68 00 	call	0xd0	; 0xd0 <ADC_read>
 296:	28 2f       	mov	r18, r24
	return (pos_t){left,right};
 298:	be 01       	movw	r22, r28
 29a:	82 2f       	mov	r24, r18
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <UART_init>:

//--------

void UART_init(unsigned int ubrr) {

	cli(); //disable interrupts
 2a4:	f8 94       	cli

	UBRR0H = (unsigned char)(ubrr>>8);	//set baud rate
 2a6:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 2a8:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<TXCIE0) | (1<<RXCIE0);  //enable RX,TX and TXC,RXC interrupts
 2aa:	88 ed       	ldi	r24, 0xD8	; 216
 2ac:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3<<UCSZ00); //frame format: 8 data bits, 2 stop bit, parity: none
 2ae:	8e e8       	ldi	r24, 0x8E	; 142
 2b0:	80 bd       	out	0x20, r24	; 32
	
	// redirecting stout
	FILE *uart_output = fdevopen(UART_putchar, NULL);
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	81 e8       	ldi	r24, 0x81	; 129
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 59 02 	call	0x4b2	; 0x4b2 <fdevopen>
	stdout = uart_output;
 2be:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <__iob+0x3>
 2c2:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <__iob+0x2>
	
	sei();  //re-enable global interrupt
 2c6:	78 94       	sei
	
	//set led pins
	DDRB |= (1<<TXLED) | (1<<RXLED);	//direction: output
 2c8:	87 b3       	in	r24, 0x17	; 23
 2ca:	86 60       	ori	r24, 0x06	; 6
 2cc:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<TXLED) | (1<<RXLED);	//turn them off (sink-mode)
 2ce:	88 b3       	in	r24, 0x18	; 24
 2d0:	86 60       	ori	r24, 0x06	; 6
 2d2:	88 bb       	out	0x18, r24	; 24
 2d4:	08 95       	ret

000002d6 <__vector_23>:
}

//-------- TRANSMISSION -----------

ISR(USART0_TXC_vect) {
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
	PORTB ^= (1<<TXLED); //blink as response of successful transmission
 2e4:	98 b3       	in	r25, 0x18	; 24
 2e6:	84 e0       	ldi	r24, 0x04	; 4
 2e8:	89 27       	eor	r24, r25
 2ea:	88 bb       	out	0x18, r24	; 24
}
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <UART_transmit>:

void UART_transmit(char data){
	while (!(UCSR0A & (1<<UDRE0))); //wait until UDRE->1 = ready
 2fa:	5d 9b       	sbis	0x0b, 5	; 11
 2fc:	fe cf       	rjmp	.-4      	; 0x2fa <UART_transmit>
	UDR0 = data;
 2fe:	8c b9       	out	0x0c, r24	; 12
 300:	08 95       	ret

00000302 <UART_putchar>:
}

// using two different functions transmit data (maybe unify them under putchar) / maybe adding ring buffer to write data also
int UART_putchar(char c, FILE *stream)
{	UART_transmit(c);
 302:	0e 94 7d 01 	call	0x2fa	; 0x2fa <UART_transmit>
	return 0;
}
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	08 95       	ret

0000030c <UART_receive>:

//---------- RECEIVING ------------

char UART_receive(){
	//frame-error OR data-over-run OR parity-error
	if ( UCSR0A & ((1<<FE0)|(1<<DOR0)|(1<<UPE0)) )
 30c:	8b b1       	in	r24, 0x0b	; 11
 30e:	8c 71       	andi	r24, 0x1C	; 28
 310:	31 f4       	brne	.+12     	; 0x31e <UART_receive+0x12>
		return -1;
	
	PORTB ^= (1<<RXLED); //blink led to report success of rx
 312:	98 b3       	in	r25, 0x18	; 24
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	89 27       	eor	r24, r25
 318:	88 bb       	out	0x18, r24	; 24
	return UDR0;
 31a:	8c b1       	in	r24, 0x0c	; 12
 31c:	08 95       	ret
//---------- RECEIVING ------------

char UART_receive(){
	//frame-error OR data-over-run OR parity-error
	if ( UCSR0A & ((1<<FE0)|(1<<DOR0)|(1<<UPE0)) )
		return -1;
 31e:	8f ef       	ldi	r24, 0xFF	; 255
	
	PORTB ^= (1<<RXLED); //blink led to report success of rx
	return UDR0;
}
 320:	08 95       	ret

00000322 <__vector_19>:

// Interrupt service routine for receiving data
ISR(USART0_RXC_vect) {
 322:	1f 92       	push	r1
 324:	0f 92       	push	r0
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	2f 93       	push	r18
 32e:	3f 93       	push	r19
 330:	4f 93       	push	r20
 332:	5f 93       	push	r21
 334:	6f 93       	push	r22
 336:	7f 93       	push	r23
 338:	8f 93       	push	r24
 33a:	9f 93       	push	r25
 33c:	af 93       	push	r26
 33e:	bf 93       	push	r27
 340:	ef 93       	push	r30
 342:	ff 93       	push	r31
	received_data = UART_receive();
 344:	0e 94 86 01 	call	0x30c	; 0x30c <UART_receive>
 348:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
	printf("@echo: %c\n\r", received_data);
 34c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 350:	1f 92       	push	r1
 352:	8f 93       	push	r24
 354:	88 e3       	ldi	r24, 0x38	; 56
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	9f 93       	push	r25
 35a:	8f 93       	push	r24
 35c:	0e 94 a4 02 	call	0x548	; 0x548 <printf>
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	4f 91       	pop	r20
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <XMEM_init>:
#include "XMEM.h"

void XMEM_init(){
	MCUCR |= (1<<SRE);
 38a:	85 b7       	in	r24, 0x35	; 53
 38c:	80 68       	ori	r24, 0x80	; 128
 38e:	85 bf       	out	0x35, r24	; 53
	SFIOR = (1<<XMM2); //XMM=100 - mask PA7-4 for jtag
 390:	80 e2       	ldi	r24, 0x20	; 32
 392:	80 bf       	out	0x30, r24	; 48
 394:	08 95       	ret

00000396 <main>:
#include "utils.h"
#include "drivers/gamepad.h"

int main(void)
{	
	UART_init(MYUBRR);
 396:	8f e1       	ldi	r24, 0x1F	; 31
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <UART_init>
	XMEM_init();
 39e:	0e 94 c5 01 	call	0x38a	; 0x38a <XMEM_init>
	ADC_init();
 3a2:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	
	pos_t center = JOY_calibrate();
 3a6:	0e 94 6f 00 	call	0xde	; 0xde <JOY_calibrate>
 3aa:	6b 01       	movw	r12, r22
 3ac:	7c 01       	movw	r14, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ae:	2f ef       	ldi	r18, 0xFF	; 255
 3b0:	8f ef       	ldi	r24, 0xFF	; 255
 3b2:	9e e0       	ldi	r25, 0x0E	; 14
 3b4:	21 50       	subi	r18, 0x01	; 1
 3b6:	80 40       	sbci	r24, 0x00	; 0
 3b8:	90 40       	sbci	r25, 0x00	; 0
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <main+0x1e>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <main+0x28>
 3be:	00 00       	nop
	_delay_ms(1000);
	
	while(1){
		pos_t pos = JOY_get_rel_pos(center);
 3c0:	c7 01       	movw	r24, r14
 3c2:	b6 01       	movw	r22, r12
 3c4:	0e 94 bd 00 	call	0x17a	; 0x17a <JOY_get_rel_pos>
 3c8:	16 2f       	mov	r17, r22
 3ca:	07 2f       	mov	r16, r23
 3cc:	c8 2f       	mov	r28, r24
 3ce:	d9 2f       	mov	r29, r25
		dir direction = JOY_get_dir(pos);
 3d0:	0e 94 0e 01 	call	0x21c	; 0x21c <JOY_get_dir>
 3d4:	78 2e       	mov	r7, r24
		pos_t sliders = JOY_get_sliders();
 3d6:	0e 94 3d 01 	call	0x27a	; 0x27a <JOY_get_sliders>
 3da:	96 2e       	mov	r9, r22
 3dc:	87 2e       	mov	r8, r23
 3de:	b8 2e       	mov	r11, r24
 3e0:	a9 2e       	mov	r10, r25
		
		printf("\x1B[2J\x1b[H");
 3e2:	84 e4       	ldi	r24, 0x44	; 68
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	9f 93       	push	r25
 3e8:	8f 93       	push	r24
 3ea:	0e 94 a4 02 	call	0x548	; 0x548 <printf>
		printf("x %d\n\r",pos.x);
 3ee:	0f 93       	push	r16
 3f0:	1f 93       	push	r17
 3f2:	8c e4       	ldi	r24, 0x4C	; 76
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	9f 93       	push	r25
 3f8:	8f 93       	push	r24
 3fa:	0e 94 a4 02 	call	0x548	; 0x548 <printf>
		printf("y %d\n\r",pos.y);
 3fe:	df 93       	push	r29
 400:	cf 93       	push	r28
 402:	83 e5       	ldi	r24, 0x53	; 83
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	9f 93       	push	r25
 408:	8f 93       	push	r24
 40a:	0e 94 a4 02 	call	0x548	; 0x548 <printf>
		
		printf("DIR: %d\n\r",direction);
 40e:	1f 92       	push	r1
 410:	7f 92       	push	r7
 412:	8a e5       	ldi	r24, 0x5A	; 90
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	9f 93       	push	r25
 418:	8f 93       	push	r24
 41a:	0e 94 a4 02 	call	0x548	; 0x548 <printf>
		
		printf("sliderL %d\n\r",sliders.x);
 41e:	8f 92       	push	r8
 420:	9f 92       	push	r9
 422:	84 e6       	ldi	r24, 0x64	; 100
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	9f 93       	push	r25
 428:	8f 93       	push	r24
 42a:	0e 94 a4 02 	call	0x548	; 0x548 <printf>
		printf("sliderR %d\n\r",sliders.y);
 42e:	af 92       	push	r10
 430:	bf 92       	push	r11
 432:	81 e7       	ldi	r24, 0x71	; 113
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	9f 93       	push	r25
 438:	8f 93       	push	r24
 43a:	0e 94 a4 02 	call	0x548	; 0x548 <printf>
 43e:	2f ef       	ldi	r18, 0xFF	; 255
 440:	8f e7       	ldi	r24, 0x7F	; 127
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	21 50       	subi	r18, 0x01	; 1
 446:	80 40       	sbci	r24, 0x00	; 0
 448:	90 40       	sbci	r25, 0x00	; 0
 44a:	e1 f7       	brne	.-8      	; 0x444 <__DATA_REGION_LENGTH__+0x44>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <__DATA_REGION_LENGTH__+0x50>
 450:	8d b7       	in	r24, 0x3d	; 61
 452:	9e b7       	in	r25, 0x3e	; 62
 454:	46 96       	adiw	r24, 0x16	; 22
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	f8 94       	cli
 45a:	9e bf       	out	0x3e, r25	; 62
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	8d bf       	out	0x3d, r24	; 61
 460:	af cf       	rjmp	.-162    	; 0x3c0 <main+0x2a>

00000462 <__divmodhi4>:
 462:	97 fb       	bst	r25, 7
 464:	07 2e       	mov	r0, r23
 466:	16 f4       	brtc	.+4      	; 0x46c <__divmodhi4+0xa>
 468:	00 94       	com	r0
 46a:	07 d0       	rcall	.+14     	; 0x47a <__divmodhi4_neg1>
 46c:	77 fd       	sbrc	r23, 7
 46e:	09 d0       	rcall	.+18     	; 0x482 <__divmodhi4_neg2>
 470:	0e 94 45 02 	call	0x48a	; 0x48a <__udivmodhi4>
 474:	07 fc       	sbrc	r0, 7
 476:	05 d0       	rcall	.+10     	; 0x482 <__divmodhi4_neg2>
 478:	3e f4       	brtc	.+14     	; 0x488 <__divmodhi4_exit>

0000047a <__divmodhi4_neg1>:
 47a:	90 95       	com	r25
 47c:	81 95       	neg	r24
 47e:	9f 4f       	sbci	r25, 0xFF	; 255
 480:	08 95       	ret

00000482 <__divmodhi4_neg2>:
 482:	70 95       	com	r23
 484:	61 95       	neg	r22
 486:	7f 4f       	sbci	r23, 0xFF	; 255

00000488 <__divmodhi4_exit>:
 488:	08 95       	ret

0000048a <__udivmodhi4>:
 48a:	aa 1b       	sub	r26, r26
 48c:	bb 1b       	sub	r27, r27
 48e:	51 e1       	ldi	r21, 0x11	; 17
 490:	07 c0       	rjmp	.+14     	; 0x4a0 <__udivmodhi4_ep>

00000492 <__udivmodhi4_loop>:
 492:	aa 1f       	adc	r26, r26
 494:	bb 1f       	adc	r27, r27
 496:	a6 17       	cp	r26, r22
 498:	b7 07       	cpc	r27, r23
 49a:	10 f0       	brcs	.+4      	; 0x4a0 <__udivmodhi4_ep>
 49c:	a6 1b       	sub	r26, r22
 49e:	b7 0b       	sbc	r27, r23

000004a0 <__udivmodhi4_ep>:
 4a0:	88 1f       	adc	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	5a 95       	dec	r21
 4a6:	a9 f7       	brne	.-22     	; 0x492 <__udivmodhi4_loop>
 4a8:	80 95       	com	r24
 4aa:	90 95       	com	r25
 4ac:	bc 01       	movw	r22, r24
 4ae:	cd 01       	movw	r24, r26
 4b0:	08 95       	ret

000004b2 <fdevopen>:
 4b2:	0f 93       	push	r16
 4b4:	1f 93       	push	r17
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	00 97       	sbiw	r24, 0x00	; 0
 4bc:	31 f4       	brne	.+12     	; 0x4ca <fdevopen+0x18>
 4be:	61 15       	cp	r22, r1
 4c0:	71 05       	cpc	r23, r1
 4c2:	19 f4       	brne	.+6      	; 0x4ca <fdevopen+0x18>
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	3a c0       	rjmp	.+116    	; 0x53e <__stack+0x3f>
 4ca:	8b 01       	movw	r16, r22
 4cc:	ec 01       	movw	r28, r24
 4ce:	6e e0       	ldi	r22, 0x0E	; 14
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 9b 04 	call	0x936	; 0x936 <calloc>
 4da:	fc 01       	movw	r30, r24
 4dc:	89 2b       	or	r24, r25
 4de:	91 f3       	breq	.-28     	; 0x4c4 <fdevopen+0x12>
 4e0:	80 e8       	ldi	r24, 0x80	; 128
 4e2:	83 83       	std	Z+3, r24	; 0x03
 4e4:	01 15       	cp	r16, r1
 4e6:	11 05       	cpc	r17, r1
 4e8:	71 f0       	breq	.+28     	; 0x506 <__stack+0x7>
 4ea:	13 87       	std	Z+11, r17	; 0x0b
 4ec:	02 87       	std	Z+10, r16	; 0x0a
 4ee:	81 e8       	ldi	r24, 0x81	; 129
 4f0:	83 83       	std	Z+3, r24	; 0x03
 4f2:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <__iob>
 4f6:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <__iob+0x1>
 4fa:	89 2b       	or	r24, r25
 4fc:	21 f4       	brne	.+8      	; 0x506 <__stack+0x7>
 4fe:	f0 93 80 01 	sts	0x0180, r31	; 0x800180 <__iob+0x1>
 502:	e0 93 7f 01 	sts	0x017F, r30	; 0x80017f <__iob>
 506:	20 97       	sbiw	r28, 0x00	; 0
 508:	c9 f0       	breq	.+50     	; 0x53c <__stack+0x3d>
 50a:	d1 87       	std	Z+9, r29	; 0x09
 50c:	c0 87       	std	Z+8, r28	; 0x08
 50e:	83 81       	ldd	r24, Z+3	; 0x03
 510:	82 60       	ori	r24, 0x02	; 2
 512:	83 83       	std	Z+3, r24	; 0x03
 514:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <__iob+0x2>
 518:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <__iob+0x3>
 51c:	89 2b       	or	r24, r25
 51e:	71 f4       	brne	.+28     	; 0x53c <__stack+0x3d>
 520:	f0 93 82 01 	sts	0x0182, r31	; 0x800182 <__iob+0x3>
 524:	e0 93 81 01 	sts	0x0181, r30	; 0x800181 <__iob+0x2>
 528:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <__iob+0x4>
 52c:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <__iob+0x5>
 530:	89 2b       	or	r24, r25
 532:	21 f4       	brne	.+8      	; 0x53c <__stack+0x3d>
 534:	f0 93 84 01 	sts	0x0184, r31	; 0x800184 <__iob+0x5>
 538:	e0 93 83 01 	sts	0x0183, r30	; 0x800183 <__iob+0x4>
 53c:	cf 01       	movw	r24, r30
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	08 95       	ret

00000548 <printf>:
 548:	a0 e0       	ldi	r26, 0x00	; 0
 54a:	b0 e0       	ldi	r27, 0x00	; 0
 54c:	ea ea       	ldi	r30, 0xAA	; 170
 54e:	f2 e0       	ldi	r31, 0x02	; 2
 550:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__prologue_saves__+0x20>
 554:	ae 01       	movw	r20, r28
 556:	4b 5f       	subi	r20, 0xFB	; 251
 558:	5f 4f       	sbci	r21, 0xFF	; 255
 55a:	fa 01       	movw	r30, r20
 55c:	61 91       	ld	r22, Z+
 55e:	71 91       	ld	r23, Z+
 560:	af 01       	movw	r20, r30
 562:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <__iob+0x2>
 566:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <__iob+0x3>
 56a:	0e 94 ba 02 	call	0x574	; 0x574 <vfprintf>
 56e:	e2 e0       	ldi	r30, 0x02	; 2
 570:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__epilogue_restores__+0x20>

00000574 <vfprintf>:
 574:	ab e0       	ldi	r26, 0x0B	; 11
 576:	b0 e0       	ldi	r27, 0x00	; 0
 578:	e0 ec       	ldi	r30, 0xC0	; 192
 57a:	f2 e0       	ldi	r31, 0x02	; 2
 57c:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__prologue_saves__>
 580:	6c 01       	movw	r12, r24
 582:	7b 01       	movw	r14, r22
 584:	8a 01       	movw	r16, r20
 586:	fc 01       	movw	r30, r24
 588:	17 82       	std	Z+7, r1	; 0x07
 58a:	16 82       	std	Z+6, r1	; 0x06
 58c:	83 81       	ldd	r24, Z+3	; 0x03
 58e:	81 ff       	sbrs	r24, 1
 590:	cc c1       	rjmp	.+920    	; 0x92a <vfprintf+0x3b6>
 592:	ce 01       	movw	r24, r28
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	3c 01       	movw	r6, r24
 598:	f6 01       	movw	r30, r12
 59a:	93 81       	ldd	r25, Z+3	; 0x03
 59c:	f7 01       	movw	r30, r14
 59e:	93 fd       	sbrc	r25, 3
 5a0:	85 91       	lpm	r24, Z+
 5a2:	93 ff       	sbrs	r25, 3
 5a4:	81 91       	ld	r24, Z+
 5a6:	7f 01       	movw	r14, r30
 5a8:	88 23       	and	r24, r24
 5aa:	09 f4       	brne	.+2      	; 0x5ae <vfprintf+0x3a>
 5ac:	ba c1       	rjmp	.+884    	; 0x922 <vfprintf+0x3ae>
 5ae:	85 32       	cpi	r24, 0x25	; 37
 5b0:	39 f4       	brne	.+14     	; 0x5c0 <vfprintf+0x4c>
 5b2:	93 fd       	sbrc	r25, 3
 5b4:	85 91       	lpm	r24, Z+
 5b6:	93 ff       	sbrs	r25, 3
 5b8:	81 91       	ld	r24, Z+
 5ba:	7f 01       	movw	r14, r30
 5bc:	85 32       	cpi	r24, 0x25	; 37
 5be:	29 f4       	brne	.+10     	; 0x5ca <vfprintf+0x56>
 5c0:	b6 01       	movw	r22, r12
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 f5 05 	call	0xbea	; 0xbea <fputc>
 5c8:	e7 cf       	rjmp	.-50     	; 0x598 <vfprintf+0x24>
 5ca:	91 2c       	mov	r9, r1
 5cc:	21 2c       	mov	r2, r1
 5ce:	31 2c       	mov	r3, r1
 5d0:	ff e1       	ldi	r31, 0x1F	; 31
 5d2:	f3 15       	cp	r31, r3
 5d4:	d8 f0       	brcs	.+54     	; 0x60c <vfprintf+0x98>
 5d6:	8b 32       	cpi	r24, 0x2B	; 43
 5d8:	79 f0       	breq	.+30     	; 0x5f8 <vfprintf+0x84>
 5da:	38 f4       	brcc	.+14     	; 0x5ea <vfprintf+0x76>
 5dc:	80 32       	cpi	r24, 0x20	; 32
 5de:	79 f0       	breq	.+30     	; 0x5fe <vfprintf+0x8a>
 5e0:	83 32       	cpi	r24, 0x23	; 35
 5e2:	a1 f4       	brne	.+40     	; 0x60c <vfprintf+0x98>
 5e4:	23 2d       	mov	r18, r3
 5e6:	20 61       	ori	r18, 0x10	; 16
 5e8:	1d c0       	rjmp	.+58     	; 0x624 <vfprintf+0xb0>
 5ea:	8d 32       	cpi	r24, 0x2D	; 45
 5ec:	61 f0       	breq	.+24     	; 0x606 <vfprintf+0x92>
 5ee:	80 33       	cpi	r24, 0x30	; 48
 5f0:	69 f4       	brne	.+26     	; 0x60c <vfprintf+0x98>
 5f2:	23 2d       	mov	r18, r3
 5f4:	21 60       	ori	r18, 0x01	; 1
 5f6:	16 c0       	rjmp	.+44     	; 0x624 <vfprintf+0xb0>
 5f8:	83 2d       	mov	r24, r3
 5fa:	82 60       	ori	r24, 0x02	; 2
 5fc:	38 2e       	mov	r3, r24
 5fe:	e3 2d       	mov	r30, r3
 600:	e4 60       	ori	r30, 0x04	; 4
 602:	3e 2e       	mov	r3, r30
 604:	2a c0       	rjmp	.+84     	; 0x65a <vfprintf+0xe6>
 606:	f3 2d       	mov	r31, r3
 608:	f8 60       	ori	r31, 0x08	; 8
 60a:	1d c0       	rjmp	.+58     	; 0x646 <vfprintf+0xd2>
 60c:	37 fc       	sbrc	r3, 7
 60e:	2d c0       	rjmp	.+90     	; 0x66a <vfprintf+0xf6>
 610:	20 ed       	ldi	r18, 0xD0	; 208
 612:	28 0f       	add	r18, r24
 614:	2a 30       	cpi	r18, 0x0A	; 10
 616:	40 f0       	brcs	.+16     	; 0x628 <vfprintf+0xb4>
 618:	8e 32       	cpi	r24, 0x2E	; 46
 61a:	b9 f4       	brne	.+46     	; 0x64a <vfprintf+0xd6>
 61c:	36 fc       	sbrc	r3, 6
 61e:	81 c1       	rjmp	.+770    	; 0x922 <vfprintf+0x3ae>
 620:	23 2d       	mov	r18, r3
 622:	20 64       	ori	r18, 0x40	; 64
 624:	32 2e       	mov	r3, r18
 626:	19 c0       	rjmp	.+50     	; 0x65a <vfprintf+0xe6>
 628:	36 fe       	sbrs	r3, 6
 62a:	06 c0       	rjmp	.+12     	; 0x638 <vfprintf+0xc4>
 62c:	8a e0       	ldi	r24, 0x0A	; 10
 62e:	98 9e       	mul	r9, r24
 630:	20 0d       	add	r18, r0
 632:	11 24       	eor	r1, r1
 634:	92 2e       	mov	r9, r18
 636:	11 c0       	rjmp	.+34     	; 0x65a <vfprintf+0xe6>
 638:	ea e0       	ldi	r30, 0x0A	; 10
 63a:	2e 9e       	mul	r2, r30
 63c:	20 0d       	add	r18, r0
 63e:	11 24       	eor	r1, r1
 640:	22 2e       	mov	r2, r18
 642:	f3 2d       	mov	r31, r3
 644:	f0 62       	ori	r31, 0x20	; 32
 646:	3f 2e       	mov	r3, r31
 648:	08 c0       	rjmp	.+16     	; 0x65a <vfprintf+0xe6>
 64a:	8c 36       	cpi	r24, 0x6C	; 108
 64c:	21 f4       	brne	.+8      	; 0x656 <vfprintf+0xe2>
 64e:	83 2d       	mov	r24, r3
 650:	80 68       	ori	r24, 0x80	; 128
 652:	38 2e       	mov	r3, r24
 654:	02 c0       	rjmp	.+4      	; 0x65a <vfprintf+0xe6>
 656:	88 36       	cpi	r24, 0x68	; 104
 658:	41 f4       	brne	.+16     	; 0x66a <vfprintf+0xf6>
 65a:	f7 01       	movw	r30, r14
 65c:	93 fd       	sbrc	r25, 3
 65e:	85 91       	lpm	r24, Z+
 660:	93 ff       	sbrs	r25, 3
 662:	81 91       	ld	r24, Z+
 664:	7f 01       	movw	r14, r30
 666:	81 11       	cpse	r24, r1
 668:	b3 cf       	rjmp	.-154    	; 0x5d0 <vfprintf+0x5c>
 66a:	98 2f       	mov	r25, r24
 66c:	9f 7d       	andi	r25, 0xDF	; 223
 66e:	95 54       	subi	r25, 0x45	; 69
 670:	93 30       	cpi	r25, 0x03	; 3
 672:	28 f4       	brcc	.+10     	; 0x67e <vfprintf+0x10a>
 674:	0c 5f       	subi	r16, 0xFC	; 252
 676:	1f 4f       	sbci	r17, 0xFF	; 255
 678:	9f e3       	ldi	r25, 0x3F	; 63
 67a:	99 83       	std	Y+1, r25	; 0x01
 67c:	0d c0       	rjmp	.+26     	; 0x698 <vfprintf+0x124>
 67e:	83 36       	cpi	r24, 0x63	; 99
 680:	31 f0       	breq	.+12     	; 0x68e <vfprintf+0x11a>
 682:	83 37       	cpi	r24, 0x73	; 115
 684:	71 f0       	breq	.+28     	; 0x6a2 <vfprintf+0x12e>
 686:	83 35       	cpi	r24, 0x53	; 83
 688:	09 f0       	breq	.+2      	; 0x68c <vfprintf+0x118>
 68a:	59 c0       	rjmp	.+178    	; 0x73e <vfprintf+0x1ca>
 68c:	21 c0       	rjmp	.+66     	; 0x6d0 <vfprintf+0x15c>
 68e:	f8 01       	movw	r30, r16
 690:	80 81       	ld	r24, Z
 692:	89 83       	std	Y+1, r24	; 0x01
 694:	0e 5f       	subi	r16, 0xFE	; 254
 696:	1f 4f       	sbci	r17, 0xFF	; 255
 698:	88 24       	eor	r8, r8
 69a:	83 94       	inc	r8
 69c:	91 2c       	mov	r9, r1
 69e:	53 01       	movw	r10, r6
 6a0:	13 c0       	rjmp	.+38     	; 0x6c8 <vfprintf+0x154>
 6a2:	28 01       	movw	r4, r16
 6a4:	f2 e0       	ldi	r31, 0x02	; 2
 6a6:	4f 0e       	add	r4, r31
 6a8:	51 1c       	adc	r5, r1
 6aa:	f8 01       	movw	r30, r16
 6ac:	a0 80       	ld	r10, Z
 6ae:	b1 80       	ldd	r11, Z+1	; 0x01
 6b0:	36 fe       	sbrs	r3, 6
 6b2:	03 c0       	rjmp	.+6      	; 0x6ba <vfprintf+0x146>
 6b4:	69 2d       	mov	r22, r9
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <vfprintf+0x14a>
 6ba:	6f ef       	ldi	r22, 0xFF	; 255
 6bc:	7f ef       	ldi	r23, 0xFF	; 255
 6be:	c5 01       	movw	r24, r10
 6c0:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <strnlen>
 6c4:	4c 01       	movw	r8, r24
 6c6:	82 01       	movw	r16, r4
 6c8:	f3 2d       	mov	r31, r3
 6ca:	ff 77       	andi	r31, 0x7F	; 127
 6cc:	3f 2e       	mov	r3, r31
 6ce:	16 c0       	rjmp	.+44     	; 0x6fc <vfprintf+0x188>
 6d0:	28 01       	movw	r4, r16
 6d2:	22 e0       	ldi	r18, 0x02	; 2
 6d4:	42 0e       	add	r4, r18
 6d6:	51 1c       	adc	r5, r1
 6d8:	f8 01       	movw	r30, r16
 6da:	a0 80       	ld	r10, Z
 6dc:	b1 80       	ldd	r11, Z+1	; 0x01
 6de:	36 fe       	sbrs	r3, 6
 6e0:	03 c0       	rjmp	.+6      	; 0x6e8 <vfprintf+0x174>
 6e2:	69 2d       	mov	r22, r9
 6e4:	70 e0       	ldi	r23, 0x00	; 0
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <vfprintf+0x178>
 6e8:	6f ef       	ldi	r22, 0xFF	; 255
 6ea:	7f ef       	ldi	r23, 0xFF	; 255
 6ec:	c5 01       	movw	r24, r10
 6ee:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <strnlen_P>
 6f2:	4c 01       	movw	r8, r24
 6f4:	f3 2d       	mov	r31, r3
 6f6:	f0 68       	ori	r31, 0x80	; 128
 6f8:	3f 2e       	mov	r3, r31
 6fa:	82 01       	movw	r16, r4
 6fc:	33 fc       	sbrc	r3, 3
 6fe:	1b c0       	rjmp	.+54     	; 0x736 <vfprintf+0x1c2>
 700:	82 2d       	mov	r24, r2
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	88 16       	cp	r8, r24
 706:	99 06       	cpc	r9, r25
 708:	b0 f4       	brcc	.+44     	; 0x736 <vfprintf+0x1c2>
 70a:	b6 01       	movw	r22, r12
 70c:	80 e2       	ldi	r24, 0x20	; 32
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 f5 05 	call	0xbea	; 0xbea <fputc>
 714:	2a 94       	dec	r2
 716:	f4 cf       	rjmp	.-24     	; 0x700 <vfprintf+0x18c>
 718:	f5 01       	movw	r30, r10
 71a:	37 fc       	sbrc	r3, 7
 71c:	85 91       	lpm	r24, Z+
 71e:	37 fe       	sbrs	r3, 7
 720:	81 91       	ld	r24, Z+
 722:	5f 01       	movw	r10, r30
 724:	b6 01       	movw	r22, r12
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 f5 05 	call	0xbea	; 0xbea <fputc>
 72c:	21 10       	cpse	r2, r1
 72e:	2a 94       	dec	r2
 730:	21 e0       	ldi	r18, 0x01	; 1
 732:	82 1a       	sub	r8, r18
 734:	91 08       	sbc	r9, r1
 736:	81 14       	cp	r8, r1
 738:	91 04       	cpc	r9, r1
 73a:	71 f7       	brne	.-36     	; 0x718 <vfprintf+0x1a4>
 73c:	e8 c0       	rjmp	.+464    	; 0x90e <vfprintf+0x39a>
 73e:	84 36       	cpi	r24, 0x64	; 100
 740:	11 f0       	breq	.+4      	; 0x746 <vfprintf+0x1d2>
 742:	89 36       	cpi	r24, 0x69	; 105
 744:	41 f5       	brne	.+80     	; 0x796 <vfprintf+0x222>
 746:	f8 01       	movw	r30, r16
 748:	37 fe       	sbrs	r3, 7
 74a:	07 c0       	rjmp	.+14     	; 0x75a <vfprintf+0x1e6>
 74c:	60 81       	ld	r22, Z
 74e:	71 81       	ldd	r23, Z+1	; 0x01
 750:	82 81       	ldd	r24, Z+2	; 0x02
 752:	93 81       	ldd	r25, Z+3	; 0x03
 754:	0c 5f       	subi	r16, 0xFC	; 252
 756:	1f 4f       	sbci	r17, 0xFF	; 255
 758:	08 c0       	rjmp	.+16     	; 0x76a <vfprintf+0x1f6>
 75a:	60 81       	ld	r22, Z
 75c:	71 81       	ldd	r23, Z+1	; 0x01
 75e:	07 2e       	mov	r0, r23
 760:	00 0c       	add	r0, r0
 762:	88 0b       	sbc	r24, r24
 764:	99 0b       	sbc	r25, r25
 766:	0e 5f       	subi	r16, 0xFE	; 254
 768:	1f 4f       	sbci	r17, 0xFF	; 255
 76a:	f3 2d       	mov	r31, r3
 76c:	ff 76       	andi	r31, 0x6F	; 111
 76e:	3f 2e       	mov	r3, r31
 770:	97 ff       	sbrs	r25, 7
 772:	09 c0       	rjmp	.+18     	; 0x786 <vfprintf+0x212>
 774:	90 95       	com	r25
 776:	80 95       	com	r24
 778:	70 95       	com	r23
 77a:	61 95       	neg	r22
 77c:	7f 4f       	sbci	r23, 0xFF	; 255
 77e:	8f 4f       	sbci	r24, 0xFF	; 255
 780:	9f 4f       	sbci	r25, 0xFF	; 255
 782:	f0 68       	ori	r31, 0x80	; 128
 784:	3f 2e       	mov	r3, r31
 786:	2a e0       	ldi	r18, 0x0A	; 10
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	a3 01       	movw	r20, r6
 78c:	0e 94 31 06 	call	0xc62	; 0xc62 <__ultoa_invert>
 790:	88 2e       	mov	r8, r24
 792:	86 18       	sub	r8, r6
 794:	45 c0       	rjmp	.+138    	; 0x820 <vfprintf+0x2ac>
 796:	85 37       	cpi	r24, 0x75	; 117
 798:	31 f4       	brne	.+12     	; 0x7a6 <vfprintf+0x232>
 79a:	23 2d       	mov	r18, r3
 79c:	2f 7e       	andi	r18, 0xEF	; 239
 79e:	b2 2e       	mov	r11, r18
 7a0:	2a e0       	ldi	r18, 0x0A	; 10
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	25 c0       	rjmp	.+74     	; 0x7f0 <vfprintf+0x27c>
 7a6:	93 2d       	mov	r25, r3
 7a8:	99 7f       	andi	r25, 0xF9	; 249
 7aa:	b9 2e       	mov	r11, r25
 7ac:	8f 36       	cpi	r24, 0x6F	; 111
 7ae:	c1 f0       	breq	.+48     	; 0x7e0 <vfprintf+0x26c>
 7b0:	18 f4       	brcc	.+6      	; 0x7b8 <vfprintf+0x244>
 7b2:	88 35       	cpi	r24, 0x58	; 88
 7b4:	79 f0       	breq	.+30     	; 0x7d4 <vfprintf+0x260>
 7b6:	b5 c0       	rjmp	.+362    	; 0x922 <vfprintf+0x3ae>
 7b8:	80 37       	cpi	r24, 0x70	; 112
 7ba:	19 f0       	breq	.+6      	; 0x7c2 <vfprintf+0x24e>
 7bc:	88 37       	cpi	r24, 0x78	; 120
 7be:	21 f0       	breq	.+8      	; 0x7c8 <vfprintf+0x254>
 7c0:	b0 c0       	rjmp	.+352    	; 0x922 <vfprintf+0x3ae>
 7c2:	e9 2f       	mov	r30, r25
 7c4:	e0 61       	ori	r30, 0x10	; 16
 7c6:	be 2e       	mov	r11, r30
 7c8:	b4 fe       	sbrs	r11, 4
 7ca:	0d c0       	rjmp	.+26     	; 0x7e6 <vfprintf+0x272>
 7cc:	fb 2d       	mov	r31, r11
 7ce:	f4 60       	ori	r31, 0x04	; 4
 7d0:	bf 2e       	mov	r11, r31
 7d2:	09 c0       	rjmp	.+18     	; 0x7e6 <vfprintf+0x272>
 7d4:	34 fe       	sbrs	r3, 4
 7d6:	0a c0       	rjmp	.+20     	; 0x7ec <vfprintf+0x278>
 7d8:	29 2f       	mov	r18, r25
 7da:	26 60       	ori	r18, 0x06	; 6
 7dc:	b2 2e       	mov	r11, r18
 7de:	06 c0       	rjmp	.+12     	; 0x7ec <vfprintf+0x278>
 7e0:	28 e0       	ldi	r18, 0x08	; 8
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <vfprintf+0x27c>
 7e6:	20 e1       	ldi	r18, 0x10	; 16
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <vfprintf+0x27c>
 7ec:	20 e1       	ldi	r18, 0x10	; 16
 7ee:	32 e0       	ldi	r19, 0x02	; 2
 7f0:	f8 01       	movw	r30, r16
 7f2:	b7 fe       	sbrs	r11, 7
 7f4:	07 c0       	rjmp	.+14     	; 0x804 <vfprintf+0x290>
 7f6:	60 81       	ld	r22, Z
 7f8:	71 81       	ldd	r23, Z+1	; 0x01
 7fa:	82 81       	ldd	r24, Z+2	; 0x02
 7fc:	93 81       	ldd	r25, Z+3	; 0x03
 7fe:	0c 5f       	subi	r16, 0xFC	; 252
 800:	1f 4f       	sbci	r17, 0xFF	; 255
 802:	06 c0       	rjmp	.+12     	; 0x810 <vfprintf+0x29c>
 804:	60 81       	ld	r22, Z
 806:	71 81       	ldd	r23, Z+1	; 0x01
 808:	80 e0       	ldi	r24, 0x00	; 0
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 5f       	subi	r16, 0xFE	; 254
 80e:	1f 4f       	sbci	r17, 0xFF	; 255
 810:	a3 01       	movw	r20, r6
 812:	0e 94 31 06 	call	0xc62	; 0xc62 <__ultoa_invert>
 816:	88 2e       	mov	r8, r24
 818:	86 18       	sub	r8, r6
 81a:	fb 2d       	mov	r31, r11
 81c:	ff 77       	andi	r31, 0x7F	; 127
 81e:	3f 2e       	mov	r3, r31
 820:	36 fe       	sbrs	r3, 6
 822:	0d c0       	rjmp	.+26     	; 0x83e <vfprintf+0x2ca>
 824:	23 2d       	mov	r18, r3
 826:	2e 7f       	andi	r18, 0xFE	; 254
 828:	a2 2e       	mov	r10, r18
 82a:	89 14       	cp	r8, r9
 82c:	58 f4       	brcc	.+22     	; 0x844 <vfprintf+0x2d0>
 82e:	34 fe       	sbrs	r3, 4
 830:	0b c0       	rjmp	.+22     	; 0x848 <vfprintf+0x2d4>
 832:	32 fc       	sbrc	r3, 2
 834:	09 c0       	rjmp	.+18     	; 0x848 <vfprintf+0x2d4>
 836:	83 2d       	mov	r24, r3
 838:	8e 7e       	andi	r24, 0xEE	; 238
 83a:	a8 2e       	mov	r10, r24
 83c:	05 c0       	rjmp	.+10     	; 0x848 <vfprintf+0x2d4>
 83e:	b8 2c       	mov	r11, r8
 840:	a3 2c       	mov	r10, r3
 842:	03 c0       	rjmp	.+6      	; 0x84a <vfprintf+0x2d6>
 844:	b8 2c       	mov	r11, r8
 846:	01 c0       	rjmp	.+2      	; 0x84a <vfprintf+0x2d6>
 848:	b9 2c       	mov	r11, r9
 84a:	a4 fe       	sbrs	r10, 4
 84c:	0f c0       	rjmp	.+30     	; 0x86c <vfprintf+0x2f8>
 84e:	fe 01       	movw	r30, r28
 850:	e8 0d       	add	r30, r8
 852:	f1 1d       	adc	r31, r1
 854:	80 81       	ld	r24, Z
 856:	80 33       	cpi	r24, 0x30	; 48
 858:	21 f4       	brne	.+8      	; 0x862 <vfprintf+0x2ee>
 85a:	9a 2d       	mov	r25, r10
 85c:	99 7e       	andi	r25, 0xE9	; 233
 85e:	a9 2e       	mov	r10, r25
 860:	09 c0       	rjmp	.+18     	; 0x874 <vfprintf+0x300>
 862:	a2 fe       	sbrs	r10, 2
 864:	06 c0       	rjmp	.+12     	; 0x872 <vfprintf+0x2fe>
 866:	b3 94       	inc	r11
 868:	b3 94       	inc	r11
 86a:	04 c0       	rjmp	.+8      	; 0x874 <vfprintf+0x300>
 86c:	8a 2d       	mov	r24, r10
 86e:	86 78       	andi	r24, 0x86	; 134
 870:	09 f0       	breq	.+2      	; 0x874 <vfprintf+0x300>
 872:	b3 94       	inc	r11
 874:	a3 fc       	sbrc	r10, 3
 876:	11 c0       	rjmp	.+34     	; 0x89a <vfprintf+0x326>
 878:	a0 fe       	sbrs	r10, 0
 87a:	06 c0       	rjmp	.+12     	; 0x888 <vfprintf+0x314>
 87c:	b2 14       	cp	r11, r2
 87e:	88 f4       	brcc	.+34     	; 0x8a2 <vfprintf+0x32e>
 880:	28 0c       	add	r2, r8
 882:	92 2c       	mov	r9, r2
 884:	9b 18       	sub	r9, r11
 886:	0e c0       	rjmp	.+28     	; 0x8a4 <vfprintf+0x330>
 888:	b2 14       	cp	r11, r2
 88a:	60 f4       	brcc	.+24     	; 0x8a4 <vfprintf+0x330>
 88c:	b6 01       	movw	r22, r12
 88e:	80 e2       	ldi	r24, 0x20	; 32
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	0e 94 f5 05 	call	0xbea	; 0xbea <fputc>
 896:	b3 94       	inc	r11
 898:	f7 cf       	rjmp	.-18     	; 0x888 <vfprintf+0x314>
 89a:	b2 14       	cp	r11, r2
 89c:	18 f4       	brcc	.+6      	; 0x8a4 <vfprintf+0x330>
 89e:	2b 18       	sub	r2, r11
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <vfprintf+0x332>
 8a2:	98 2c       	mov	r9, r8
 8a4:	21 2c       	mov	r2, r1
 8a6:	a4 fe       	sbrs	r10, 4
 8a8:	10 c0       	rjmp	.+32     	; 0x8ca <vfprintf+0x356>
 8aa:	b6 01       	movw	r22, r12
 8ac:	80 e3       	ldi	r24, 0x30	; 48
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	0e 94 f5 05 	call	0xbea	; 0xbea <fputc>
 8b4:	a2 fe       	sbrs	r10, 2
 8b6:	17 c0       	rjmp	.+46     	; 0x8e6 <vfprintf+0x372>
 8b8:	a1 fc       	sbrc	r10, 1
 8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <vfprintf+0x34e>
 8bc:	88 e7       	ldi	r24, 0x78	; 120
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <vfprintf+0x352>
 8c2:	88 e5       	ldi	r24, 0x58	; 88
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	b6 01       	movw	r22, r12
 8c8:	0c c0       	rjmp	.+24     	; 0x8e2 <vfprintf+0x36e>
 8ca:	8a 2d       	mov	r24, r10
 8cc:	86 78       	andi	r24, 0x86	; 134
 8ce:	59 f0       	breq	.+22     	; 0x8e6 <vfprintf+0x372>
 8d0:	a1 fe       	sbrs	r10, 1
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <vfprintf+0x364>
 8d4:	8b e2       	ldi	r24, 0x2B	; 43
 8d6:	01 c0       	rjmp	.+2      	; 0x8da <vfprintf+0x366>
 8d8:	80 e2       	ldi	r24, 0x20	; 32
 8da:	a7 fc       	sbrc	r10, 7
 8dc:	8d e2       	ldi	r24, 0x2D	; 45
 8de:	b6 01       	movw	r22, r12
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	0e 94 f5 05 	call	0xbea	; 0xbea <fputc>
 8e6:	89 14       	cp	r8, r9
 8e8:	38 f4       	brcc	.+14     	; 0x8f8 <vfprintf+0x384>
 8ea:	b6 01       	movw	r22, r12
 8ec:	80 e3       	ldi	r24, 0x30	; 48
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 f5 05 	call	0xbea	; 0xbea <fputc>
 8f4:	9a 94       	dec	r9
 8f6:	f7 cf       	rjmp	.-18     	; 0x8e6 <vfprintf+0x372>
 8f8:	8a 94       	dec	r8
 8fa:	f3 01       	movw	r30, r6
 8fc:	e8 0d       	add	r30, r8
 8fe:	f1 1d       	adc	r31, r1
 900:	80 81       	ld	r24, Z
 902:	b6 01       	movw	r22, r12
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 f5 05 	call	0xbea	; 0xbea <fputc>
 90a:	81 10       	cpse	r8, r1
 90c:	f5 cf       	rjmp	.-22     	; 0x8f8 <vfprintf+0x384>
 90e:	22 20       	and	r2, r2
 910:	09 f4       	brne	.+2      	; 0x914 <vfprintf+0x3a0>
 912:	42 ce       	rjmp	.-892    	; 0x598 <vfprintf+0x24>
 914:	b6 01       	movw	r22, r12
 916:	80 e2       	ldi	r24, 0x20	; 32
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 f5 05 	call	0xbea	; 0xbea <fputc>
 91e:	2a 94       	dec	r2
 920:	f6 cf       	rjmp	.-20     	; 0x90e <vfprintf+0x39a>
 922:	f6 01       	movw	r30, r12
 924:	86 81       	ldd	r24, Z+6	; 0x06
 926:	97 81       	ldd	r25, Z+7	; 0x07
 928:	02 c0       	rjmp	.+4      	; 0x92e <vfprintf+0x3ba>
 92a:	8f ef       	ldi	r24, 0xFF	; 255
 92c:	9f ef       	ldi	r25, 0xFF	; 255
 92e:	2b 96       	adiw	r28, 0x0b	; 11
 930:	e2 e1       	ldi	r30, 0x12	; 18
 932:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__epilogue_restores__>

00000936 <calloc>:
 936:	0f 93       	push	r16
 938:	1f 93       	push	r17
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	86 9f       	mul	r24, r22
 940:	80 01       	movw	r16, r0
 942:	87 9f       	mul	r24, r23
 944:	10 0d       	add	r17, r0
 946:	96 9f       	mul	r25, r22
 948:	10 0d       	add	r17, r0
 94a:	11 24       	eor	r1, r1
 94c:	c8 01       	movw	r24, r16
 94e:	0e 94 b7 04 	call	0x96e	; 0x96e <malloc>
 952:	ec 01       	movw	r28, r24
 954:	00 97       	sbiw	r24, 0x00	; 0
 956:	29 f0       	breq	.+10     	; 0x962 <calloc+0x2c>
 958:	a8 01       	movw	r20, r16
 95a:	60 e0       	ldi	r22, 0x00	; 0
 95c:	70 e0       	ldi	r23, 0x00	; 0
 95e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <memset>
 962:	ce 01       	movw	r24, r28
 964:	df 91       	pop	r29
 966:	cf 91       	pop	r28
 968:	1f 91       	pop	r17
 96a:	0f 91       	pop	r16
 96c:	08 95       	ret

0000096e <malloc>:
 96e:	0f 93       	push	r16
 970:	1f 93       	push	r17
 972:	cf 93       	push	r28
 974:	df 93       	push	r29
 976:	82 30       	cpi	r24, 0x02	; 2
 978:	91 05       	cpc	r25, r1
 97a:	10 f4       	brcc	.+4      	; 0x980 <malloc+0x12>
 97c:	82 e0       	ldi	r24, 0x02	; 2
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <__flp>
 984:	f0 91 88 01 	lds	r31, 0x0188	; 0x800188 <__flp+0x1>
 988:	20 e0       	ldi	r18, 0x00	; 0
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	a0 e0       	ldi	r26, 0x00	; 0
 98e:	b0 e0       	ldi	r27, 0x00	; 0
 990:	30 97       	sbiw	r30, 0x00	; 0
 992:	19 f1       	breq	.+70     	; 0x9da <malloc+0x6c>
 994:	40 81       	ld	r20, Z
 996:	51 81       	ldd	r21, Z+1	; 0x01
 998:	02 81       	ldd	r16, Z+2	; 0x02
 99a:	13 81       	ldd	r17, Z+3	; 0x03
 99c:	48 17       	cp	r20, r24
 99e:	59 07       	cpc	r21, r25
 9a0:	c8 f0       	brcs	.+50     	; 0x9d4 <malloc+0x66>
 9a2:	84 17       	cp	r24, r20
 9a4:	95 07       	cpc	r25, r21
 9a6:	69 f4       	brne	.+26     	; 0x9c2 <malloc+0x54>
 9a8:	10 97       	sbiw	r26, 0x00	; 0
 9aa:	31 f0       	breq	.+12     	; 0x9b8 <malloc+0x4a>
 9ac:	12 96       	adiw	r26, 0x02	; 2
 9ae:	0c 93       	st	X, r16
 9b0:	12 97       	sbiw	r26, 0x02	; 2
 9b2:	13 96       	adiw	r26, 0x03	; 3
 9b4:	1c 93       	st	X, r17
 9b6:	27 c0       	rjmp	.+78     	; 0xa06 <malloc+0x98>
 9b8:	00 93 87 01 	sts	0x0187, r16	; 0x800187 <__flp>
 9bc:	10 93 88 01 	sts	0x0188, r17	; 0x800188 <__flp+0x1>
 9c0:	22 c0       	rjmp	.+68     	; 0xa06 <malloc+0x98>
 9c2:	21 15       	cp	r18, r1
 9c4:	31 05       	cpc	r19, r1
 9c6:	19 f0       	breq	.+6      	; 0x9ce <malloc+0x60>
 9c8:	42 17       	cp	r20, r18
 9ca:	53 07       	cpc	r21, r19
 9cc:	18 f4       	brcc	.+6      	; 0x9d4 <malloc+0x66>
 9ce:	9a 01       	movw	r18, r20
 9d0:	bd 01       	movw	r22, r26
 9d2:	ef 01       	movw	r28, r30
 9d4:	df 01       	movw	r26, r30
 9d6:	f8 01       	movw	r30, r16
 9d8:	db cf       	rjmp	.-74     	; 0x990 <malloc+0x22>
 9da:	21 15       	cp	r18, r1
 9dc:	31 05       	cpc	r19, r1
 9de:	f9 f0       	breq	.+62     	; 0xa1e <malloc+0xb0>
 9e0:	28 1b       	sub	r18, r24
 9e2:	39 0b       	sbc	r19, r25
 9e4:	24 30       	cpi	r18, 0x04	; 4
 9e6:	31 05       	cpc	r19, r1
 9e8:	80 f4       	brcc	.+32     	; 0xa0a <malloc+0x9c>
 9ea:	8a 81       	ldd	r24, Y+2	; 0x02
 9ec:	9b 81       	ldd	r25, Y+3	; 0x03
 9ee:	61 15       	cp	r22, r1
 9f0:	71 05       	cpc	r23, r1
 9f2:	21 f0       	breq	.+8      	; 0x9fc <malloc+0x8e>
 9f4:	fb 01       	movw	r30, r22
 9f6:	93 83       	std	Z+3, r25	; 0x03
 9f8:	82 83       	std	Z+2, r24	; 0x02
 9fa:	04 c0       	rjmp	.+8      	; 0xa04 <malloc+0x96>
 9fc:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <__flp+0x1>
 a00:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <__flp>
 a04:	fe 01       	movw	r30, r28
 a06:	32 96       	adiw	r30, 0x02	; 2
 a08:	44 c0       	rjmp	.+136    	; 0xa92 <malloc+0x124>
 a0a:	fe 01       	movw	r30, r28
 a0c:	e2 0f       	add	r30, r18
 a0e:	f3 1f       	adc	r31, r19
 a10:	81 93       	st	Z+, r24
 a12:	91 93       	st	Z+, r25
 a14:	22 50       	subi	r18, 0x02	; 2
 a16:	31 09       	sbc	r19, r1
 a18:	39 83       	std	Y+1, r19	; 0x01
 a1a:	28 83       	st	Y, r18
 a1c:	3a c0       	rjmp	.+116    	; 0xa92 <malloc+0x124>
 a1e:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <__brkval>
 a22:	30 91 86 01 	lds	r19, 0x0186	; 0x800186 <__brkval+0x1>
 a26:	23 2b       	or	r18, r19
 a28:	41 f4       	brne	.+16     	; 0xa3a <malloc+0xcc>
 a2a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 a2e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 a32:	30 93 86 01 	sts	0x0186, r19	; 0x800186 <__brkval+0x1>
 a36:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <__brkval>
 a3a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 a3e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 a42:	21 15       	cp	r18, r1
 a44:	31 05       	cpc	r19, r1
 a46:	41 f4       	brne	.+16     	; 0xa58 <malloc+0xea>
 a48:	2d b7       	in	r18, 0x3d	; 61
 a4a:	3e b7       	in	r19, 0x3e	; 62
 a4c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 a50:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 a54:	24 1b       	sub	r18, r20
 a56:	35 0b       	sbc	r19, r21
 a58:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <__brkval>
 a5c:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <__brkval+0x1>
 a60:	e2 17       	cp	r30, r18
 a62:	f3 07       	cpc	r31, r19
 a64:	a0 f4       	brcc	.+40     	; 0xa8e <malloc+0x120>
 a66:	2e 1b       	sub	r18, r30
 a68:	3f 0b       	sbc	r19, r31
 a6a:	28 17       	cp	r18, r24
 a6c:	39 07       	cpc	r19, r25
 a6e:	78 f0       	brcs	.+30     	; 0xa8e <malloc+0x120>
 a70:	ac 01       	movw	r20, r24
 a72:	4e 5f       	subi	r20, 0xFE	; 254
 a74:	5f 4f       	sbci	r21, 0xFF	; 255
 a76:	24 17       	cp	r18, r20
 a78:	35 07       	cpc	r19, r21
 a7a:	48 f0       	brcs	.+18     	; 0xa8e <malloc+0x120>
 a7c:	4e 0f       	add	r20, r30
 a7e:	5f 1f       	adc	r21, r31
 a80:	50 93 86 01 	sts	0x0186, r21	; 0x800186 <__brkval+0x1>
 a84:	40 93 85 01 	sts	0x0185, r20	; 0x800185 <__brkval>
 a88:	81 93       	st	Z+, r24
 a8a:	91 93       	st	Z+, r25
 a8c:	02 c0       	rjmp	.+4      	; 0xa92 <malloc+0x124>
 a8e:	e0 e0       	ldi	r30, 0x00	; 0
 a90:	f0 e0       	ldi	r31, 0x00	; 0
 a92:	cf 01       	movw	r24, r30
 a94:	df 91       	pop	r29
 a96:	cf 91       	pop	r28
 a98:	1f 91       	pop	r17
 a9a:	0f 91       	pop	r16
 a9c:	08 95       	ret

00000a9e <free>:
 a9e:	cf 93       	push	r28
 aa0:	df 93       	push	r29
 aa2:	00 97       	sbiw	r24, 0x00	; 0
 aa4:	09 f4       	brne	.+2      	; 0xaa8 <free+0xa>
 aa6:	81 c0       	rjmp	.+258    	; 0xbaa <free+0x10c>
 aa8:	fc 01       	movw	r30, r24
 aaa:	32 97       	sbiw	r30, 0x02	; 2
 aac:	13 82       	std	Z+3, r1	; 0x03
 aae:	12 82       	std	Z+2, r1	; 0x02
 ab0:	a0 91 87 01 	lds	r26, 0x0187	; 0x800187 <__flp>
 ab4:	b0 91 88 01 	lds	r27, 0x0188	; 0x800188 <__flp+0x1>
 ab8:	10 97       	sbiw	r26, 0x00	; 0
 aba:	81 f4       	brne	.+32     	; 0xadc <free+0x3e>
 abc:	20 81       	ld	r18, Z
 abe:	31 81       	ldd	r19, Z+1	; 0x01
 ac0:	82 0f       	add	r24, r18
 ac2:	93 1f       	adc	r25, r19
 ac4:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <__brkval>
 ac8:	30 91 86 01 	lds	r19, 0x0186	; 0x800186 <__brkval+0x1>
 acc:	28 17       	cp	r18, r24
 ace:	39 07       	cpc	r19, r25
 ad0:	51 f5       	brne	.+84     	; 0xb26 <free+0x88>
 ad2:	f0 93 86 01 	sts	0x0186, r31	; 0x800186 <__brkval+0x1>
 ad6:	e0 93 85 01 	sts	0x0185, r30	; 0x800185 <__brkval>
 ada:	67 c0       	rjmp	.+206    	; 0xbaa <free+0x10c>
 adc:	ed 01       	movw	r28, r26
 ade:	20 e0       	ldi	r18, 0x00	; 0
 ae0:	30 e0       	ldi	r19, 0x00	; 0
 ae2:	ce 17       	cp	r28, r30
 ae4:	df 07       	cpc	r29, r31
 ae6:	40 f4       	brcc	.+16     	; 0xaf8 <free+0x5a>
 ae8:	4a 81       	ldd	r20, Y+2	; 0x02
 aea:	5b 81       	ldd	r21, Y+3	; 0x03
 aec:	9e 01       	movw	r18, r28
 aee:	41 15       	cp	r20, r1
 af0:	51 05       	cpc	r21, r1
 af2:	f1 f0       	breq	.+60     	; 0xb30 <free+0x92>
 af4:	ea 01       	movw	r28, r20
 af6:	f5 cf       	rjmp	.-22     	; 0xae2 <free+0x44>
 af8:	d3 83       	std	Z+3, r29	; 0x03
 afa:	c2 83       	std	Z+2, r28	; 0x02
 afc:	40 81       	ld	r20, Z
 afe:	51 81       	ldd	r21, Z+1	; 0x01
 b00:	84 0f       	add	r24, r20
 b02:	95 1f       	adc	r25, r21
 b04:	c8 17       	cp	r28, r24
 b06:	d9 07       	cpc	r29, r25
 b08:	59 f4       	brne	.+22     	; 0xb20 <free+0x82>
 b0a:	88 81       	ld	r24, Y
 b0c:	99 81       	ldd	r25, Y+1	; 0x01
 b0e:	84 0f       	add	r24, r20
 b10:	95 1f       	adc	r25, r21
 b12:	02 96       	adiw	r24, 0x02	; 2
 b14:	91 83       	std	Z+1, r25	; 0x01
 b16:	80 83       	st	Z, r24
 b18:	8a 81       	ldd	r24, Y+2	; 0x02
 b1a:	9b 81       	ldd	r25, Y+3	; 0x03
 b1c:	93 83       	std	Z+3, r25	; 0x03
 b1e:	82 83       	std	Z+2, r24	; 0x02
 b20:	21 15       	cp	r18, r1
 b22:	31 05       	cpc	r19, r1
 b24:	29 f4       	brne	.+10     	; 0xb30 <free+0x92>
 b26:	f0 93 88 01 	sts	0x0188, r31	; 0x800188 <__flp+0x1>
 b2a:	e0 93 87 01 	sts	0x0187, r30	; 0x800187 <__flp>
 b2e:	3d c0       	rjmp	.+122    	; 0xbaa <free+0x10c>
 b30:	e9 01       	movw	r28, r18
 b32:	fb 83       	std	Y+3, r31	; 0x03
 b34:	ea 83       	std	Y+2, r30	; 0x02
 b36:	49 91       	ld	r20, Y+
 b38:	59 91       	ld	r21, Y+
 b3a:	c4 0f       	add	r28, r20
 b3c:	d5 1f       	adc	r29, r21
 b3e:	ec 17       	cp	r30, r28
 b40:	fd 07       	cpc	r31, r29
 b42:	61 f4       	brne	.+24     	; 0xb5c <free+0xbe>
 b44:	80 81       	ld	r24, Z
 b46:	91 81       	ldd	r25, Z+1	; 0x01
 b48:	84 0f       	add	r24, r20
 b4a:	95 1f       	adc	r25, r21
 b4c:	02 96       	adiw	r24, 0x02	; 2
 b4e:	e9 01       	movw	r28, r18
 b50:	99 83       	std	Y+1, r25	; 0x01
 b52:	88 83       	st	Y, r24
 b54:	82 81       	ldd	r24, Z+2	; 0x02
 b56:	93 81       	ldd	r25, Z+3	; 0x03
 b58:	9b 83       	std	Y+3, r25	; 0x03
 b5a:	8a 83       	std	Y+2, r24	; 0x02
 b5c:	e0 e0       	ldi	r30, 0x00	; 0
 b5e:	f0 e0       	ldi	r31, 0x00	; 0
 b60:	12 96       	adiw	r26, 0x02	; 2
 b62:	8d 91       	ld	r24, X+
 b64:	9c 91       	ld	r25, X
 b66:	13 97       	sbiw	r26, 0x03	; 3
 b68:	00 97       	sbiw	r24, 0x00	; 0
 b6a:	19 f0       	breq	.+6      	; 0xb72 <free+0xd4>
 b6c:	fd 01       	movw	r30, r26
 b6e:	dc 01       	movw	r26, r24
 b70:	f7 cf       	rjmp	.-18     	; 0xb60 <free+0xc2>
 b72:	8d 91       	ld	r24, X+
 b74:	9c 91       	ld	r25, X
 b76:	11 97       	sbiw	r26, 0x01	; 1
 b78:	9d 01       	movw	r18, r26
 b7a:	2e 5f       	subi	r18, 0xFE	; 254
 b7c:	3f 4f       	sbci	r19, 0xFF	; 255
 b7e:	82 0f       	add	r24, r18
 b80:	93 1f       	adc	r25, r19
 b82:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <__brkval>
 b86:	30 91 86 01 	lds	r19, 0x0186	; 0x800186 <__brkval+0x1>
 b8a:	28 17       	cp	r18, r24
 b8c:	39 07       	cpc	r19, r25
 b8e:	69 f4       	brne	.+26     	; 0xbaa <free+0x10c>
 b90:	30 97       	sbiw	r30, 0x00	; 0
 b92:	29 f4       	brne	.+10     	; 0xb9e <free+0x100>
 b94:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <__flp+0x1>
 b98:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <__flp>
 b9c:	02 c0       	rjmp	.+4      	; 0xba2 <free+0x104>
 b9e:	13 82       	std	Z+3, r1	; 0x03
 ba0:	12 82       	std	Z+2, r1	; 0x02
 ba2:	b0 93 86 01 	sts	0x0186, r27	; 0x800186 <__brkval+0x1>
 ba6:	a0 93 85 01 	sts	0x0185, r26	; 0x800185 <__brkval>
 baa:	df 91       	pop	r29
 bac:	cf 91       	pop	r28
 bae:	08 95       	ret

00000bb0 <strnlen_P>:
 bb0:	fc 01       	movw	r30, r24
 bb2:	05 90       	lpm	r0, Z+
 bb4:	61 50       	subi	r22, 0x01	; 1
 bb6:	70 40       	sbci	r23, 0x00	; 0
 bb8:	01 10       	cpse	r0, r1
 bba:	d8 f7       	brcc	.-10     	; 0xbb2 <strnlen_P+0x2>
 bbc:	80 95       	com	r24
 bbe:	90 95       	com	r25
 bc0:	8e 0f       	add	r24, r30
 bc2:	9f 1f       	adc	r25, r31
 bc4:	08 95       	ret

00000bc6 <memset>:
 bc6:	dc 01       	movw	r26, r24
 bc8:	01 c0       	rjmp	.+2      	; 0xbcc <memset+0x6>
 bca:	6d 93       	st	X+, r22
 bcc:	41 50       	subi	r20, 0x01	; 1
 bce:	50 40       	sbci	r21, 0x00	; 0
 bd0:	e0 f7       	brcc	.-8      	; 0xbca <memset+0x4>
 bd2:	08 95       	ret

00000bd4 <strnlen>:
 bd4:	fc 01       	movw	r30, r24
 bd6:	61 50       	subi	r22, 0x01	; 1
 bd8:	70 40       	sbci	r23, 0x00	; 0
 bda:	01 90       	ld	r0, Z+
 bdc:	01 10       	cpse	r0, r1
 bde:	d8 f7       	brcc	.-10     	; 0xbd6 <strnlen+0x2>
 be0:	80 95       	com	r24
 be2:	90 95       	com	r25
 be4:	8e 0f       	add	r24, r30
 be6:	9f 1f       	adc	r25, r31
 be8:	08 95       	ret

00000bea <fputc>:
 bea:	0f 93       	push	r16
 bec:	1f 93       	push	r17
 bee:	cf 93       	push	r28
 bf0:	df 93       	push	r29
 bf2:	fb 01       	movw	r30, r22
 bf4:	23 81       	ldd	r18, Z+3	; 0x03
 bf6:	21 fd       	sbrc	r18, 1
 bf8:	03 c0       	rjmp	.+6      	; 0xc00 <fputc+0x16>
 bfa:	8f ef       	ldi	r24, 0xFF	; 255
 bfc:	9f ef       	ldi	r25, 0xFF	; 255
 bfe:	2c c0       	rjmp	.+88     	; 0xc58 <fputc+0x6e>
 c00:	22 ff       	sbrs	r18, 2
 c02:	16 c0       	rjmp	.+44     	; 0xc30 <fputc+0x46>
 c04:	46 81       	ldd	r20, Z+6	; 0x06
 c06:	57 81       	ldd	r21, Z+7	; 0x07
 c08:	24 81       	ldd	r18, Z+4	; 0x04
 c0a:	35 81       	ldd	r19, Z+5	; 0x05
 c0c:	42 17       	cp	r20, r18
 c0e:	53 07       	cpc	r21, r19
 c10:	44 f4       	brge	.+16     	; 0xc22 <fputc+0x38>
 c12:	a0 81       	ld	r26, Z
 c14:	b1 81       	ldd	r27, Z+1	; 0x01
 c16:	9d 01       	movw	r18, r26
 c18:	2f 5f       	subi	r18, 0xFF	; 255
 c1a:	3f 4f       	sbci	r19, 0xFF	; 255
 c1c:	31 83       	std	Z+1, r19	; 0x01
 c1e:	20 83       	st	Z, r18
 c20:	8c 93       	st	X, r24
 c22:	26 81       	ldd	r18, Z+6	; 0x06
 c24:	37 81       	ldd	r19, Z+7	; 0x07
 c26:	2f 5f       	subi	r18, 0xFF	; 255
 c28:	3f 4f       	sbci	r19, 0xFF	; 255
 c2a:	37 83       	std	Z+7, r19	; 0x07
 c2c:	26 83       	std	Z+6, r18	; 0x06
 c2e:	14 c0       	rjmp	.+40     	; 0xc58 <fputc+0x6e>
 c30:	8b 01       	movw	r16, r22
 c32:	ec 01       	movw	r28, r24
 c34:	fb 01       	movw	r30, r22
 c36:	00 84       	ldd	r0, Z+8	; 0x08
 c38:	f1 85       	ldd	r31, Z+9	; 0x09
 c3a:	e0 2d       	mov	r30, r0
 c3c:	09 95       	icall
 c3e:	89 2b       	or	r24, r25
 c40:	e1 f6       	brne	.-72     	; 0xbfa <fputc+0x10>
 c42:	d8 01       	movw	r26, r16
 c44:	16 96       	adiw	r26, 0x06	; 6
 c46:	8d 91       	ld	r24, X+
 c48:	9c 91       	ld	r25, X
 c4a:	17 97       	sbiw	r26, 0x07	; 7
 c4c:	01 96       	adiw	r24, 0x01	; 1
 c4e:	17 96       	adiw	r26, 0x07	; 7
 c50:	9c 93       	st	X, r25
 c52:	8e 93       	st	-X, r24
 c54:	16 97       	sbiw	r26, 0x06	; 6
 c56:	ce 01       	movw	r24, r28
 c58:	df 91       	pop	r29
 c5a:	cf 91       	pop	r28
 c5c:	1f 91       	pop	r17
 c5e:	0f 91       	pop	r16
 c60:	08 95       	ret

00000c62 <__ultoa_invert>:
 c62:	fa 01       	movw	r30, r20
 c64:	aa 27       	eor	r26, r26
 c66:	28 30       	cpi	r18, 0x08	; 8
 c68:	51 f1       	breq	.+84     	; 0xcbe <__ultoa_invert+0x5c>
 c6a:	20 31       	cpi	r18, 0x10	; 16
 c6c:	81 f1       	breq	.+96     	; 0xcce <__ultoa_invert+0x6c>
 c6e:	e8 94       	clt
 c70:	6f 93       	push	r22
 c72:	6e 7f       	andi	r22, 0xFE	; 254
 c74:	6e 5f       	subi	r22, 0xFE	; 254
 c76:	7f 4f       	sbci	r23, 0xFF	; 255
 c78:	8f 4f       	sbci	r24, 0xFF	; 255
 c7a:	9f 4f       	sbci	r25, 0xFF	; 255
 c7c:	af 4f       	sbci	r26, 0xFF	; 255
 c7e:	b1 e0       	ldi	r27, 0x01	; 1
 c80:	3e d0       	rcall	.+124    	; 0xcfe <__ultoa_invert+0x9c>
 c82:	b4 e0       	ldi	r27, 0x04	; 4
 c84:	3c d0       	rcall	.+120    	; 0xcfe <__ultoa_invert+0x9c>
 c86:	67 0f       	add	r22, r23
 c88:	78 1f       	adc	r23, r24
 c8a:	89 1f       	adc	r24, r25
 c8c:	9a 1f       	adc	r25, r26
 c8e:	a1 1d       	adc	r26, r1
 c90:	68 0f       	add	r22, r24
 c92:	79 1f       	adc	r23, r25
 c94:	8a 1f       	adc	r24, r26
 c96:	91 1d       	adc	r25, r1
 c98:	a1 1d       	adc	r26, r1
 c9a:	6a 0f       	add	r22, r26
 c9c:	71 1d       	adc	r23, r1
 c9e:	81 1d       	adc	r24, r1
 ca0:	91 1d       	adc	r25, r1
 ca2:	a1 1d       	adc	r26, r1
 ca4:	20 d0       	rcall	.+64     	; 0xce6 <__ultoa_invert+0x84>
 ca6:	09 f4       	brne	.+2      	; 0xcaa <__ultoa_invert+0x48>
 ca8:	68 94       	set
 caa:	3f 91       	pop	r19
 cac:	2a e0       	ldi	r18, 0x0A	; 10
 cae:	26 9f       	mul	r18, r22
 cb0:	11 24       	eor	r1, r1
 cb2:	30 19       	sub	r19, r0
 cb4:	30 5d       	subi	r19, 0xD0	; 208
 cb6:	31 93       	st	Z+, r19
 cb8:	de f6       	brtc	.-74     	; 0xc70 <__ultoa_invert+0xe>
 cba:	cf 01       	movw	r24, r30
 cbc:	08 95       	ret
 cbe:	46 2f       	mov	r20, r22
 cc0:	47 70       	andi	r20, 0x07	; 7
 cc2:	40 5d       	subi	r20, 0xD0	; 208
 cc4:	41 93       	st	Z+, r20
 cc6:	b3 e0       	ldi	r27, 0x03	; 3
 cc8:	0f d0       	rcall	.+30     	; 0xce8 <__ultoa_invert+0x86>
 cca:	c9 f7       	brne	.-14     	; 0xcbe <__ultoa_invert+0x5c>
 ccc:	f6 cf       	rjmp	.-20     	; 0xcba <__ultoa_invert+0x58>
 cce:	46 2f       	mov	r20, r22
 cd0:	4f 70       	andi	r20, 0x0F	; 15
 cd2:	40 5d       	subi	r20, 0xD0	; 208
 cd4:	4a 33       	cpi	r20, 0x3A	; 58
 cd6:	18 f0       	brcs	.+6      	; 0xcde <__ultoa_invert+0x7c>
 cd8:	49 5d       	subi	r20, 0xD9	; 217
 cda:	31 fd       	sbrc	r19, 1
 cdc:	40 52       	subi	r20, 0x20	; 32
 cde:	41 93       	st	Z+, r20
 ce0:	02 d0       	rcall	.+4      	; 0xce6 <__ultoa_invert+0x84>
 ce2:	a9 f7       	brne	.-22     	; 0xcce <__ultoa_invert+0x6c>
 ce4:	ea cf       	rjmp	.-44     	; 0xcba <__ultoa_invert+0x58>
 ce6:	b4 e0       	ldi	r27, 0x04	; 4
 ce8:	a6 95       	lsr	r26
 cea:	97 95       	ror	r25
 cec:	87 95       	ror	r24
 cee:	77 95       	ror	r23
 cf0:	67 95       	ror	r22
 cf2:	ba 95       	dec	r27
 cf4:	c9 f7       	brne	.-14     	; 0xce8 <__ultoa_invert+0x86>
 cf6:	00 97       	sbiw	r24, 0x00	; 0
 cf8:	61 05       	cpc	r22, r1
 cfa:	71 05       	cpc	r23, r1
 cfc:	08 95       	ret
 cfe:	9b 01       	movw	r18, r22
 d00:	ac 01       	movw	r20, r24
 d02:	0a 2e       	mov	r0, r26
 d04:	06 94       	lsr	r0
 d06:	57 95       	ror	r21
 d08:	47 95       	ror	r20
 d0a:	37 95       	ror	r19
 d0c:	27 95       	ror	r18
 d0e:	ba 95       	dec	r27
 d10:	c9 f7       	brne	.-14     	; 0xd04 <__ultoa_invert+0xa2>
 d12:	62 0f       	add	r22, r18
 d14:	73 1f       	adc	r23, r19
 d16:	84 1f       	adc	r24, r20
 d18:	95 1f       	adc	r25, r21
 d1a:	a0 1d       	adc	r26, r0
 d1c:	08 95       	ret

00000d1e <__prologue_saves__>:
 d1e:	2f 92       	push	r2
 d20:	3f 92       	push	r3
 d22:	4f 92       	push	r4
 d24:	5f 92       	push	r5
 d26:	6f 92       	push	r6
 d28:	7f 92       	push	r7
 d2a:	8f 92       	push	r8
 d2c:	9f 92       	push	r9
 d2e:	af 92       	push	r10
 d30:	bf 92       	push	r11
 d32:	cf 92       	push	r12
 d34:	df 92       	push	r13
 d36:	ef 92       	push	r14
 d38:	ff 92       	push	r15
 d3a:	0f 93       	push	r16
 d3c:	1f 93       	push	r17
 d3e:	cf 93       	push	r28
 d40:	df 93       	push	r29
 d42:	cd b7       	in	r28, 0x3d	; 61
 d44:	de b7       	in	r29, 0x3e	; 62
 d46:	ca 1b       	sub	r28, r26
 d48:	db 0b       	sbc	r29, r27
 d4a:	0f b6       	in	r0, 0x3f	; 63
 d4c:	f8 94       	cli
 d4e:	de bf       	out	0x3e, r29	; 62
 d50:	0f be       	out	0x3f, r0	; 63
 d52:	cd bf       	out	0x3d, r28	; 61
 d54:	09 94       	ijmp

00000d56 <__epilogue_restores__>:
 d56:	2a 88       	ldd	r2, Y+18	; 0x12
 d58:	39 88       	ldd	r3, Y+17	; 0x11
 d5a:	48 88       	ldd	r4, Y+16	; 0x10
 d5c:	5f 84       	ldd	r5, Y+15	; 0x0f
 d5e:	6e 84       	ldd	r6, Y+14	; 0x0e
 d60:	7d 84       	ldd	r7, Y+13	; 0x0d
 d62:	8c 84       	ldd	r8, Y+12	; 0x0c
 d64:	9b 84       	ldd	r9, Y+11	; 0x0b
 d66:	aa 84       	ldd	r10, Y+10	; 0x0a
 d68:	b9 84       	ldd	r11, Y+9	; 0x09
 d6a:	c8 84       	ldd	r12, Y+8	; 0x08
 d6c:	df 80       	ldd	r13, Y+7	; 0x07
 d6e:	ee 80       	ldd	r14, Y+6	; 0x06
 d70:	fd 80       	ldd	r15, Y+5	; 0x05
 d72:	0c 81       	ldd	r16, Y+4	; 0x04
 d74:	1b 81       	ldd	r17, Y+3	; 0x03
 d76:	aa 81       	ldd	r26, Y+2	; 0x02
 d78:	b9 81       	ldd	r27, Y+1	; 0x01
 d7a:	ce 0f       	add	r28, r30
 d7c:	d1 1d       	adc	r29, r1
 d7e:	0f b6       	in	r0, 0x3f	; 63
 d80:	f8 94       	cli
 d82:	de bf       	out	0x3e, r29	; 62
 d84:	0f be       	out	0x3f, r0	; 63
 d86:	cd bf       	out	0x3d, r28	; 61
 d88:	ed 01       	movw	r28, r26
 d8a:	08 95       	ret

00000d8c <_exit>:
 d8c:	f8 94       	cli

00000d8e <__stop_program>:
 d8e:	ff cf       	rjmp	.-2      	; 0xd8e <__stop_program>
