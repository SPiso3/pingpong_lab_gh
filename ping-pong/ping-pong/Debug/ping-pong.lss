
ping-pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013a  00800100  0000171a  000017ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000171a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080023a  0080023a  000018e8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001944  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000267f  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001327  00000000  00000000  00004277  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001478  00000000  00000000  0000559e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000644  00000000  00000000  00006a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b3  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012b2  00000000  00000000  0000790f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00008bc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__vector_19>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__vector_23>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <__vector_19+0x3e>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ea e1       	ldi	r30, 0x1A	; 26
     37c:	f7 e1       	ldi	r31, 0x17	; 23
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 33       	cpi	r26, 0x3A	; 58
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	aa e3       	ldi	r26, 0x3A	; 58
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ae 34       	cpi	r26, 0x4E	; 78
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 bc 05 	call	0xb78	; 0xb78 <main>
     39e:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_init>:
	uint8_t ret_val = 0;
	for(uint8_t i=0; (i<ADC_CHANNELS) && (i<=channel); i++){
		ret_val = adc[0x0000]; //discard first channel-1 values
	}
	return ret_val;	//return last one
}
     3a6:	87 b3       	in	r24, 0x17	; 23
     3a8:	81 60       	ori	r24, 0x01	; 1
     3aa:	87 bb       	out	0x17, r24	; 23
     3ac:	81 b3       	in	r24, 0x11	; 17
     3ae:	8f 7e       	andi	r24, 0xEF	; 239
     3b0:	81 bb       	out	0x11, r24	; 17
     3b2:	82 b3       	in	r24, 0x12	; 18
     3b4:	80 61       	ori	r24, 0x10	; 16
     3b6:	82 bb       	out	0x12, r24	; 18
     3b8:	08 95       	ret

000003ba <ADC_sample4>:
     3ba:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x11b2>
     3be:	08 95       	ret

000003c0 <ADC_is_busy>:
     3c0:	80 b3       	in	r24, 0x10	; 16
     3c2:	82 95       	swap	r24
     3c4:	81 70       	andi	r24, 0x01	; 1
     3c6:	08 95       	ret

000003c8 <ADC_read>:

uint8_t ADC_read(void){
	volatile char *adc = (char *) ADC_BASE_ADDR;
	while(!ADC_is_busy()); //wait till busy goes up
     3c8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <ADC_is_busy>
     3cc:	88 23       	and	r24, r24
     3ce:	e1 f3       	breq	.-8      	; 0x3c8 <ADC_read>
	return adc[0x0000];
     3d0:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x11b2>
     3d4:	08 95       	ret

000003d6 <CAN_init>:
#include "../include/CAN.h"


void CAN_init(){
	MCP_init(MODE_NORMAL);
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 a4 03 	call	0x748	; 0x748 <MCP_init>
	
	cli();
     3dc:	f8 94       	cli
	GICR |= (1 << INT0);					// Enable INT0
     3de:	8b b7       	in	r24, 0x3b	; 59
     3e0:	80 64       	ori	r24, 0x40	; 64
     3e2:	8b bf       	out	0x3b, r24	; 59
	MCUCR &= ~((1 << ISC01)|(0 << ISC00));	// mode:00 = trigger when LOW
     3e4:	85 b7       	in	r24, 0x35	; 53
     3e6:	8d 7f       	andi	r24, 0xFD	; 253
     3e8:	85 bf       	out	0x35, r24	; 53
	DDRD &= ~(1 << PD2);
     3ea:	81 b3       	in	r24, 0x11	; 17
     3ec:	8b 7f       	andi	r24, 0xFB	; 251
     3ee:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << PD2);
     3f0:	82 b3       	in	r24, 0x12	; 18
     3f2:	84 60       	ori	r24, 0x04	; 4
     3f4:	82 bb       	out	0x12, r24	; 18
	sei();
     3f6:	78 94       	sei
     3f8:	08 95       	ret

000003fa <CAN_send>:
}

void CAN_send(message_ptr msg){
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	8c 01       	movw	r16, r24
	//set ID 
	MCP_write(MCP_TXB0SIDH, msg->id >> 3);
     402:	fc 01       	movw	r30, r24
     404:	60 81       	ld	r22, Z
     406:	71 81       	ldd	r23, Z+1	; 0x01
     408:	76 95       	lsr	r23
     40a:	67 95       	ror	r22
     40c:	76 95       	lsr	r23
     40e:	67 95       	ror	r22
     410:	76 95       	lsr	r23
     412:	67 95       	ror	r22
     414:	81 e3       	ldi	r24, 0x31	; 49
     416:	0e 94 57 03 	call	0x6ae	; 0x6ae <MCP_write>
	MCP_write(MCP_TXB0SIDL, (msg->id % 8) << 5);
     41a:	f8 01       	movw	r30, r16
     41c:	60 81       	ld	r22, Z
     41e:	62 95       	swap	r22
     420:	66 0f       	add	r22, r22
     422:	60 7e       	andi	r22, 0xE0	; 224
     424:	82 e3       	ldi	r24, 0x32	; 50
     426:	0e 94 57 03 	call	0x6ae	; 0x6ae <MCP_write>
	
	//set length
	MCP_write(MCP_TXB0DLC, msg->length);
     42a:	f8 01       	movw	r30, r16
     42c:	62 81       	ldd	r22, Z+2	; 0x02
     42e:	85 e3       	ldi	r24, 0x35	; 53
     430:	0e 94 57 03 	call	0x6ae	; 0x6ae <MCP_write>
	
	//store data
	for(uint8_t i = 0; i < msg->length; i++){
     434:	c0 e0       	ldi	r28, 0x00	; 0
     436:	09 c0       	rjmp	.+18     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
		MCP_write(MCP_TXB0D0 + i,msg->unsigned_data[i]);
     438:	f8 01       	movw	r30, r16
     43a:	ec 0f       	add	r30, r28
     43c:	f1 1d       	adc	r31, r1
     43e:	63 81       	ldd	r22, Z+3	; 0x03
     440:	86 e3       	ldi	r24, 0x36	; 54
     442:	8c 0f       	add	r24, r28
     444:	0e 94 57 03 	call	0x6ae	; 0x6ae <MCP_write>
	
	//set length
	MCP_write(MCP_TXB0DLC, msg->length);
	
	//store data
	for(uint8_t i = 0; i < msg->length; i++){
     448:	cf 5f       	subi	r28, 0xFF	; 255
     44a:	f8 01       	movw	r30, r16
     44c:	82 81       	ldd	r24, Z+2	; 0x02
     44e:	c8 17       	cp	r28, r24
     450:	98 f3       	brcs	.-26     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
		MCP_write(MCP_TXB0D0 + i,msg->unsigned_data[i]);
	}
	
	//request to send
	MCP_request_to_send(0);
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <MCP_request_to_send>
}
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
     45c:	0f 91       	pop	r16
     45e:	08 95       	ret

00000460 <CAN_receive>:

message_t CAN_receive(){
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	8c 01       	movw	r16, r24
	message_t msg = {};
     46c:	8b e0       	ldi	r24, 0x0B	; 11
     46e:	f8 01       	movw	r30, r16
     470:	11 92       	st	Z+, r1
     472:	8a 95       	dec	r24
     474:	e9 f7       	brne	.-6      	; 0x470 <CAN_receive+0x10>
		
	//get ID
	uint8_t id_low = (MCP_read(MCP_RXB0SIDL)>>5);
     476:	82 e6       	ldi	r24, 0x62	; 98
     478:	0e 94 45 03 	call	0x68a	; 0x68a <MCP_read>
     47c:	c8 2f       	mov	r28, r24
     47e:	c2 95       	swap	r28
     480:	c6 95       	lsr	r28
     482:	c7 70       	andi	r28, 0x07	; 7
	uint8_t id_high = MCP_read(MCP_RXB0SIDH);
     484:	81 e6       	ldi	r24, 0x61	; 97
     486:	0e 94 45 03 	call	0x68a	; 0x68a <MCP_read>
	msg.id = (id_high << 3) | id_low;
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	88 0f       	add	r24, r24
     48e:	99 1f       	adc	r25, r25
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	88 0f       	add	r24, r24
     496:	99 1f       	adc	r25, r25
     498:	8c 2b       	or	r24, r28
     49a:	f8 01       	movw	r30, r16
     49c:	91 83       	std	Z+1, r25	; 0x01
     49e:	80 83       	st	Z, r24
	
	//get data length 
	msg.length = MCP_read(MCP_RXB0DLC);
     4a0:	85 e6       	ldi	r24, 0x65	; 101
     4a2:	0e 94 45 03 	call	0x68a	; 0x68a <MCP_read>
     4a6:	f8 2e       	mov	r15, r24
     4a8:	f8 01       	movw	r30, r16
     4aa:	82 83       	std	Z+2, r24	; 0x02
	
	//get data
	for (int i = 0; i < msg.length; i++) {
     4ac:	c0 e0       	ldi	r28, 0x00	; 0
     4ae:	d0 e0       	ldi	r29, 0x00	; 0
     4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <CAN_receive+0x64>
		msg.unsigned_data[i] = MCP_read(MCP_RXB0D0 + i);
     4b2:	8c 2f       	mov	r24, r28
     4b4:	8a 59       	subi	r24, 0x9A	; 154
     4b6:	0e 94 45 03 	call	0x68a	; 0x68a <MCP_read>
     4ba:	f8 01       	movw	r30, r16
     4bc:	ec 0f       	add	r30, r28
     4be:	fd 1f       	adc	r31, r29
     4c0:	83 83       	std	Z+3, r24	; 0x03
	
	//get data length 
	msg.length = MCP_read(MCP_RXB0DLC);
	
	//get data
	for (int i = 0; i < msg.length; i++) {
     4c2:	21 96       	adiw	r28, 0x01	; 1
     4c4:	8f 2d       	mov	r24, r15
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	c8 17       	cp	r28, r24
     4ca:	d9 07       	cpc	r29, r25
     4cc:	94 f3       	brlt	.-28     	; 0x4b2 <CAN_receive+0x52>
		msg.unsigned_data[i] = MCP_read(MCP_RXB0D0 + i);
	}
	
	return msg;
}
     4ce:	c8 01       	movw	r24, r16
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	ff 90       	pop	r15
     4da:	08 95       	ret

000004dc <JOY_calibrate>:
	}
	else if (abs(rel_pos.y) > abs(rel_pos.x)){
		return (rel_pos.y > 0) ? UP : DOWN;
	}
	return (rel_pos.x > 0) ? RIGHT : LEFT;
}
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	86 e0       	ldi	r24, 0x06	; 6
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	9f 93       	push	r25
     4ec:	8f 93       	push	r24
     4ee:	0e 94 c6 08 	call	0x118c	; 0x118c <printf>
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	c0 e0       	ldi	r28, 0x00	; 0
     4f8:	00 e0       	ldi	r16, 0x00	; 0
     4fa:	10 e0       	ldi	r17, 0x00	; 0
     4fc:	e1 2c       	mov	r14, r1
     4fe:	f1 2c       	mov	r15, r1
     500:	0b c0       	rjmp	.+22     	; 0x518 <__stack+0x19>
     502:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ADC_sample4>
     506:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     50a:	08 0f       	add	r16, r24
     50c:	11 1d       	adc	r17, r1
     50e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     512:	e8 0e       	add	r14, r24
     514:	f1 1c       	adc	r15, r1
     516:	cf 5f       	subi	r28, 0xFF	; 255
     518:	c8 30       	cpi	r28, 0x08	; 8
     51a:	98 f3       	brcs	.-26     	; 0x502 <__stack+0x3>
     51c:	16 95       	lsr	r17
     51e:	07 95       	ror	r16
     520:	16 95       	lsr	r17
     522:	07 95       	ror	r16
     524:	16 95       	lsr	r17
     526:	07 95       	ror	r16
     528:	f6 94       	lsr	r15
     52a:	e7 94       	ror	r14
     52c:	f6 94       	lsr	r15
     52e:	e7 94       	ror	r14
     530:	f6 94       	lsr	r15
     532:	e7 94       	ror	r14
     534:	1f 93       	push	r17
     536:	0f 93       	push	r16
     538:	ff 92       	push	r15
     53a:	ef 92       	push	r14
     53c:	80 e2       	ldi	r24, 0x20	; 32
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	9f 93       	push	r25
     542:	8f 93       	push	r24
     544:	0e 94 c6 08 	call	0x118c	; 0x118c <printf>
     548:	eb e3       	ldi	r30, 0x3B	; 59
     54a:	f2 e0       	ldi	r31, 0x02	; 2
     54c:	f1 82       	std	Z+1, r15	; 0x01
     54e:	e0 82       	st	Z, r14
     550:	13 83       	std	Z+3, r17	; 0x03
     552:	02 83       	std	Z+2, r16	; 0x02
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	08 95       	ret

0000056c <JOY_init>:
     56c:	81 b3       	in	r24, 0x11	; 17
     56e:	8f 7d       	andi	r24, 0xDF	; 223
     570:	81 bb       	out	0x11, r24	; 17
     572:	82 b3       	in	r24, 0x12	; 18
     574:	80 62       	ori	r24, 0x20	; 32
     576:	82 bb       	out	0x12, r24	; 18
     578:	0e 94 6e 02 	call	0x4dc	; 0x4dc <JOY_calibrate>
     57c:	08 95       	ret

0000057e <JOY_get_rel_pos>:
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ADC_sample4>
     58a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     58e:	08 2f       	mov	r16, r24
     590:	10 e0       	ldi	r17, 0x00	; 0
     592:	cb e3       	ldi	r28, 0x3B	; 59
     594:	d2 e0       	ldi	r29, 0x02	; 2
     596:	8a 81       	ldd	r24, Y+2	; 0x02
     598:	9b 81       	ldd	r25, Y+3	; 0x03
     59a:	08 1b       	sub	r16, r24
     59c:	19 0b       	sbc	r17, r25
     59e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     5a2:	28 2f       	mov	r18, r24
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	09 90       	ld	r0, Y+
     5a8:	d8 81       	ld	r29, Y
     5aa:	c0 2d       	mov	r28, r0
     5ac:	2c 1b       	sub	r18, r28
     5ae:	3d 0b       	sbc	r19, r29
     5b0:	c8 01       	movw	r24, r16
     5b2:	96 95       	lsr	r25
     5b4:	98 2f       	mov	r25, r24
     5b6:	88 27       	eor	r24, r24
     5b8:	97 95       	ror	r25
     5ba:	87 95       	ror	r24
     5bc:	80 1b       	sub	r24, r16
     5be:	91 0b       	sbc	r25, r17
     5c0:	10 16       	cp	r1, r16
     5c2:	11 06       	cpc	r1, r17
     5c4:	4c f4       	brge	.+18     	; 0x5d8 <JOY_get_rel_pos+0x5a>
     5c6:	40 91 3d 02 	lds	r20, 0x023D	; 0x80023d <gamepad_center+0x2>
     5ca:	50 91 3e 02 	lds	r21, 0x023E	; 0x80023e <gamepad_center+0x3>
     5ce:	6f ef       	ldi	r22, 0xFF	; 255
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	64 1b       	sub	r22, r20
     5d4:	75 0b       	sbc	r23, r21
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <JOY_get_rel_pos+0x62>
     5d8:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <gamepad_center+0x2>
     5dc:	70 91 3e 02 	lds	r23, 0x023E	; 0x80023e <gamepad_center+0x3>
     5e0:	0e 94 b0 06 	call	0xd60	; 0xd60 <__divmodhi4>
     5e4:	16 2f       	mov	r17, r22
     5e6:	47 2f       	mov	r20, r23
     5e8:	e6 2f       	mov	r30, r22
     5ea:	f7 2f       	mov	r31, r23
     5ec:	c9 01       	movw	r24, r18
     5ee:	96 95       	lsr	r25
     5f0:	98 2f       	mov	r25, r24
     5f2:	88 27       	eor	r24, r24
     5f4:	97 95       	ror	r25
     5f6:	87 95       	ror	r24
     5f8:	82 1b       	sub	r24, r18
     5fa:	93 0b       	sbc	r25, r19
     5fc:	12 16       	cp	r1, r18
     5fe:	13 06       	cpc	r1, r19
     600:	34 f4       	brge	.+12     	; 0x60e <JOY_get_rel_pos+0x90>
     602:	2f ef       	ldi	r18, 0xFF	; 255
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	b9 01       	movw	r22, r18
     608:	6c 1b       	sub	r22, r28
     60a:	7d 0b       	sbc	r23, r29
     60c:	eb 01       	movw	r28, r22
     60e:	be 01       	movw	r22, r28
     610:	0e 94 b0 06 	call	0xd60	; 0xd60 <__divmodhi4>
     614:	86 2f       	mov	r24, r22
     616:	97 2f       	mov	r25, r23
     618:	e2 38       	cpi	r30, 0x82	; 130
     61a:	ff 4f       	sbci	r31, 0xFF	; 255
     61c:	44 f0       	brlt	.+16     	; 0x62e <JOY_get_rel_pos+0xb0>
     61e:	21 2f       	mov	r18, r17
     620:	34 2f       	mov	r19, r20
     622:	20 38       	cpi	r18, 0x80	; 128
     624:	31 05       	cpc	r19, r1
     626:	2c f0       	brlt	.+10     	; 0x632 <JOY_get_rel_pos+0xb4>
     628:	2f e7       	ldi	r18, 0x7F	; 127
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	02 c0       	rjmp	.+4      	; 0x632 <JOY_get_rel_pos+0xb4>
     62e:	21 e8       	ldi	r18, 0x81	; 129
     630:	3f ef       	ldi	r19, 0xFF	; 255
     632:	82 38       	cpi	r24, 0x82	; 130
     634:	9f 4f       	sbci	r25, 0xFF	; 255
     636:	44 f0       	brlt	.+16     	; 0x648 <JOY_get_rel_pos+0xca>
     638:	46 2f       	mov	r20, r22
     63a:	57 2f       	mov	r21, r23
     63c:	40 38       	cpi	r20, 0x80	; 128
     63e:	51 05       	cpc	r21, r1
     640:	2c f0       	brlt	.+10     	; 0x64c <JOY_get_rel_pos+0xce>
     642:	4f e7       	ldi	r20, 0x7F	; 127
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	02 c0       	rjmp	.+4      	; 0x64c <JOY_get_rel_pos+0xce>
     648:	41 e8       	ldi	r20, 0x81	; 129
     64a:	5f ef       	ldi	r21, 0xFF	; 255
     64c:	ba 01       	movw	r22, r20
     64e:	c9 01       	movw	r24, r18
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	08 95       	ret

0000065a <JOY_get_sliders>:

sliders_t JOY_get_sliders(){
     65a:	cf 93       	push	r28
	ADC_sample4();
     65c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ADC_sample4>
	ADC_read(); ADC_read(); //trash the first two
     660:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     664:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
	
	uint8_t left = ADC_read();
     668:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     66c:	c8 2f       	mov	r28, r24
	uint8_t right = ADC_read();
     66e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     672:	98 2f       	mov	r25, r24
	return (sliders_t){left,right};
     674:	8c 2f       	mov	r24, r28
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <MCP_reset>:
	SPI_send(MCP_READ_STATUS);
	char data = SPI_receive();
	
	SPI_SS_high();
	return data;
}
     67a:	0e 94 3b 05 	call	0xa76	; 0xa76 <SPI_SS_low>
     67e:	80 ec       	ldi	r24, 0xC0	; 192
     680:	0e 94 22 05 	call	0xa44	; 0xa44 <SPI_send>
     684:	0e 94 2b 05 	call	0xa56	; 0xa56 <SPI_SS_high>
     688:	08 95       	ret

0000068a <MCP_read>:
     68a:	cf 93       	push	r28
     68c:	c8 2f       	mov	r28, r24
     68e:	0e 94 3b 05 	call	0xa76	; 0xa76 <SPI_SS_low>
     692:	83 e0       	ldi	r24, 0x03	; 3
     694:	0e 94 22 05 	call	0xa44	; 0xa44 <SPI_send>
     698:	8c 2f       	mov	r24, r28
     69a:	0e 94 22 05 	call	0xa44	; 0xa44 <SPI_send>
     69e:	0e 94 26 05 	call	0xa4c	; 0xa4c <SPI_receive>
     6a2:	c8 2f       	mov	r28, r24
     6a4:	0e 94 2b 05 	call	0xa56	; 0xa56 <SPI_SS_high>
     6a8:	8c 2f       	mov	r24, r28
     6aa:	cf 91       	pop	r28
     6ac:	08 95       	ret

000006ae <MCP_write>:
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	d8 2f       	mov	r29, r24
     6b4:	c6 2f       	mov	r28, r22
     6b6:	0e 94 3b 05 	call	0xa76	; 0xa76 <SPI_SS_low>
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	0e 94 22 05 	call	0xa44	; 0xa44 <SPI_send>
     6c0:	8d 2f       	mov	r24, r29
     6c2:	0e 94 22 05 	call	0xa44	; 0xa44 <SPI_send>
     6c6:	8c 2f       	mov	r24, r28
     6c8:	0e 94 22 05 	call	0xa44	; 0xa44 <SPI_send>
     6cc:	0e 94 2b 05 	call	0xa56	; 0xa56 <SPI_SS_high>
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <MCP_request_to_send>:
     6d6:	cf 93       	push	r28
     6d8:	c8 2f       	mov	r28, r24
     6da:	0e 94 3b 05 	call	0xa76	; 0xa76 <SPI_SS_low>
     6de:	8b ea       	ldi	r24, 0xAB	; 171
     6e0:	c8 9f       	mul	r28, r24
     6e2:	81 2d       	mov	r24, r1
     6e4:	11 24       	eor	r1, r1
     6e6:	86 95       	lsr	r24
     6e8:	98 2f       	mov	r25, r24
     6ea:	99 0f       	add	r25, r25
     6ec:	89 0f       	add	r24, r25
     6ee:	c8 1b       	sub	r28, r24
     6f0:	31 f0       	breq	.+12     	; 0x6fe <MCP_request_to_send+0x28>
     6f2:	c1 30       	cpi	r28, 0x01	; 1
     6f4:	31 f0       	breq	.+12     	; 0x702 <MCP_request_to_send+0x2c>
     6f6:	c2 30       	cpi	r28, 0x02	; 2
     6f8:	31 f0       	breq	.+12     	; 0x706 <MCP_request_to_send+0x30>
     6fa:	81 e8       	ldi	r24, 0x81	; 129
     6fc:	05 c0       	rjmp	.+10     	; 0x708 <MCP_request_to_send+0x32>
     6fe:	81 e8       	ldi	r24, 0x81	; 129
     700:	03 c0       	rjmp	.+6      	; 0x708 <MCP_request_to_send+0x32>
     702:	82 e8       	ldi	r24, 0x82	; 130
     704:	01 c0       	rjmp	.+2      	; 0x708 <MCP_request_to_send+0x32>
     706:	84 e8       	ldi	r24, 0x84	; 132
     708:	0e 94 22 05 	call	0xa44	; 0xa44 <SPI_send>
     70c:	0e 94 2b 05 	call	0xa56	; 0xa56 <SPI_SS_high>
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <MCP_bit_modify>:

void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data) {
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	18 2f       	mov	r17, r24
     71c:	d6 2f       	mov	r29, r22
     71e:	c4 2f       	mov	r28, r20
	SPI_SS_low();
     720:	0e 94 3b 05 	call	0xa76	; 0xa76 <SPI_SS_low>
	
	SPI_send(MCP_BITMOD);
     724:	85 e0       	ldi	r24, 0x05	; 5
     726:	0e 94 22 05 	call	0xa44	; 0xa44 <SPI_send>
	SPI_send(address);
     72a:	81 2f       	mov	r24, r17
     72c:	0e 94 22 05 	call	0xa44	; 0xa44 <SPI_send>
	SPI_send(mask);
     730:	8d 2f       	mov	r24, r29
     732:	0e 94 22 05 	call	0xa44	; 0xa44 <SPI_send>
	SPI_send(data);
     736:	8c 2f       	mov	r24, r28
     738:	0e 94 22 05 	call	0xa44	; 0xa44 <SPI_send>
	
	SPI_SS_high();
     73c:	0e 94 2b 05 	call	0xa56	; 0xa56 <SPI_SS_high>
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	08 95       	ret

00000748 <MCP_init>:
#include "../include/MCP.h"

void MCP_init(uint8_t mode){
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	d8 2f       	mov	r29, r24
	SPI_master_init();
     74e:	0e 94 2f 05 	call	0xa5e	; 0xa5e <SPI_master_init>
	MCP_reset();
     752:	0e 94 3d 03 	call	0x67a	; 0x67a <MCP_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     756:	8f ef       	ldi	r24, 0xFF	; 255
     758:	9f e2       	ldi	r25, 0x2F	; 47
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <MCP_init+0x12>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <MCP_init+0x18>
     760:	00 00       	nop
	_delay_ms(10);
	
	// Self-test
	uint8_t val = MCP_read(MCP_CANSTAT);
     762:	8e e0       	ldi	r24, 0x0E	; 14
     764:	0e 94 45 03 	call	0x68a	; 0x68a <MCP_read>
     768:	c8 2f       	mov	r28, r24
	if((val & MODE_MASK) != MODE_CONFIG) {
     76a:	80 7e       	andi	r24, 0xE0	; 224
     76c:	80 38       	cpi	r24, 0x80	; 128
     76e:	d9 f0       	breq	.+54     	; 0x7a6 <MCP_init+0x5e>
		printf("\nMCP2515 is NOT in configuration mode after reset!\n\r");
     770:	89 e3       	ldi	r24, 0x39	; 57
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	9f 93       	push	r25
     776:	8f 93       	push	r24
     778:	0e 94 c6 08 	call	0x118c	; 0x118c <printf>
		printf("read value: %x should be: %x\n\r", val, MODE_CONFIG);
     77c:	1f 92       	push	r1
     77e:	80 e8       	ldi	r24, 0x80	; 128
     780:	8f 93       	push	r24
     782:	1f 92       	push	r1
     784:	cf 93       	push	r28
     786:	8e e6       	ldi	r24, 0x6E	; 110
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	9f 93       	push	r25
     78c:	8f 93       	push	r24
     78e:	0e 94 c6 08 	call	0x118c	; 0x118c <printf>
		return;
     792:	2d b7       	in	r18, 0x3d	; 61
     794:	3e b7       	in	r19, 0x3e	; 62
     796:	28 5f       	subi	r18, 0xF8	; 248
     798:	3f 4f       	sbci	r19, 0xFF	; 255
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	3e bf       	out	0x3e, r19	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	2d bf       	out	0x3d, r18	; 61
     7a4:	6c c0       	rjmp	.+216    	; 0x87e <MCP_init+0x136>
	}
	
	printf("\nMCP2515 is in configuration mode...\n\r");
     7a6:	8d e8       	ldi	r24, 0x8D	; 141
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	9f 93       	push	r25
     7ac:	8f 93       	push	r24
     7ae:	0e 94 c6 08 	call	0x118c	; 0x118c <printf>
	//@125kbps - 16TQ = tbit
	MCP_write(MCP_CNF1, 0b11000011); //SJW = 3 | BRP = 3MCP_write(MCP_CNF1, 0b11000011); //SJW = 3 | BRP = 3
     7b2:	63 ec       	ldi	r22, 0xC3	; 195
     7b4:	8a e2       	ldi	r24, 0x2A	; 42
     7b6:	0e 94 57 03 	call	0x6ae	; 0x6ae <MCP_write>
	MCP_write(MCP_CNF2, 0b10110001); //10 | PH1 = 7(-1) | PROP = 2(-1)
     7ba:	61 eb       	ldi	r22, 0xB1	; 177
     7bc:	89 e2       	ldi	r24, 0x29	; 41
     7be:	0e 94 57 03 	call	0x6ae	; 0x6ae <MCP_write>
	MCP_write(MCP_CNF3, 0b00000101); //00 | XXX | PH2 = 6(-1)
     7c2:	65 e0       	ldi	r22, 0x05	; 5
     7c4:	88 e2       	ldi	r24, 0x28	; 40
     7c6:	0e 94 57 03 	call	0x6ae	; 0x6ae <MCP_write>
	
	printf("CNF1: %x\n\r", MCP_read(MCP_CNF1));
     7ca:	8a e2       	ldi	r24, 0x2A	; 42
     7cc:	0e 94 45 03 	call	0x68a	; 0x68a <MCP_read>
     7d0:	1f 92       	push	r1
     7d2:	8f 93       	push	r24
     7d4:	84 eb       	ldi	r24, 0xB4	; 180
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	9f 93       	push	r25
     7da:	8f 93       	push	r24
     7dc:	0e 94 c6 08 	call	0x118c	; 0x118c <printf>
	printf("CNF2: %x\n\r", MCP_read(MCP_CNF2));
     7e0:	89 e2       	ldi	r24, 0x29	; 41
     7e2:	0e 94 45 03 	call	0x68a	; 0x68a <MCP_read>
     7e6:	1f 92       	push	r1
     7e8:	8f 93       	push	r24
     7ea:	8f eb       	ldi	r24, 0xBF	; 191
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	9f 93       	push	r25
     7f0:	8f 93       	push	r24
     7f2:	0e 94 c6 08 	call	0x118c	; 0x118c <printf>
	printf("CNF3: %x\n\r", MCP_read(MCP_CNF3));
     7f6:	88 e2       	ldi	r24, 0x28	; 40
     7f8:	0e 94 45 03 	call	0x68a	; 0x68a <MCP_read>
     7fc:	1f 92       	push	r1
     7fe:	8f 93       	push	r24
     800:	8a ec       	ldi	r24, 0xCA	; 202
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	9f 93       	push	r25
     806:	8f 93       	push	r24
     808:	0e 94 c6 08 	call	0x118c	; 0x118c <printf>
	
	MCP_bit_modify(MCP_CANINTE, 0xFF, MCP_RX0IF); //enable ONLY rx interrupt on buffer 0
     80c:	41 e0       	ldi	r20, 0x01	; 1
     80e:	6f ef       	ldi	r22, 0xFF	; 255
     810:	8b e2       	ldi	r24, 0x2B	; 43
     812:	0e 94 8a 03 	call	0x714	; 0x714 <MCP_bit_modify>
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, mode); //set mode
     816:	4d 2f       	mov	r20, r29
     818:	60 ee       	ldi	r22, 0xE0	; 224
     81a:	8f e0       	ldi	r24, 0x0F	; 15
     81c:	0e 94 8a 03 	call	0x714	; 0x714 <MCP_bit_modify>
	
	val = MCP_read(MCP_CANSTAT);
     820:	8e e0       	ldi	r24, 0x0E	; 14
     822:	0e 94 45 03 	call	0x68a	; 0x68a <MCP_read>
     826:	c8 2f       	mov	r28, r24
	if((val & MODE_MASK) != mode) {
     828:	80 7e       	andi	r24, 0xE0	; 224
     82a:	2d b7       	in	r18, 0x3d	; 61
     82c:	3e b7       	in	r19, 0x3e	; 62
     82e:	22 5f       	subi	r18, 0xF2	; 242
     830:	3f 4f       	sbci	r19, 0xFF	; 255
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	3e bf       	out	0x3e, r19	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	2d bf       	out	0x3d, r18	; 61
     83c:	8d 17       	cp	r24, r29
     83e:	c9 f0       	breq	.+50     	; 0x872 <MCP_init+0x12a>
		printf("\nMCP2515 is NOT in DESIRED (loopback or normal)\n\r");
     840:	85 ed       	ldi	r24, 0xD5	; 213
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	9f 93       	push	r25
     846:	8f 93       	push	r24
     848:	0e 94 c6 08 	call	0x118c	; 0x118c <printf>
		printf("read value: %x should be: %x\n\r", val, mode);
     84c:	1f 92       	push	r1
     84e:	df 93       	push	r29
     850:	1f 92       	push	r1
     852:	cf 93       	push	r28
     854:	8e e6       	ldi	r24, 0x6E	; 110
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	9f 93       	push	r25
     85a:	8f 93       	push	r24
     85c:	0e 94 c6 08 	call	0x118c	; 0x118c <printf>
		return;
     860:	8d b7       	in	r24, 0x3d	; 61
     862:	9e b7       	in	r25, 0x3e	; 62
     864:	08 96       	adiw	r24, 0x08	; 8
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	9e bf       	out	0x3e, r25	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	8d bf       	out	0x3d, r24	; 61
     870:	06 c0       	rjmp	.+12     	; 0x87e <MCP_init+0x136>
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	9f e2       	ldi	r25, 0x2F	; 47
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <MCP_init+0x12e>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <MCP_init+0x134>
     87c:	00 00       	nop
	}
	
	_delay_ms(10);
}
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <OLED_write_cmd>:
	OLED_goto_pos(0,0);
}

void OLED_invert() {
	OLED_INVERTED ? OLED_write_cmd(0xA6) : OLED_write_cmd(0xA7); //normal : inverted
	OLED_INVERTED = !OLED_INVERTED;
     884:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xdb2>
     888:	08 95       	ret

0000088a <OLED_goto_row>:
     88a:	80 55       	subi	r24, 0x50	; 80
     88c:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
     890:	08 95       	ret

00000892 <OLED_goto_col>:
     892:	cf 93       	push	r28
     894:	c8 2f       	mov	r28, r24
     896:	8f 70       	andi	r24, 0x0F	; 15
     898:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
     89c:	8c 2f       	mov	r24, r28
     89e:	82 95       	swap	r24
     8a0:	8f 70       	andi	r24, 0x0F	; 15
     8a2:	80 61       	ori	r24, 0x10	; 16
     8a4:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <OLED_goto_pos>:
     8ac:	cf 93       	push	r28
     8ae:	c6 2f       	mov	r28, r22
     8b0:	0e 94 45 04 	call	0x88a	; 0x88a <OLED_goto_row>
     8b4:	8c 2f       	mov	r24, r28
     8b6:	0e 94 49 04 	call	0x892	; 0x892 <OLED_goto_col>
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <OLED_restrict_cols>:
}

void OLED_restrict_cols(uint8_t init_col, uint8_t end_col) {
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	d8 2f       	mov	r29, r24
     8c4:	c6 2f       	mov	r28, r22
	OLED_write_cmd(0x21);
     8c6:	81 e2       	ldi	r24, 0x21	; 33
     8c8:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(init_col);
     8cc:	8d 2f       	mov	r24, r29
     8ce:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(end_col);
     8d2:	8c 2f       	mov	r24, r28
     8d4:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <OLED_restrict_pages>:

void OLED_restrict_pages(uint8_t init_page, uint8_t end_page) {
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	d8 2f       	mov	r29, r24
     8e4:	c6 2f       	mov	r28, r22
	OLED_write_cmd(0x22);
     8e6:	82 e2       	ldi	r24, 0x22	; 34
     8e8:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(init_page);
     8ec:	8d 2f       	mov	r24, r29
     8ee:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(end_page);
     8f2:	8c 2f       	mov	r24, r28
     8f4:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
}
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <OLED_write_data>:
	volatile char *ext_mem = (char *) OLED_CMD_ADDR;
	ext_mem[0x0000] = cmd;
}
void OLED_write_data(uint8_t data){
	volatile char *ext_mem = (char *) OLED_DATA_ADDR;
	ext_mem[0x0000] = data;
     8fe:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xfb2>
     902:	08 95       	ret

00000904 <OLED_clear_row>:
	return (oled_pos_t){col, row, bit};
}

//--clearing

void OLED_clear_row(uint8_t row) {
     904:	cf 93       	push	r28
	OLED_goto_pos(row,0);
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	0e 94 56 04 	call	0x8ac	; 0x8ac <OLED_goto_pos>
	for (uint8_t col = 0; col < 128; col++) {
     90c:	c0 e0       	ldi	r28, 0x00	; 0
     90e:	04 c0       	rjmp	.+8      	; 0x918 <OLED_clear_row+0x14>
		OLED_write_data(0x00);
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	0e 94 7f 04 	call	0x8fe	; 0x8fe <OLED_write_data>

//--clearing

void OLED_clear_row(uint8_t row) {
	OLED_goto_pos(row,0);
	for (uint8_t col = 0; col < 128; col++) {
     916:	cf 5f       	subi	r28, 0xFF	; 255
     918:	cc 23       	and	r28, r28
     91a:	d4 f7       	brge	.-12     	; 0x910 <OLED_clear_row+0xc>
		OLED_write_data(0x00);
	}
}
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <OLED_clear>:
void OLED_clear(){
     920:	cf 93       	push	r28
	//OLED_restrict_cols(0,127);
	//OLED_restrict_pages(0,7);
	for (uint8_t page = 0; page < 8; page++) {
     922:	c0 e0       	ldi	r28, 0x00	; 0
     924:	04 c0       	rjmp	.+8      	; 0x92e <OLED_clear+0xe>
		OLED_clear_row(page);
     926:	8c 2f       	mov	r24, r28
     928:	0e 94 82 04 	call	0x904	; 0x904 <OLED_clear_row>
	}
}
void OLED_clear(){
	//OLED_restrict_cols(0,127);
	//OLED_restrict_pages(0,7);
	for (uint8_t page = 0; page < 8; page++) {
     92c:	cf 5f       	subi	r28, 0xFF	; 255
     92e:	c8 30       	cpi	r28, 0x08	; 8
     930:	d0 f3       	brcs	.-12     	; 0x926 <OLED_clear+0x6>
		OLED_clear_row(page);
	}
}
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <OLED_reset>:

//--utilities

void OLED_reset() {
	OLED_clear();
     936:	0e 94 90 04 	call	0x920	; 0x920 <OLED_clear>
	OLED_restrict_cols(0,127);
     93a:	6f e7       	ldi	r22, 0x7F	; 127
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	0e 94 5f 04 	call	0x8be	; 0x8be <OLED_restrict_cols>
	OLED_restrict_pages(0,7);
     942:	67 e0       	ldi	r22, 0x07	; 7
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	0e 94 6f 04 	call	0x8de	; 0x8de <OLED_restrict_pages>
	OLED_goto_pos(0,0);
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	0e 94 56 04 	call	0x8ac	; 0x8ac <OLED_goto_pos>
     952:	08 95       	ret

00000954 <OLED_init>:
//printf redirection
FILE *oled_output;
bool OLED_INVERTED = false;

void OLED_init(){
	OLED_write_cmd(0xAE);    //OFF
     954:	8e ea       	ldi	r24, 0xAE	; 174
     956:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	
	//!!! DONT TOUCH THESE SETTINGS !!! --------- (from datasheet)
	OLED_write_cmd(0xa1);    //segment remap
     95a:	81 ea       	ldi	r24, 0xA1	; 161
     95c:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0xda);    //common pads hardware: alternative
     960:	8a ed       	ldi	r24, 0xDA	; 218
     962:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0x12);
     966:	82 e1       	ldi	r24, 0x12	; 18
     968:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0xc8);    //common output scan direction:com63~com0
     96c:	88 ec       	ldi	r24, 0xC8	; 200
     96e:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0xa8);    //multiplex ration mode:63
     972:	88 ea       	ldi	r24, 0xA8	; 168
     974:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0x3f);
     978:	8f e3       	ldi	r24, 0x3F	; 63
     97a:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0xd5);    //display divide ratio/osc. freq. mode
     97e:	85 ed       	ldi	r24, 0xD5	; 213
     980:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0x80);
     984:	80 e8       	ldi	r24, 0x80	; 128
     986:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0xd9);	 //set pre-charge period
     98a:	89 ed       	ldi	r24, 0xD9	; 217
     98c:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0x21);
     990:	81 e2       	ldi	r24, 0x21	; 33
     992:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0xdb);    //VCOM deselect level mode
     996:	8b ed       	ldi	r24, 0xDB	; 219
     998:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0x30);
     99c:	80 e3       	ldi	r24, 0x30	; 48
     99e:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0xad);    //master configuration
     9a2:	8d ea       	ldi	r24, 0xAD	; 173
     9a4:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0x00);
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	//-------------------------------------------	
	
	OLED_write_cmd(0xD3);	//set display offset
     9ae:	83 ed       	ldi	r24, 0xD3	; 211
     9b0:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0x00);	
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0x40);
     9ba:	80 e4       	ldi	r24, 0x40	; 64
     9bc:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	
	OLED_write_cmd(0x20);   //Set Memory Addressing Mode
     9c0:	80 e2       	ldi	r24, 0x20	; 32
     9c2:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0b00);	//PAGE addressing mode => HORIZ -- all auto
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	
	OLED_write_cmd(0x81);   //contrast control
     9cc:	81 e8       	ldi	r24, 0x81	; 129
     9ce:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0xFF);	//contr lvl : 0-255
     9d2:	8f ef       	ldi	r24, 0xFF	; 255
     9d4:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	
	OLED_write_cmd(0xA6);    //A6 = normal B&W (A7 = inverse W&B)
     9d8:	86 ea       	ldi	r24, 0xA6	; 166
     9da:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0xA4);    //resume GDDRAM content (A5 = blank screen ON)
     9de:	84 ea       	ldi	r24, 0xA4	; 164
     9e0:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	OLED_write_cmd(0xAF);    //ON
     9e4:	8f ea       	ldi	r24, 0xAF	; 175
     9e6:	0e 94 42 04 	call	0x884	; 0x884 <OLED_write_cmd>
	
	oled_output = fdevopen(OLED_putchar8, NULL);
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	8d e1       	ldi	r24, 0x1D	; 29
     9f0:	95 e0       	ldi	r25, 0x05	; 5
     9f2:	0e 94 f9 07 	call	0xff2	; 0xff2 <fdevopen>
     9f6:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <oled_output+0x1>
     9fa:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <oled_output>
	OLED_reset();
     9fe:	0e 94 9b 04 	call	0x936	; 0x936 <OLED_reset>
     a02:	08 95       	ret

00000a04 <OLED_print_8char>:
	OLED_write_cmd(end_page);
}

//----

void OLED_print_8char(char c){
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
	c = c - 32;
     a08:	d0 ee       	ldi	r29, 0xE0	; 224
     a0a:	d8 0f       	add	r29, r24
	for (uint8_t i=0; i<8; i++){
     a0c:	c0 e0       	ldi	r28, 0x00	; 0
     a0e:	10 c0       	rjmp	.+32     	; 0xa30 <OLED_print_8char+0x2c>
		unsigned char byte = pgm_read_byte(&font8[(uint8_t)c][i]);
     a10:	ed 2f       	mov	r30, r29
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	ee 0f       	add	r30, r30
     a16:	ff 1f       	adc	r31, r31
     a18:	ee 0f       	add	r30, r30
     a1a:	ff 1f       	adc	r31, r31
     a1c:	ee 0f       	add	r30, r30
     a1e:	ff 1f       	adc	r31, r31
     a20:	ec 0f       	add	r30, r28
     a22:	f1 1d       	adc	r31, r1
     a24:	e0 59       	subi	r30, 0x90	; 144
     a26:	ff 4f       	sbci	r31, 0xFF	; 255
     a28:	84 91       	lpm	r24, Z
		OLED_write_data((uint8_t)byte);
     a2a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <OLED_write_data>

//----

void OLED_print_8char(char c){
	c = c - 32;
	for (uint8_t i=0; i<8; i++){
     a2e:	cf 5f       	subi	r28, 0xFF	; 255
     a30:	c8 30       	cpi	r28, 0x08	; 8
     a32:	70 f3       	brcs	.-36     	; 0xa10 <OLED_print_8char+0xc>
		unsigned char byte = pgm_read_byte(&font8[(uint8_t)c][i]);
		OLED_write_data((uint8_t)byte);
	}
}
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	08 95       	ret

00000a3a <OLED_putchar8>:
int OLED_putchar8(char c, FILE *stream){
	OLED_print_8char(c);
     a3a:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_print_8char>
	return 0;
}
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	08 95       	ret

00000a44 <SPI_send>:
	SPI_SS_high(); // !SS to 1 
}

void SPI_send(uint8_t data){ 
	//remember to set SS low before calling
	SPDR = data;
     a44:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))){} //Wait for transmission complete
     a46:	77 9b       	sbis	0x0e, 7	; 14
     a48:	fe cf       	rjmp	.-4      	; 0xa46 <SPI_send+0x2>
}
     a4a:	08 95       	ret

00000a4c <SPI_receive>:

uint8_t SPI_receive() {
	SPI_send(0xAA);		//send dummy
     a4c:	8a ea       	ldi	r24, 0xAA	; 170
     a4e:	0e 94 22 05 	call	0xa44	; 0xa44 <SPI_send>
	return SPDR;		// Return data register
     a52:	8f b1       	in	r24, 0x0f	; 15
}
     a54:	08 95       	ret

00000a56 <SPI_SS_high>:

void SPI_SS_high(){
	PORT_SPI |= (1 << SS);
     a56:	88 b3       	in	r24, 0x18	; 24
     a58:	80 61       	ori	r24, 0x10	; 16
     a5a:	88 bb       	out	0x18, r24	; 24
     a5c:	08 95       	ret

00000a5e <SPI_master_init>:
#include "../include/SPI.h"

void SPI_master_init(){
	// Set MOSI, SCK and !SS output
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SS);
     a5e:	87 b3       	in	r24, 0x17	; 23
     a60:	80 6b       	ori	r24, 0xB0	; 176
     a62:	87 bb       	out	0x17, r24	; 23
	
	// Enable SPI, Master, set clock rate fck/16, TODO? enable interrupts
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//|(1<<SPIE);
     a64:	8d b1       	in	r24, 0x0d	; 13
     a66:	81 65       	ori	r24, 0x51	; 81
     a68:	8d b9       	out	0x0d, r24	; 13
	SPCR &= ~((1 << CPOL) | (1 << CPHA)); // explicitly setting mode 00
     a6a:	8d b1       	in	r24, 0x0d	; 13
     a6c:	83 7f       	andi	r24, 0xF3	; 243
     a6e:	8d b9       	out	0x0d, r24	; 13
	SPI_SS_high(); // !SS to 1 
     a70:	0e 94 2b 05 	call	0xa56	; 0xa56 <SPI_SS_high>
     a74:	08 95       	ret

00000a76 <SPI_SS_low>:
void SPI_SS_high(){
	PORT_SPI |= (1 << SS);
}

void SPI_SS_low(){
	PORT_SPI &= ~(1 << SS);
     a76:	88 b3       	in	r24, 0x18	; 24
     a78:	8f 7e       	andi	r24, 0xEF	; 239
     a7a:	88 bb       	out	0x18, r24	; 24
     a7c:	08 95       	ret

00000a7e <UART_init>:

//--------

void UART_init(unsigned int ubrr) {

	cli(); //disable interrupts
     a7e:	f8 94       	cli

	UBRR0H = (unsigned char)(ubrr>>8);	//set baud rate
     a80:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     a82:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<TXCIE0) | (1<<RXCIE0);  //enable RX,TX and TXC,RXC interrupts
     a84:	88 ed       	ldi	r24, 0xD8	; 216
     a86:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3<<UCSZ00); //frame format: 8 data bits, 2 stop bit, parity: none
     a88:	8e e8       	ldi	r24, 0x8E	; 142
     a8a:	80 bd       	out	0x20, r24	; 32
	
	uart_output = fdevopen(UART_putchar, NULL);
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	82 e7       	ldi	r24, 0x72	; 114
     a92:	95 e0       	ldi	r25, 0x05	; 5
     a94:	0e 94 f9 07 	call	0xff2	; 0xff2 <fdevopen>
     a98:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <uart_output+0x1>
     a9c:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <uart_output>
	stdout = uart_output;
     aa0:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <__iob+0x3>
     aa4:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <__iob+0x2>
	
	sei();  //re-enable global interrupt
     aa8:	78 94       	sei
	
	//set led pins
	DDRB |= (1<<TXLED) | (1<<RXLED);	//direction: output
     aaa:	87 b3       	in	r24, 0x17	; 23
     aac:	86 60       	ori	r24, 0x06	; 6
     aae:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<TXLED) | (1<<RXLED);	//turn them off (sink-mode)
     ab0:	88 b3       	in	r24, 0x18	; 24
     ab2:	86 60       	ori	r24, 0x06	; 6
     ab4:	88 bb       	out	0x18, r24	; 24
     ab6:	08 95       	ret

00000ab8 <__vector_23>:
}

//-------- TRANSMISSION -----------

ISR(USART0_TXC_vect) {
     ab8:	1f 92       	push	r1
     aba:	0f 92       	push	r0
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	0f 92       	push	r0
     ac0:	11 24       	eor	r1, r1
     ac2:	8f 93       	push	r24
     ac4:	9f 93       	push	r25
	PORTB ^= (1<<TXLED); //blink as response of successful transmission
     ac6:	98 b3       	in	r25, 0x18	; 24
     ac8:	84 e0       	ldi	r24, 0x04	; 4
     aca:	89 27       	eor	r24, r25
     acc:	88 bb       	out	0x18, r24	; 24
}
     ace:	9f 91       	pop	r25
     ad0:	8f 91       	pop	r24
     ad2:	0f 90       	pop	r0
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	0f 90       	pop	r0
     ad8:	1f 90       	pop	r1
     ada:	18 95       	reti

00000adc <UART_transmit>:

void UART_transmit(char data){
	while (!(UCSR0A & (1<<UDRE0))); //wait until UDRE->1 = ready
     adc:	5d 9b       	sbis	0x0b, 5	; 11
     ade:	fe cf       	rjmp	.-4      	; 0xadc <UART_transmit>
	UDR0 = data;
     ae0:	8c b9       	out	0x0c, r24	; 12
     ae2:	08 95       	ret

00000ae4 <UART_putchar>:
}

// using two different functions transmit data (maybe unify them under putchar) / maybe adding ring buffer to write data also
int UART_putchar(char c, FILE *stream)
{	UART_transmit(c);
     ae4:	0e 94 6e 05 	call	0xadc	; 0xadc <UART_transmit>
	return 0;
}
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	08 95       	ret

00000aee <UART_receive>:

//---------- RECEIVING ------------

char UART_receive(){
	//frame-error OR data-over-run OR parity-error
	if ( UCSR0A & ((1<<FE0)|(1<<DOR0)|(1<<UPE0)) )
     aee:	8b b1       	in	r24, 0x0b	; 11
     af0:	8c 71       	andi	r24, 0x1C	; 28
     af2:	31 f4       	brne	.+12     	; 0xb00 <UART_receive+0x12>
		return -1;
	
	PORTB ^= (1<<RXLED); //blink led to report success of rx
     af4:	98 b3       	in	r25, 0x18	; 24
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	89 27       	eor	r24, r25
     afa:	88 bb       	out	0x18, r24	; 24
	return UDR0;
     afc:	8c b1       	in	r24, 0x0c	; 12
     afe:	08 95       	ret
//---------- RECEIVING ------------

char UART_receive(){
	//frame-error OR data-over-run OR parity-error
	if ( UCSR0A & ((1<<FE0)|(1<<DOR0)|(1<<UPE0)) )
		return -1;
     b00:	8f ef       	ldi	r24, 0xFF	; 255
	
	PORTB ^= (1<<RXLED); //blink led to report success of rx
	return UDR0;
}
     b02:	08 95       	ret

00000b04 <__vector_19>:

// Interrupt service routine for receiving data
ISR(USART0_RXC_vect) {
     b04:	1f 92       	push	r1
     b06:	0f 92       	push	r0
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	0f 92       	push	r0
     b0c:	11 24       	eor	r1, r1
     b0e:	2f 93       	push	r18
     b10:	3f 93       	push	r19
     b12:	4f 93       	push	r20
     b14:	5f 93       	push	r21
     b16:	6f 93       	push	r22
     b18:	7f 93       	push	r23
     b1a:	8f 93       	push	r24
     b1c:	9f 93       	push	r25
     b1e:	af 93       	push	r26
     b20:	bf 93       	push	r27
     b22:	ef 93       	push	r30
     b24:	ff 93       	push	r31
	received_data = UART_receive();
     b26:	0e 94 77 05 	call	0xaee	; 0xaee <UART_receive>
     b2a:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <received_data>
	printf("@echo: %c\n\r", received_data);
     b2e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <received_data>
     b32:	1f 92       	push	r1
     b34:	8f 93       	push	r24
     b36:	87 e0       	ldi	r24, 0x07	; 7
     b38:	92 e0       	ldi	r25, 0x02	; 2
     b3a:	9f 93       	push	r25
     b3c:	8f 93       	push	r24
     b3e:	0e 94 c6 08 	call	0x118c	; 0x118c <printf>
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	ff 91       	pop	r31
     b4c:	ef 91       	pop	r30
     b4e:	bf 91       	pop	r27
     b50:	af 91       	pop	r26
     b52:	9f 91       	pop	r25
     b54:	8f 91       	pop	r24
     b56:	7f 91       	pop	r23
     b58:	6f 91       	pop	r22
     b5a:	5f 91       	pop	r21
     b5c:	4f 91       	pop	r20
     b5e:	3f 91       	pop	r19
     b60:	2f 91       	pop	r18
     b62:	0f 90       	pop	r0
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	0f 90       	pop	r0
     b68:	1f 90       	pop	r1
     b6a:	18 95       	reti

00000b6c <XMEM_init>:
#include "../include/XMEM.h"

void XMEM_init(){
	MCUCR |= (1<<SRE);
     b6c:	85 b7       	in	r24, 0x35	; 53
     b6e:	80 68       	ori	r24, 0x80	; 128
     b70:	85 bf       	out	0x35, r24	; 53
	SFIOR = (1<<XMM2); //XMM=100 - mask PA7-4 for jtag
     b72:	80 e2       	ldi	r24, 0x20	; 32
     b74:	80 bf       	out	0x30, r24	; 48
     b76:	08 95       	ret

00000b78 <main>:
#define JOY_SEND_TRESHOLD 4

extern FILE *oled_output;
uint8_t score = 0;

int main(void) {
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	2b 97       	sbiw	r28, 0x0b	; 11
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
	UART_init(MYUBRR);
     b8c:	8f e1       	ldi	r24, 0x1F	; 31
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 3f 05 	call	0xa7e	; 0xa7e <UART_init>
	XMEM_init();
     b94:	0e 94 b6 05 	call	0xb6c	; 0xb6c <XMEM_init>
	ADC_init();
     b98:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	JOY_init();
     b9c:	0e 94 b6 02 	call	0x56c	; 0x56c <JOY_init>
	CAN_init();
     ba0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <CAN_init>
	OLED_init();
     ba4:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_init>
	OLED_reset();
     ba8:	0e 94 9b 04 	call	0x936	; 0x936 <OLED_reset>
	fprintf(oled_output,"SCORE: 0");
     bac:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <oled_output>
     bb0:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <oled_output+0x1>
     bb4:	48 e0       	ldi	r20, 0x08	; 8
     bb6:	50 e0       	ldi	r21, 0x00	; 0
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	83 e1       	ldi	r24, 0x13	; 19
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	0e 94 92 08 	call	0x1124	; 0x1124 <fwrite>
	
	int8_t last_x = 0;
	uint8_t last_sl = 0;
     bc4:	d1 2c       	mov	r13, r1
	CAN_init();
	OLED_init();
	OLED_reset();
	fprintf(oled_output,"SCORE: 0");
	
	int8_t last_x = 0;
     bc6:	f1 2c       	mov	r15, r1
     bc8:	8c ec       	ldi	r24, 0xCC	; 204
     bca:	9c e4       	ldi	r25, 0x4C	; 76
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	f1 f7       	brne	.-4      	; 0xbcc <main+0x54>
     bd0:	00 c0       	rjmp	.+0      	; 0xbd2 <main+0x5a>
     bd2:	00 00       	nop
	uint8_t last_sl = 0;
	
	while(1){
		_delay_ms(16);
		pos_t pos = JOY_get_rel_pos();
     bd4:	0e 94 bf 02 	call	0x57e	; 0x57e <JOY_get_rel_pos>
     bd8:	06 2f       	mov	r16, r22
     bda:	e8 2e       	mov	r14, r24
		sliders_t sliders = JOY_get_sliders();
     bdc:	0e 94 2d 03 	call	0x65a	; 0x65a <JOY_get_sliders>
     be0:	18 2f       	mov	r17, r24
		int8_t x = (int8_t)pos.x;
		int8_t y  = (int8_t)pos.y;
		uint8_t sl = sliders.left;
		
		//send only if difference is meaningful to avoid annoying flickering
		if (abs(x-last_x) >= JOY_SEND_TRESHOLD || abs(sl-last_sl) >= JOY_SEND_TRESHOLD){
     be2:	80 2f       	mov	r24, r16
     be4:	00 2e       	mov	r0, r16
     be6:	00 0c       	add	r0, r0
     be8:	99 0b       	sbc	r25, r25
     bea:	8f 19       	sub	r24, r15
     bec:	91 09       	sbc	r25, r1
     bee:	f7 fc       	sbrc	r15, 7
     bf0:	93 95       	inc	r25
     bf2:	9c 01       	movw	r18, r24
     bf4:	99 23       	and	r25, r25
     bf6:	24 f4       	brge	.+8      	; 0xc00 <main+0x88>
     bf8:	22 27       	eor	r18, r18
     bfa:	33 27       	eor	r19, r19
     bfc:	28 1b       	sub	r18, r24
     bfe:	39 0b       	sbc	r19, r25
     c00:	24 30       	cpi	r18, 0x04	; 4
     c02:	31 05       	cpc	r19, r1
     c04:	6c f4       	brge	.+26     	; 0xc20 <main+0xa8>
     c06:	81 2f       	mov	r24, r17
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	8d 19       	sub	r24, r13
     c0c:	91 09       	sbc	r25, r1
     c0e:	9c 01       	movw	r18, r24
     c10:	22 f4       	brpl	.+8      	; 0xc1a <main+0xa2>
     c12:	22 27       	eor	r18, r18
     c14:	33 27       	eor	r19, r19
     c16:	28 1b       	sub	r18, r24
     c18:	39 0b       	sbc	r19, r25
     c1a:	24 30       	cpi	r18, 0x04	; 4
     c1c:	31 05       	cpc	r19, r1
     c1e:	a4 f2       	brlt	.-88     	; 0xbc8 <main+0x50>
			last_x = x;
			last_sl = sl;
			message_t msg = {CAN_ID_JOYSTICK, 3, .signed_data={x,y}};
     c20:	ce 01       	movw	r24, r28
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	2b e0       	ldi	r18, 0x0B	; 11
     c26:	fc 01       	movw	r30, r24
     c28:	11 92       	st	Z+, r1
     c2a:	2a 95       	dec	r18
     c2c:	e9 f7       	brne	.-6      	; 0xc28 <main+0xb0>
     c2e:	21 e0       	ldi	r18, 0x01	; 1
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	3a 83       	std	Y+2, r19	; 0x02
     c34:	29 83       	std	Y+1, r18	; 0x01
     c36:	23 e0       	ldi	r18, 0x03	; 3
     c38:	2b 83       	std	Y+3, r18	; 0x03
     c3a:	0c 83       	std	Y+4, r16	; 0x04
     c3c:	ed 82       	std	Y+5, r14	; 0x05
			msg.unsigned_data[2] = sl;
     c3e:	1e 83       	std	Y+6, r17	; 0x06
			CAN_send(&msg);
     c40:	0e 94 fd 01 	call	0x3fa	; 0x3fa <CAN_send>
			printf("%d -> %d\n\r", sl, last_sl);
     c44:	1f 92       	push	r1
     c46:	1f 93       	push	r17
     c48:	1f 92       	push	r1
     c4a:	1f 93       	push	r17
     c4c:	8c e1       	ldi	r24, 0x1C	; 28
     c4e:	92 e0       	ldi	r25, 0x02	; 2
     c50:	9f 93       	push	r25
     c52:	8f 93       	push	r24
     c54:	0e 94 c6 08 	call	0x118c	; 0x118c <printf>
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
		uint8_t sl = sliders.left;
		
		//send only if difference is meaningful to avoid annoying flickering
		if (abs(x-last_x) >= JOY_SEND_TRESHOLD || abs(sl-last_sl) >= JOY_SEND_TRESHOLD){
			last_x = x;
			last_sl = sl;
     c64:	d1 2e       	mov	r13, r17
		int8_t y  = (int8_t)pos.y;
		uint8_t sl = sliders.left;
		
		//send only if difference is meaningful to avoid annoying flickering
		if (abs(x-last_x) >= JOY_SEND_TRESHOLD || abs(sl-last_sl) >= JOY_SEND_TRESHOLD){
			last_x = x;
     c66:	f0 2e       	mov	r15, r16
			message_t msg = {CAN_ID_JOYSTICK, 3, .signed_data={x,y}};
			msg.unsigned_data[2] = sl;
			CAN_send(&msg);
			printf("%d -> %d\n\r", sl, last_sl);
		}
	}
     c68:	af cf       	rjmp	.-162    	; 0xbc8 <main+0x50>

00000c6a <__vector_1>:
}

ISR(INT0_vect) {
     c6a:	1f 92       	push	r1
     c6c:	0f 92       	push	r0
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	0f 92       	push	r0
     c72:	11 24       	eor	r1, r1
     c74:	2f 93       	push	r18
     c76:	3f 93       	push	r19
     c78:	4f 93       	push	r20
     c7a:	5f 93       	push	r21
     c7c:	6f 93       	push	r22
     c7e:	7f 93       	push	r23
     c80:	8f 93       	push	r24
     c82:	9f 93       	push	r25
     c84:	af 93       	push	r26
     c86:	bf 93       	push	r27
     c88:	ef 93       	push	r30
     c8a:	ff 93       	push	r31
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	2b 97       	sbiw	r28, 0x0b	; 11
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	cd bf       	out	0x3d, r28	; 61
	message_t rec = CAN_receive();
     c9a:	ce 01       	movw	r24, r28
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	0e 94 30 02 	call	0x460	; 0x460 <CAN_receive>
	if (rec.id==CAN_ID_GOAL){
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	9a 81       	ldd	r25, Y+2	; 0x02
     ca6:	00 97       	sbiw	r24, 0x00	; 0
     ca8:	f9 f4       	brne	.+62     	; 0xce8 <__vector_1+0x7e>
		//OLED_clear_row(0);
		OLED_goto_pos(0,0);
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	0e 94 56 04 	call	0x8ac	; 0x8ac <OLED_goto_pos>
		fprintf(oled_output, "SCORE: %d", score++);
     cb2:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <__data_end>
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	98 0f       	add	r25, r24
     cba:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <__data_end>
     cbe:	1f 92       	push	r1
     cc0:	8f 93       	push	r24
     cc2:	87 e2       	ldi	r24, 0x27	; 39
     cc4:	92 e0       	ldi	r25, 0x02	; 2
     cc6:	9f 93       	push	r25
     cc8:	8f 93       	push	r24
     cca:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <oled_output+0x1>
     cce:	8f 93       	push	r24
     cd0:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <oled_output>
     cd4:	8f 93       	push	r24
     cd6:	0e 94 44 08 	call	0x1088	; 0x1088 <fprintf>
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	1e c0       	rjmp	.+60     	; 0xd24 <__vector_1+0xba>
	}
	else if (rec.id==CAN_ID_PWM){
     ce8:	02 97       	sbiw	r24, 0x02	; 2
     cea:	e1 f4       	brne	.+56     	; 0xd24 <__vector_1+0xba>
		OLED_clear_row(1);
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	0e 94 82 04 	call	0x904	; 0x904 <OLED_clear_row>
		OLED_goto_pos(1,0);
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	0e 94 56 04 	call	0x8ac	; 0x8ac <OLED_goto_pos>
		fprintf(oled_output, "pwm: %d", rec.unsigned_data[0]);
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	1f 92       	push	r1
     cfe:	8f 93       	push	r24
     d00:	81 e3       	ldi	r24, 0x31	; 49
     d02:	92 e0       	ldi	r25, 0x02	; 2
     d04:	9f 93       	push	r25
     d06:	8f 93       	push	r24
     d08:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <oled_output+0x1>
     d0c:	8f 93       	push	r24
     d0e:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <oled_output>
     d12:	8f 93       	push	r24
     d14:	0e 94 44 08 	call	0x1088	; 0x1088 <fprintf>
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
	}
	
	//clear interrupt flag
	MCP_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
     d24:	40 e0       	ldi	r20, 0x00	; 0
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	8c e2       	ldi	r24, 0x2C	; 44
     d2a:	0e 94 8a 03 	call	0x714	; 0x714 <MCP_bit_modify>
     d2e:	2b 96       	adiw	r28, 0x0b	; 11
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	ff 91       	pop	r31
     d40:	ef 91       	pop	r30
     d42:	bf 91       	pop	r27
     d44:	af 91       	pop	r26
     d46:	9f 91       	pop	r25
     d48:	8f 91       	pop	r24
     d4a:	7f 91       	pop	r23
     d4c:	6f 91       	pop	r22
     d4e:	5f 91       	pop	r21
     d50:	4f 91       	pop	r20
     d52:	3f 91       	pop	r19
     d54:	2f 91       	pop	r18
     d56:	0f 90       	pop	r0
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	0f 90       	pop	r0
     d5c:	1f 90       	pop	r1
     d5e:	18 95       	reti

00000d60 <__divmodhi4>:
     d60:	97 fb       	bst	r25, 7
     d62:	07 2e       	mov	r0, r23
     d64:	16 f4       	brtc	.+4      	; 0xd6a <__divmodhi4+0xa>
     d66:	00 94       	com	r0
     d68:	07 d0       	rcall	.+14     	; 0xd78 <__divmodhi4_neg1>
     d6a:	77 fd       	sbrc	r23, 7
     d6c:	09 d0       	rcall	.+18     	; 0xd80 <__divmodhi4_neg2>
     d6e:	0e 94 c4 06 	call	0xd88	; 0xd88 <__udivmodhi4>
     d72:	07 fc       	sbrc	r0, 7
     d74:	05 d0       	rcall	.+10     	; 0xd80 <__divmodhi4_neg2>
     d76:	3e f4       	brtc	.+14     	; 0xd86 <__divmodhi4_exit>

00000d78 <__divmodhi4_neg1>:
     d78:	90 95       	com	r25
     d7a:	81 95       	neg	r24
     d7c:	9f 4f       	sbci	r25, 0xFF	; 255
     d7e:	08 95       	ret

00000d80 <__divmodhi4_neg2>:
     d80:	70 95       	com	r23
     d82:	61 95       	neg	r22
     d84:	7f 4f       	sbci	r23, 0xFF	; 255

00000d86 <__divmodhi4_exit>:
     d86:	08 95       	ret

00000d88 <__udivmodhi4>:
     d88:	aa 1b       	sub	r26, r26
     d8a:	bb 1b       	sub	r27, r27
     d8c:	51 e1       	ldi	r21, 0x11	; 17
     d8e:	07 c0       	rjmp	.+14     	; 0xd9e <__udivmodhi4_ep>

00000d90 <__udivmodhi4_loop>:
     d90:	aa 1f       	adc	r26, r26
     d92:	bb 1f       	adc	r27, r27
     d94:	a6 17       	cp	r26, r22
     d96:	b7 07       	cpc	r27, r23
     d98:	10 f0       	brcs	.+4      	; 0xd9e <__udivmodhi4_ep>
     d9a:	a6 1b       	sub	r26, r22
     d9c:	b7 0b       	sbc	r27, r23

00000d9e <__udivmodhi4_ep>:
     d9e:	88 1f       	adc	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	5a 95       	dec	r21
     da4:	a9 f7       	brne	.-22     	; 0xd90 <__udivmodhi4_loop>
     da6:	80 95       	com	r24
     da8:	90 95       	com	r25
     daa:	bc 01       	movw	r22, r24
     dac:	cd 01       	movw	r24, r26
     dae:	08 95       	ret

00000db0 <malloc>:
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	82 30       	cpi	r24, 0x02	; 2
     dba:	91 05       	cpc	r25, r1
     dbc:	10 f4       	brcc	.+4      	; 0xdc2 <malloc+0x12>
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <__flp>
     dc6:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <__flp+0x1>
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	a0 e0       	ldi	r26, 0x00	; 0
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	30 97       	sbiw	r30, 0x00	; 0
     dd4:	19 f1       	breq	.+70     	; 0xe1c <malloc+0x6c>
     dd6:	40 81       	ld	r20, Z
     dd8:	51 81       	ldd	r21, Z+1	; 0x01
     dda:	02 81       	ldd	r16, Z+2	; 0x02
     ddc:	13 81       	ldd	r17, Z+3	; 0x03
     dde:	48 17       	cp	r20, r24
     de0:	59 07       	cpc	r21, r25
     de2:	c8 f0       	brcs	.+50     	; 0xe16 <malloc+0x66>
     de4:	84 17       	cp	r24, r20
     de6:	95 07       	cpc	r25, r21
     de8:	69 f4       	brne	.+26     	; 0xe04 <malloc+0x54>
     dea:	10 97       	sbiw	r26, 0x00	; 0
     dec:	31 f0       	breq	.+12     	; 0xdfa <malloc+0x4a>
     dee:	12 96       	adiw	r26, 0x02	; 2
     df0:	0c 93       	st	X, r16
     df2:	12 97       	sbiw	r26, 0x02	; 2
     df4:	13 96       	adiw	r26, 0x03	; 3
     df6:	1c 93       	st	X, r17
     df8:	27 c0       	rjmp	.+78     	; 0xe48 <malloc+0x98>
     dfa:	00 93 46 02 	sts	0x0246, r16	; 0x800246 <__flp>
     dfe:	10 93 47 02 	sts	0x0247, r17	; 0x800247 <__flp+0x1>
     e02:	22 c0       	rjmp	.+68     	; 0xe48 <malloc+0x98>
     e04:	21 15       	cp	r18, r1
     e06:	31 05       	cpc	r19, r1
     e08:	19 f0       	breq	.+6      	; 0xe10 <malloc+0x60>
     e0a:	42 17       	cp	r20, r18
     e0c:	53 07       	cpc	r21, r19
     e0e:	18 f4       	brcc	.+6      	; 0xe16 <malloc+0x66>
     e10:	9a 01       	movw	r18, r20
     e12:	bd 01       	movw	r22, r26
     e14:	ef 01       	movw	r28, r30
     e16:	df 01       	movw	r26, r30
     e18:	f8 01       	movw	r30, r16
     e1a:	db cf       	rjmp	.-74     	; 0xdd2 <malloc+0x22>
     e1c:	21 15       	cp	r18, r1
     e1e:	31 05       	cpc	r19, r1
     e20:	f9 f0       	breq	.+62     	; 0xe60 <malloc+0xb0>
     e22:	28 1b       	sub	r18, r24
     e24:	39 0b       	sbc	r19, r25
     e26:	24 30       	cpi	r18, 0x04	; 4
     e28:	31 05       	cpc	r19, r1
     e2a:	80 f4       	brcc	.+32     	; 0xe4c <malloc+0x9c>
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	9b 81       	ldd	r25, Y+3	; 0x03
     e30:	61 15       	cp	r22, r1
     e32:	71 05       	cpc	r23, r1
     e34:	21 f0       	breq	.+8      	; 0xe3e <malloc+0x8e>
     e36:	fb 01       	movw	r30, r22
     e38:	93 83       	std	Z+3, r25	; 0x03
     e3a:	82 83       	std	Z+2, r24	; 0x02
     e3c:	04 c0       	rjmp	.+8      	; 0xe46 <malloc+0x96>
     e3e:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <__flp+0x1>
     e42:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__flp>
     e46:	fe 01       	movw	r30, r28
     e48:	32 96       	adiw	r30, 0x02	; 2
     e4a:	44 c0       	rjmp	.+136    	; 0xed4 <malloc+0x124>
     e4c:	fe 01       	movw	r30, r28
     e4e:	e2 0f       	add	r30, r18
     e50:	f3 1f       	adc	r31, r19
     e52:	81 93       	st	Z+, r24
     e54:	91 93       	st	Z+, r25
     e56:	22 50       	subi	r18, 0x02	; 2
     e58:	31 09       	sbc	r19, r1
     e5a:	39 83       	std	Y+1, r19	; 0x01
     e5c:	28 83       	st	Y, r18
     e5e:	3a c0       	rjmp	.+116    	; 0xed4 <malloc+0x124>
     e60:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <__brkval>
     e64:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <__brkval+0x1>
     e68:	23 2b       	or	r18, r19
     e6a:	41 f4       	brne	.+16     	; 0xe7c <malloc+0xcc>
     e6c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     e70:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     e74:	30 93 45 02 	sts	0x0245, r19	; 0x800245 <__brkval+0x1>
     e78:	20 93 44 02 	sts	0x0244, r18	; 0x800244 <__brkval>
     e7c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e80:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e84:	21 15       	cp	r18, r1
     e86:	31 05       	cpc	r19, r1
     e88:	41 f4       	brne	.+16     	; 0xe9a <malloc+0xea>
     e8a:	2d b7       	in	r18, 0x3d	; 61
     e8c:	3e b7       	in	r19, 0x3e	; 62
     e8e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     e92:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     e96:	24 1b       	sub	r18, r20
     e98:	35 0b       	sbc	r19, r21
     e9a:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <__brkval>
     e9e:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <__brkval+0x1>
     ea2:	e2 17       	cp	r30, r18
     ea4:	f3 07       	cpc	r31, r19
     ea6:	a0 f4       	brcc	.+40     	; 0xed0 <malloc+0x120>
     ea8:	2e 1b       	sub	r18, r30
     eaa:	3f 0b       	sbc	r19, r31
     eac:	28 17       	cp	r18, r24
     eae:	39 07       	cpc	r19, r25
     eb0:	78 f0       	brcs	.+30     	; 0xed0 <malloc+0x120>
     eb2:	ac 01       	movw	r20, r24
     eb4:	4e 5f       	subi	r20, 0xFE	; 254
     eb6:	5f 4f       	sbci	r21, 0xFF	; 255
     eb8:	24 17       	cp	r18, r20
     eba:	35 07       	cpc	r19, r21
     ebc:	48 f0       	brcs	.+18     	; 0xed0 <malloc+0x120>
     ebe:	4e 0f       	add	r20, r30
     ec0:	5f 1f       	adc	r21, r31
     ec2:	50 93 45 02 	sts	0x0245, r21	; 0x800245 <__brkval+0x1>
     ec6:	40 93 44 02 	sts	0x0244, r20	; 0x800244 <__brkval>
     eca:	81 93       	st	Z+, r24
     ecc:	91 93       	st	Z+, r25
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <malloc+0x124>
     ed0:	e0 e0       	ldi	r30, 0x00	; 0
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	cf 01       	movw	r24, r30
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	08 95       	ret

00000ee0 <free>:
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	09 f4       	brne	.+2      	; 0xeea <free+0xa>
     ee8:	81 c0       	rjmp	.+258    	; 0xfec <free+0x10c>
     eea:	fc 01       	movw	r30, r24
     eec:	32 97       	sbiw	r30, 0x02	; 2
     eee:	13 82       	std	Z+3, r1	; 0x03
     ef0:	12 82       	std	Z+2, r1	; 0x02
     ef2:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <__flp>
     ef6:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <__flp+0x1>
     efa:	10 97       	sbiw	r26, 0x00	; 0
     efc:	81 f4       	brne	.+32     	; 0xf1e <free+0x3e>
     efe:	20 81       	ld	r18, Z
     f00:	31 81       	ldd	r19, Z+1	; 0x01
     f02:	82 0f       	add	r24, r18
     f04:	93 1f       	adc	r25, r19
     f06:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <__brkval>
     f0a:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <__brkval+0x1>
     f0e:	28 17       	cp	r18, r24
     f10:	39 07       	cpc	r19, r25
     f12:	51 f5       	brne	.+84     	; 0xf68 <free+0x88>
     f14:	f0 93 45 02 	sts	0x0245, r31	; 0x800245 <__brkval+0x1>
     f18:	e0 93 44 02 	sts	0x0244, r30	; 0x800244 <__brkval>
     f1c:	67 c0       	rjmp	.+206    	; 0xfec <free+0x10c>
     f1e:	ed 01       	movw	r28, r26
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	ce 17       	cp	r28, r30
     f26:	df 07       	cpc	r29, r31
     f28:	40 f4       	brcc	.+16     	; 0xf3a <free+0x5a>
     f2a:	4a 81       	ldd	r20, Y+2	; 0x02
     f2c:	5b 81       	ldd	r21, Y+3	; 0x03
     f2e:	9e 01       	movw	r18, r28
     f30:	41 15       	cp	r20, r1
     f32:	51 05       	cpc	r21, r1
     f34:	f1 f0       	breq	.+60     	; 0xf72 <free+0x92>
     f36:	ea 01       	movw	r28, r20
     f38:	f5 cf       	rjmp	.-22     	; 0xf24 <free+0x44>
     f3a:	d3 83       	std	Z+3, r29	; 0x03
     f3c:	c2 83       	std	Z+2, r28	; 0x02
     f3e:	40 81       	ld	r20, Z
     f40:	51 81       	ldd	r21, Z+1	; 0x01
     f42:	84 0f       	add	r24, r20
     f44:	95 1f       	adc	r25, r21
     f46:	c8 17       	cp	r28, r24
     f48:	d9 07       	cpc	r29, r25
     f4a:	59 f4       	brne	.+22     	; 0xf62 <free+0x82>
     f4c:	88 81       	ld	r24, Y
     f4e:	99 81       	ldd	r25, Y+1	; 0x01
     f50:	84 0f       	add	r24, r20
     f52:	95 1f       	adc	r25, r21
     f54:	02 96       	adiw	r24, 0x02	; 2
     f56:	91 83       	std	Z+1, r25	; 0x01
     f58:	80 83       	st	Z, r24
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	9b 81       	ldd	r25, Y+3	; 0x03
     f5e:	93 83       	std	Z+3, r25	; 0x03
     f60:	82 83       	std	Z+2, r24	; 0x02
     f62:	21 15       	cp	r18, r1
     f64:	31 05       	cpc	r19, r1
     f66:	29 f4       	brne	.+10     	; 0xf72 <free+0x92>
     f68:	f0 93 47 02 	sts	0x0247, r31	; 0x800247 <__flp+0x1>
     f6c:	e0 93 46 02 	sts	0x0246, r30	; 0x800246 <__flp>
     f70:	3d c0       	rjmp	.+122    	; 0xfec <free+0x10c>
     f72:	e9 01       	movw	r28, r18
     f74:	fb 83       	std	Y+3, r31	; 0x03
     f76:	ea 83       	std	Y+2, r30	; 0x02
     f78:	49 91       	ld	r20, Y+
     f7a:	59 91       	ld	r21, Y+
     f7c:	c4 0f       	add	r28, r20
     f7e:	d5 1f       	adc	r29, r21
     f80:	ec 17       	cp	r30, r28
     f82:	fd 07       	cpc	r31, r29
     f84:	61 f4       	brne	.+24     	; 0xf9e <free+0xbe>
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	84 0f       	add	r24, r20
     f8c:	95 1f       	adc	r25, r21
     f8e:	02 96       	adiw	r24, 0x02	; 2
     f90:	e9 01       	movw	r28, r18
     f92:	99 83       	std	Y+1, r25	; 0x01
     f94:	88 83       	st	Y, r24
     f96:	82 81       	ldd	r24, Z+2	; 0x02
     f98:	93 81       	ldd	r25, Z+3	; 0x03
     f9a:	9b 83       	std	Y+3, r25	; 0x03
     f9c:	8a 83       	std	Y+2, r24	; 0x02
     f9e:	e0 e0       	ldi	r30, 0x00	; 0
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	12 96       	adiw	r26, 0x02	; 2
     fa4:	8d 91       	ld	r24, X+
     fa6:	9c 91       	ld	r25, X
     fa8:	13 97       	sbiw	r26, 0x03	; 3
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	19 f0       	breq	.+6      	; 0xfb4 <free+0xd4>
     fae:	fd 01       	movw	r30, r26
     fb0:	dc 01       	movw	r26, r24
     fb2:	f7 cf       	rjmp	.-18     	; 0xfa2 <free+0xc2>
     fb4:	8d 91       	ld	r24, X+
     fb6:	9c 91       	ld	r25, X
     fb8:	11 97       	sbiw	r26, 0x01	; 1
     fba:	9d 01       	movw	r18, r26
     fbc:	2e 5f       	subi	r18, 0xFE	; 254
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	82 0f       	add	r24, r18
     fc2:	93 1f       	adc	r25, r19
     fc4:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <__brkval>
     fc8:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <__brkval+0x1>
     fcc:	28 17       	cp	r18, r24
     fce:	39 07       	cpc	r19, r25
     fd0:	69 f4       	brne	.+26     	; 0xfec <free+0x10c>
     fd2:	30 97       	sbiw	r30, 0x00	; 0
     fd4:	29 f4       	brne	.+10     	; 0xfe0 <free+0x100>
     fd6:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <__flp+0x1>
     fda:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <__flp>
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <free+0x104>
     fe0:	13 82       	std	Z+3, r1	; 0x03
     fe2:	12 82       	std	Z+2, r1	; 0x02
     fe4:	b0 93 45 02 	sts	0x0245, r27	; 0x800245 <__brkval+0x1>
     fe8:	a0 93 44 02 	sts	0x0244, r26	; 0x800244 <__brkval>
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	08 95       	ret

00000ff2 <fdevopen>:
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	31 f4       	brne	.+12     	; 0x100a <fdevopen+0x18>
     ffe:	61 15       	cp	r22, r1
    1000:	71 05       	cpc	r23, r1
    1002:	19 f4       	brne	.+6      	; 0x100a <fdevopen+0x18>
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	3a c0       	rjmp	.+116    	; 0x107e <fdevopen+0x8c>
    100a:	8b 01       	movw	r16, r22
    100c:	ec 01       	movw	r28, r24
    100e:	6e e0       	ldi	r22, 0x0E	; 14
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 bd 0a 	call	0x157a	; 0x157a <calloc>
    101a:	fc 01       	movw	r30, r24
    101c:	89 2b       	or	r24, r25
    101e:	91 f3       	breq	.-28     	; 0x1004 <fdevopen+0x12>
    1020:	80 e8       	ldi	r24, 0x80	; 128
    1022:	83 83       	std	Z+3, r24	; 0x03
    1024:	01 15       	cp	r16, r1
    1026:	11 05       	cpc	r17, r1
    1028:	71 f0       	breq	.+28     	; 0x1046 <fdevopen+0x54>
    102a:	13 87       	std	Z+11, r17	; 0x0b
    102c:	02 87       	std	Z+10, r16	; 0x0a
    102e:	81 e8       	ldi	r24, 0x81	; 129
    1030:	83 83       	std	Z+3, r24	; 0x03
    1032:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <__iob>
    1036:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <__iob+0x1>
    103a:	89 2b       	or	r24, r25
    103c:	21 f4       	brne	.+8      	; 0x1046 <fdevopen+0x54>
    103e:	f0 93 49 02 	sts	0x0249, r31	; 0x800249 <__iob+0x1>
    1042:	e0 93 48 02 	sts	0x0248, r30	; 0x800248 <__iob>
    1046:	20 97       	sbiw	r28, 0x00	; 0
    1048:	c9 f0       	breq	.+50     	; 0x107c <fdevopen+0x8a>
    104a:	d1 87       	std	Z+9, r29	; 0x09
    104c:	c0 87       	std	Z+8, r28	; 0x08
    104e:	83 81       	ldd	r24, Z+3	; 0x03
    1050:	82 60       	ori	r24, 0x02	; 2
    1052:	83 83       	std	Z+3, r24	; 0x03
    1054:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__iob+0x2>
    1058:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <__iob+0x3>
    105c:	89 2b       	or	r24, r25
    105e:	71 f4       	brne	.+28     	; 0x107c <fdevopen+0x8a>
    1060:	f0 93 4b 02 	sts	0x024B, r31	; 0x80024b <__iob+0x3>
    1064:	e0 93 4a 02 	sts	0x024A, r30	; 0x80024a <__iob+0x2>
    1068:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <__iob+0x4>
    106c:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <__iob+0x5>
    1070:	89 2b       	or	r24, r25
    1072:	21 f4       	brne	.+8      	; 0x107c <fdevopen+0x8a>
    1074:	f0 93 4d 02 	sts	0x024D, r31	; 0x80024d <__iob+0x5>
    1078:	e0 93 4c 02 	sts	0x024C, r30	; 0x80024c <__iob+0x4>
    107c:	cf 01       	movw	r24, r30
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	08 95       	ret

00001088 <fprintf>:
    1088:	a0 e0       	ldi	r26, 0x00	; 0
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	ea e4       	ldi	r30, 0x4A	; 74
    108e:	f8 e0       	ldi	r31, 0x08	; 8
    1090:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__prologue_saves__+0x20>
    1094:	ae 01       	movw	r20, r28
    1096:	47 5f       	subi	r20, 0xF7	; 247
    1098:	5f 4f       	sbci	r21, 0xFF	; 255
    109a:	6f 81       	ldd	r22, Y+7	; 0x07
    109c:	78 85       	ldd	r23, Y+8	; 0x08
    109e:	8d 81       	ldd	r24, Y+5	; 0x05
    10a0:	9e 81       	ldd	r25, Y+6	; 0x06
    10a2:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <vfprintf>
    10a6:	e2 e0       	ldi	r30, 0x02	; 2
    10a8:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__epilogue_restores__+0x20>

000010ac <fputc>:
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	fb 01       	movw	r30, r22
    10b6:	23 81       	ldd	r18, Z+3	; 0x03
    10b8:	21 fd       	sbrc	r18, 1
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <fputc+0x16>
    10bc:	8f ef       	ldi	r24, 0xFF	; 255
    10be:	9f ef       	ldi	r25, 0xFF	; 255
    10c0:	2c c0       	rjmp	.+88     	; 0x111a <fputc+0x6e>
    10c2:	22 ff       	sbrs	r18, 2
    10c4:	16 c0       	rjmp	.+44     	; 0x10f2 <fputc+0x46>
    10c6:	46 81       	ldd	r20, Z+6	; 0x06
    10c8:	57 81       	ldd	r21, Z+7	; 0x07
    10ca:	24 81       	ldd	r18, Z+4	; 0x04
    10cc:	35 81       	ldd	r19, Z+5	; 0x05
    10ce:	42 17       	cp	r20, r18
    10d0:	53 07       	cpc	r21, r19
    10d2:	44 f4       	brge	.+16     	; 0x10e4 <fputc+0x38>
    10d4:	a0 81       	ld	r26, Z
    10d6:	b1 81       	ldd	r27, Z+1	; 0x01
    10d8:	9d 01       	movw	r18, r26
    10da:	2f 5f       	subi	r18, 0xFF	; 255
    10dc:	3f 4f       	sbci	r19, 0xFF	; 255
    10de:	31 83       	std	Z+1, r19	; 0x01
    10e0:	20 83       	st	Z, r18
    10e2:	8c 93       	st	X, r24
    10e4:	26 81       	ldd	r18, Z+6	; 0x06
    10e6:	37 81       	ldd	r19, Z+7	; 0x07
    10e8:	2f 5f       	subi	r18, 0xFF	; 255
    10ea:	3f 4f       	sbci	r19, 0xFF	; 255
    10ec:	37 83       	std	Z+7, r19	; 0x07
    10ee:	26 83       	std	Z+6, r18	; 0x06
    10f0:	14 c0       	rjmp	.+40     	; 0x111a <fputc+0x6e>
    10f2:	8b 01       	movw	r16, r22
    10f4:	ec 01       	movw	r28, r24
    10f6:	fb 01       	movw	r30, r22
    10f8:	00 84       	ldd	r0, Z+8	; 0x08
    10fa:	f1 85       	ldd	r31, Z+9	; 0x09
    10fc:	e0 2d       	mov	r30, r0
    10fe:	09 95       	icall
    1100:	89 2b       	or	r24, r25
    1102:	e1 f6       	brne	.-72     	; 0x10bc <fputc+0x10>
    1104:	d8 01       	movw	r26, r16
    1106:	16 96       	adiw	r26, 0x06	; 6
    1108:	8d 91       	ld	r24, X+
    110a:	9c 91       	ld	r25, X
    110c:	17 97       	sbiw	r26, 0x07	; 7
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	17 96       	adiw	r26, 0x07	; 7
    1112:	9c 93       	st	X, r25
    1114:	8e 93       	st	-X, r24
    1116:	16 97       	sbiw	r26, 0x06	; 6
    1118:	ce 01       	movw	r24, r28
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <fwrite>:
    1124:	a0 e0       	ldi	r26, 0x00	; 0
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e8 e9       	ldi	r30, 0x98	; 152
    112a:	f8 e0       	ldi	r31, 0x08	; 8
    112c:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__prologue_saves__+0xc>
    1130:	5b 01       	movw	r10, r22
    1132:	4a 01       	movw	r8, r20
    1134:	79 01       	movw	r14, r18
    1136:	d9 01       	movw	r26, r18
    1138:	13 96       	adiw	r26, 0x03	; 3
    113a:	2c 91       	ld	r18, X
    113c:	21 ff       	sbrs	r18, 1
    113e:	1d c0       	rjmp	.+58     	; 0x117a <fwrite+0x56>
    1140:	c0 e0       	ldi	r28, 0x00	; 0
    1142:	d0 e0       	ldi	r29, 0x00	; 0
    1144:	c8 15       	cp	r28, r8
    1146:	d9 05       	cpc	r29, r9
    1148:	d9 f0       	breq	.+54     	; 0x1180 <fwrite+0x5c>
    114a:	8c 01       	movw	r16, r24
    114c:	6c 01       	movw	r12, r24
    114e:	ca 0c       	add	r12, r10
    1150:	db 1c       	adc	r13, r11
    1152:	c8 01       	movw	r24, r16
    1154:	0c 15       	cp	r16, r12
    1156:	1d 05       	cpc	r17, r13
    1158:	71 f0       	breq	.+28     	; 0x1176 <fwrite+0x52>
    115a:	0f 5f       	subi	r16, 0xFF	; 255
    115c:	1f 4f       	sbci	r17, 0xFF	; 255
    115e:	d7 01       	movw	r26, r14
    1160:	18 96       	adiw	r26, 0x08	; 8
    1162:	ed 91       	ld	r30, X+
    1164:	fc 91       	ld	r31, X
    1166:	19 97       	sbiw	r26, 0x09	; 9
    1168:	b7 01       	movw	r22, r14
    116a:	dc 01       	movw	r26, r24
    116c:	8c 91       	ld	r24, X
    116e:	09 95       	icall
    1170:	89 2b       	or	r24, r25
    1172:	79 f3       	breq	.-34     	; 0x1152 <fwrite+0x2e>
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <fwrite+0x5c>
    1176:	21 96       	adiw	r28, 0x01	; 1
    1178:	e5 cf       	rjmp	.-54     	; 0x1144 <fwrite+0x20>
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <fwrite+0x5e>
    1180:	ce 01       	movw	r24, r28
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	ec e0       	ldi	r30, 0x0C	; 12
    1188:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__epilogue_restores__+0xc>

0000118c <printf>:
    118c:	a0 e0       	ldi	r26, 0x00	; 0
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	ec ec       	ldi	r30, 0xCC	; 204
    1192:	f8 e0       	ldi	r31, 0x08	; 8
    1194:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__prologue_saves__+0x20>
    1198:	ae 01       	movw	r20, r28
    119a:	4b 5f       	subi	r20, 0xFB	; 251
    119c:	5f 4f       	sbci	r21, 0xFF	; 255
    119e:	fa 01       	movw	r30, r20
    11a0:	61 91       	ld	r22, Z+
    11a2:	71 91       	ld	r23, Z+
    11a4:	af 01       	movw	r20, r30
    11a6:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__iob+0x2>
    11aa:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <__iob+0x3>
    11ae:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <vfprintf>
    11b2:	e2 e0       	ldi	r30, 0x02	; 2
    11b4:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__epilogue_restores__+0x20>

000011b8 <vfprintf>:
    11b8:	ab e0       	ldi	r26, 0x0B	; 11
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e2 ee       	ldi	r30, 0xE2	; 226
    11be:	f8 e0       	ldi	r31, 0x08	; 8
    11c0:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__prologue_saves__>
    11c4:	6c 01       	movw	r12, r24
    11c6:	7b 01       	movw	r14, r22
    11c8:	8a 01       	movw	r16, r20
    11ca:	fc 01       	movw	r30, r24
    11cc:	17 82       	std	Z+7, r1	; 0x07
    11ce:	16 82       	std	Z+6, r1	; 0x06
    11d0:	83 81       	ldd	r24, Z+3	; 0x03
    11d2:	81 ff       	sbrs	r24, 1
    11d4:	cc c1       	rjmp	.+920    	; 0x156e <vfprintf+0x3b6>
    11d6:	ce 01       	movw	r24, r28
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	3c 01       	movw	r6, r24
    11dc:	f6 01       	movw	r30, r12
    11de:	93 81       	ldd	r25, Z+3	; 0x03
    11e0:	f7 01       	movw	r30, r14
    11e2:	93 fd       	sbrc	r25, 3
    11e4:	85 91       	lpm	r24, Z+
    11e6:	93 ff       	sbrs	r25, 3
    11e8:	81 91       	ld	r24, Z+
    11ea:	7f 01       	movw	r14, r30
    11ec:	88 23       	and	r24, r24
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <vfprintf+0x3a>
    11f0:	ba c1       	rjmp	.+884    	; 0x1566 <vfprintf+0x3ae>
    11f2:	85 32       	cpi	r24, 0x25	; 37
    11f4:	39 f4       	brne	.+14     	; 0x1204 <vfprintf+0x4c>
    11f6:	93 fd       	sbrc	r25, 3
    11f8:	85 91       	lpm	r24, Z+
    11fa:	93 ff       	sbrs	r25, 3
    11fc:	81 91       	ld	r24, Z+
    11fe:	7f 01       	movw	r14, r30
    1200:	85 32       	cpi	r24, 0x25	; 37
    1202:	29 f4       	brne	.+10     	; 0x120e <vfprintf+0x56>
    1204:	b6 01       	movw	r22, r12
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
    120c:	e7 cf       	rjmp	.-50     	; 0x11dc <vfprintf+0x24>
    120e:	91 2c       	mov	r9, r1
    1210:	21 2c       	mov	r2, r1
    1212:	31 2c       	mov	r3, r1
    1214:	ff e1       	ldi	r31, 0x1F	; 31
    1216:	f3 15       	cp	r31, r3
    1218:	d8 f0       	brcs	.+54     	; 0x1250 <vfprintf+0x98>
    121a:	8b 32       	cpi	r24, 0x2B	; 43
    121c:	79 f0       	breq	.+30     	; 0x123c <vfprintf+0x84>
    121e:	38 f4       	brcc	.+14     	; 0x122e <vfprintf+0x76>
    1220:	80 32       	cpi	r24, 0x20	; 32
    1222:	79 f0       	breq	.+30     	; 0x1242 <vfprintf+0x8a>
    1224:	83 32       	cpi	r24, 0x23	; 35
    1226:	a1 f4       	brne	.+40     	; 0x1250 <vfprintf+0x98>
    1228:	23 2d       	mov	r18, r3
    122a:	20 61       	ori	r18, 0x10	; 16
    122c:	1d c0       	rjmp	.+58     	; 0x1268 <vfprintf+0xb0>
    122e:	8d 32       	cpi	r24, 0x2D	; 45
    1230:	61 f0       	breq	.+24     	; 0x124a <vfprintf+0x92>
    1232:	80 33       	cpi	r24, 0x30	; 48
    1234:	69 f4       	brne	.+26     	; 0x1250 <vfprintf+0x98>
    1236:	23 2d       	mov	r18, r3
    1238:	21 60       	ori	r18, 0x01	; 1
    123a:	16 c0       	rjmp	.+44     	; 0x1268 <vfprintf+0xb0>
    123c:	83 2d       	mov	r24, r3
    123e:	82 60       	ori	r24, 0x02	; 2
    1240:	38 2e       	mov	r3, r24
    1242:	e3 2d       	mov	r30, r3
    1244:	e4 60       	ori	r30, 0x04	; 4
    1246:	3e 2e       	mov	r3, r30
    1248:	2a c0       	rjmp	.+84     	; 0x129e <vfprintf+0xe6>
    124a:	f3 2d       	mov	r31, r3
    124c:	f8 60       	ori	r31, 0x08	; 8
    124e:	1d c0       	rjmp	.+58     	; 0x128a <vfprintf+0xd2>
    1250:	37 fc       	sbrc	r3, 7
    1252:	2d c0       	rjmp	.+90     	; 0x12ae <vfprintf+0xf6>
    1254:	20 ed       	ldi	r18, 0xD0	; 208
    1256:	28 0f       	add	r18, r24
    1258:	2a 30       	cpi	r18, 0x0A	; 10
    125a:	40 f0       	brcs	.+16     	; 0x126c <vfprintf+0xb4>
    125c:	8e 32       	cpi	r24, 0x2E	; 46
    125e:	b9 f4       	brne	.+46     	; 0x128e <vfprintf+0xd6>
    1260:	36 fc       	sbrc	r3, 6
    1262:	81 c1       	rjmp	.+770    	; 0x1566 <vfprintf+0x3ae>
    1264:	23 2d       	mov	r18, r3
    1266:	20 64       	ori	r18, 0x40	; 64
    1268:	32 2e       	mov	r3, r18
    126a:	19 c0       	rjmp	.+50     	; 0x129e <vfprintf+0xe6>
    126c:	36 fe       	sbrs	r3, 6
    126e:	06 c0       	rjmp	.+12     	; 0x127c <vfprintf+0xc4>
    1270:	8a e0       	ldi	r24, 0x0A	; 10
    1272:	98 9e       	mul	r9, r24
    1274:	20 0d       	add	r18, r0
    1276:	11 24       	eor	r1, r1
    1278:	92 2e       	mov	r9, r18
    127a:	11 c0       	rjmp	.+34     	; 0x129e <vfprintf+0xe6>
    127c:	ea e0       	ldi	r30, 0x0A	; 10
    127e:	2e 9e       	mul	r2, r30
    1280:	20 0d       	add	r18, r0
    1282:	11 24       	eor	r1, r1
    1284:	22 2e       	mov	r2, r18
    1286:	f3 2d       	mov	r31, r3
    1288:	f0 62       	ori	r31, 0x20	; 32
    128a:	3f 2e       	mov	r3, r31
    128c:	08 c0       	rjmp	.+16     	; 0x129e <vfprintf+0xe6>
    128e:	8c 36       	cpi	r24, 0x6C	; 108
    1290:	21 f4       	brne	.+8      	; 0x129a <vfprintf+0xe2>
    1292:	83 2d       	mov	r24, r3
    1294:	80 68       	ori	r24, 0x80	; 128
    1296:	38 2e       	mov	r3, r24
    1298:	02 c0       	rjmp	.+4      	; 0x129e <vfprintf+0xe6>
    129a:	88 36       	cpi	r24, 0x68	; 104
    129c:	41 f4       	brne	.+16     	; 0x12ae <vfprintf+0xf6>
    129e:	f7 01       	movw	r30, r14
    12a0:	93 fd       	sbrc	r25, 3
    12a2:	85 91       	lpm	r24, Z+
    12a4:	93 ff       	sbrs	r25, 3
    12a6:	81 91       	ld	r24, Z+
    12a8:	7f 01       	movw	r14, r30
    12aa:	81 11       	cpse	r24, r1
    12ac:	b3 cf       	rjmp	.-154    	; 0x1214 <vfprintf+0x5c>
    12ae:	98 2f       	mov	r25, r24
    12b0:	9f 7d       	andi	r25, 0xDF	; 223
    12b2:	95 54       	subi	r25, 0x45	; 69
    12b4:	93 30       	cpi	r25, 0x03	; 3
    12b6:	28 f4       	brcc	.+10     	; 0x12c2 <vfprintf+0x10a>
    12b8:	0c 5f       	subi	r16, 0xFC	; 252
    12ba:	1f 4f       	sbci	r17, 0xFF	; 255
    12bc:	9f e3       	ldi	r25, 0x3F	; 63
    12be:	99 83       	std	Y+1, r25	; 0x01
    12c0:	0d c0       	rjmp	.+26     	; 0x12dc <vfprintf+0x124>
    12c2:	83 36       	cpi	r24, 0x63	; 99
    12c4:	31 f0       	breq	.+12     	; 0x12d2 <vfprintf+0x11a>
    12c6:	83 37       	cpi	r24, 0x73	; 115
    12c8:	71 f0       	breq	.+28     	; 0x12e6 <vfprintf+0x12e>
    12ca:	83 35       	cpi	r24, 0x53	; 83
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <vfprintf+0x118>
    12ce:	59 c0       	rjmp	.+178    	; 0x1382 <vfprintf+0x1ca>
    12d0:	21 c0       	rjmp	.+66     	; 0x1314 <vfprintf+0x15c>
    12d2:	f8 01       	movw	r30, r16
    12d4:	80 81       	ld	r24, Z
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	0e 5f       	subi	r16, 0xFE	; 254
    12da:	1f 4f       	sbci	r17, 0xFF	; 255
    12dc:	88 24       	eor	r8, r8
    12de:	83 94       	inc	r8
    12e0:	91 2c       	mov	r9, r1
    12e2:	53 01       	movw	r10, r6
    12e4:	13 c0       	rjmp	.+38     	; 0x130c <vfprintf+0x154>
    12e6:	28 01       	movw	r4, r16
    12e8:	f2 e0       	ldi	r31, 0x02	; 2
    12ea:	4f 0e       	add	r4, r31
    12ec:	51 1c       	adc	r5, r1
    12ee:	f8 01       	movw	r30, r16
    12f0:	a0 80       	ld	r10, Z
    12f2:	b1 80       	ldd	r11, Z+1	; 0x01
    12f4:	36 fe       	sbrs	r3, 6
    12f6:	03 c0       	rjmp	.+6      	; 0x12fe <vfprintf+0x146>
    12f8:	69 2d       	mov	r22, r9
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <vfprintf+0x14a>
    12fe:	6f ef       	ldi	r22, 0xFF	; 255
    1300:	7f ef       	ldi	r23, 0xFF	; 255
    1302:	c5 01       	movw	r24, r10
    1304:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <strnlen>
    1308:	4c 01       	movw	r8, r24
    130a:	82 01       	movw	r16, r4
    130c:	f3 2d       	mov	r31, r3
    130e:	ff 77       	andi	r31, 0x7F	; 127
    1310:	3f 2e       	mov	r3, r31
    1312:	16 c0       	rjmp	.+44     	; 0x1340 <vfprintf+0x188>
    1314:	28 01       	movw	r4, r16
    1316:	22 e0       	ldi	r18, 0x02	; 2
    1318:	42 0e       	add	r4, r18
    131a:	51 1c       	adc	r5, r1
    131c:	f8 01       	movw	r30, r16
    131e:	a0 80       	ld	r10, Z
    1320:	b1 80       	ldd	r11, Z+1	; 0x01
    1322:	36 fe       	sbrs	r3, 6
    1324:	03 c0       	rjmp	.+6      	; 0x132c <vfprintf+0x174>
    1326:	69 2d       	mov	r22, r9
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <vfprintf+0x178>
    132c:	6f ef       	ldi	r22, 0xFF	; 255
    132e:	7f ef       	ldi	r23, 0xFF	; 255
    1330:	c5 01       	movw	r24, r10
    1332:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <strnlen_P>
    1336:	4c 01       	movw	r8, r24
    1338:	f3 2d       	mov	r31, r3
    133a:	f0 68       	ori	r31, 0x80	; 128
    133c:	3f 2e       	mov	r3, r31
    133e:	82 01       	movw	r16, r4
    1340:	33 fc       	sbrc	r3, 3
    1342:	1b c0       	rjmp	.+54     	; 0x137a <vfprintf+0x1c2>
    1344:	82 2d       	mov	r24, r2
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	88 16       	cp	r8, r24
    134a:	99 06       	cpc	r9, r25
    134c:	b0 f4       	brcc	.+44     	; 0x137a <vfprintf+0x1c2>
    134e:	b6 01       	movw	r22, r12
    1350:	80 e2       	ldi	r24, 0x20	; 32
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
    1358:	2a 94       	dec	r2
    135a:	f4 cf       	rjmp	.-24     	; 0x1344 <vfprintf+0x18c>
    135c:	f5 01       	movw	r30, r10
    135e:	37 fc       	sbrc	r3, 7
    1360:	85 91       	lpm	r24, Z+
    1362:	37 fe       	sbrs	r3, 7
    1364:	81 91       	ld	r24, Z+
    1366:	5f 01       	movw	r10, r30
    1368:	b6 01       	movw	r22, r12
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
    1370:	21 10       	cpse	r2, r1
    1372:	2a 94       	dec	r2
    1374:	21 e0       	ldi	r18, 0x01	; 1
    1376:	82 1a       	sub	r8, r18
    1378:	91 08       	sbc	r9, r1
    137a:	81 14       	cp	r8, r1
    137c:	91 04       	cpc	r9, r1
    137e:	71 f7       	brne	.-36     	; 0x135c <vfprintf+0x1a4>
    1380:	e8 c0       	rjmp	.+464    	; 0x1552 <vfprintf+0x39a>
    1382:	84 36       	cpi	r24, 0x64	; 100
    1384:	11 f0       	breq	.+4      	; 0x138a <vfprintf+0x1d2>
    1386:	89 36       	cpi	r24, 0x69	; 105
    1388:	41 f5       	brne	.+80     	; 0x13da <vfprintf+0x222>
    138a:	f8 01       	movw	r30, r16
    138c:	37 fe       	sbrs	r3, 7
    138e:	07 c0       	rjmp	.+14     	; 0x139e <vfprintf+0x1e6>
    1390:	60 81       	ld	r22, Z
    1392:	71 81       	ldd	r23, Z+1	; 0x01
    1394:	82 81       	ldd	r24, Z+2	; 0x02
    1396:	93 81       	ldd	r25, Z+3	; 0x03
    1398:	0c 5f       	subi	r16, 0xFC	; 252
    139a:	1f 4f       	sbci	r17, 0xFF	; 255
    139c:	08 c0       	rjmp	.+16     	; 0x13ae <vfprintf+0x1f6>
    139e:	60 81       	ld	r22, Z
    13a0:	71 81       	ldd	r23, Z+1	; 0x01
    13a2:	07 2e       	mov	r0, r23
    13a4:	00 0c       	add	r0, r0
    13a6:	88 0b       	sbc	r24, r24
    13a8:	99 0b       	sbc	r25, r25
    13aa:	0e 5f       	subi	r16, 0xFE	; 254
    13ac:	1f 4f       	sbci	r17, 0xFF	; 255
    13ae:	f3 2d       	mov	r31, r3
    13b0:	ff 76       	andi	r31, 0x6F	; 111
    13b2:	3f 2e       	mov	r3, r31
    13b4:	97 ff       	sbrs	r25, 7
    13b6:	09 c0       	rjmp	.+18     	; 0x13ca <vfprintf+0x212>
    13b8:	90 95       	com	r25
    13ba:	80 95       	com	r24
    13bc:	70 95       	com	r23
    13be:	61 95       	neg	r22
    13c0:	7f 4f       	sbci	r23, 0xFF	; 255
    13c2:	8f 4f       	sbci	r24, 0xFF	; 255
    13c4:	9f 4f       	sbci	r25, 0xFF	; 255
    13c6:	f0 68       	ori	r31, 0x80	; 128
    13c8:	3f 2e       	mov	r3, r31
    13ca:	2a e0       	ldi	r18, 0x0A	; 10
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	a3 01       	movw	r20, r6
    13d0:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__ultoa_invert>
    13d4:	88 2e       	mov	r8, r24
    13d6:	86 18       	sub	r8, r6
    13d8:	45 c0       	rjmp	.+138    	; 0x1464 <vfprintf+0x2ac>
    13da:	85 37       	cpi	r24, 0x75	; 117
    13dc:	31 f4       	brne	.+12     	; 0x13ea <vfprintf+0x232>
    13de:	23 2d       	mov	r18, r3
    13e0:	2f 7e       	andi	r18, 0xEF	; 239
    13e2:	b2 2e       	mov	r11, r18
    13e4:	2a e0       	ldi	r18, 0x0A	; 10
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	25 c0       	rjmp	.+74     	; 0x1434 <vfprintf+0x27c>
    13ea:	93 2d       	mov	r25, r3
    13ec:	99 7f       	andi	r25, 0xF9	; 249
    13ee:	b9 2e       	mov	r11, r25
    13f0:	8f 36       	cpi	r24, 0x6F	; 111
    13f2:	c1 f0       	breq	.+48     	; 0x1424 <vfprintf+0x26c>
    13f4:	18 f4       	brcc	.+6      	; 0x13fc <vfprintf+0x244>
    13f6:	88 35       	cpi	r24, 0x58	; 88
    13f8:	79 f0       	breq	.+30     	; 0x1418 <vfprintf+0x260>
    13fa:	b5 c0       	rjmp	.+362    	; 0x1566 <vfprintf+0x3ae>
    13fc:	80 37       	cpi	r24, 0x70	; 112
    13fe:	19 f0       	breq	.+6      	; 0x1406 <vfprintf+0x24e>
    1400:	88 37       	cpi	r24, 0x78	; 120
    1402:	21 f0       	breq	.+8      	; 0x140c <vfprintf+0x254>
    1404:	b0 c0       	rjmp	.+352    	; 0x1566 <vfprintf+0x3ae>
    1406:	e9 2f       	mov	r30, r25
    1408:	e0 61       	ori	r30, 0x10	; 16
    140a:	be 2e       	mov	r11, r30
    140c:	b4 fe       	sbrs	r11, 4
    140e:	0d c0       	rjmp	.+26     	; 0x142a <vfprintf+0x272>
    1410:	fb 2d       	mov	r31, r11
    1412:	f4 60       	ori	r31, 0x04	; 4
    1414:	bf 2e       	mov	r11, r31
    1416:	09 c0       	rjmp	.+18     	; 0x142a <vfprintf+0x272>
    1418:	34 fe       	sbrs	r3, 4
    141a:	0a c0       	rjmp	.+20     	; 0x1430 <vfprintf+0x278>
    141c:	29 2f       	mov	r18, r25
    141e:	26 60       	ori	r18, 0x06	; 6
    1420:	b2 2e       	mov	r11, r18
    1422:	06 c0       	rjmp	.+12     	; 0x1430 <vfprintf+0x278>
    1424:	28 e0       	ldi	r18, 0x08	; 8
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	05 c0       	rjmp	.+10     	; 0x1434 <vfprintf+0x27c>
    142a:	20 e1       	ldi	r18, 0x10	; 16
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <vfprintf+0x27c>
    1430:	20 e1       	ldi	r18, 0x10	; 16
    1432:	32 e0       	ldi	r19, 0x02	; 2
    1434:	f8 01       	movw	r30, r16
    1436:	b7 fe       	sbrs	r11, 7
    1438:	07 c0       	rjmp	.+14     	; 0x1448 <vfprintf+0x290>
    143a:	60 81       	ld	r22, Z
    143c:	71 81       	ldd	r23, Z+1	; 0x01
    143e:	82 81       	ldd	r24, Z+2	; 0x02
    1440:	93 81       	ldd	r25, Z+3	; 0x03
    1442:	0c 5f       	subi	r16, 0xFC	; 252
    1444:	1f 4f       	sbci	r17, 0xFF	; 255
    1446:	06 c0       	rjmp	.+12     	; 0x1454 <vfprintf+0x29c>
    1448:	60 81       	ld	r22, Z
    144a:	71 81       	ldd	r23, Z+1	; 0x01
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 5f       	subi	r16, 0xFE	; 254
    1452:	1f 4f       	sbci	r17, 0xFF	; 255
    1454:	a3 01       	movw	r20, r6
    1456:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__ultoa_invert>
    145a:	88 2e       	mov	r8, r24
    145c:	86 18       	sub	r8, r6
    145e:	fb 2d       	mov	r31, r11
    1460:	ff 77       	andi	r31, 0x7F	; 127
    1462:	3f 2e       	mov	r3, r31
    1464:	36 fe       	sbrs	r3, 6
    1466:	0d c0       	rjmp	.+26     	; 0x1482 <vfprintf+0x2ca>
    1468:	23 2d       	mov	r18, r3
    146a:	2e 7f       	andi	r18, 0xFE	; 254
    146c:	a2 2e       	mov	r10, r18
    146e:	89 14       	cp	r8, r9
    1470:	58 f4       	brcc	.+22     	; 0x1488 <vfprintf+0x2d0>
    1472:	34 fe       	sbrs	r3, 4
    1474:	0b c0       	rjmp	.+22     	; 0x148c <vfprintf+0x2d4>
    1476:	32 fc       	sbrc	r3, 2
    1478:	09 c0       	rjmp	.+18     	; 0x148c <vfprintf+0x2d4>
    147a:	83 2d       	mov	r24, r3
    147c:	8e 7e       	andi	r24, 0xEE	; 238
    147e:	a8 2e       	mov	r10, r24
    1480:	05 c0       	rjmp	.+10     	; 0x148c <vfprintf+0x2d4>
    1482:	b8 2c       	mov	r11, r8
    1484:	a3 2c       	mov	r10, r3
    1486:	03 c0       	rjmp	.+6      	; 0x148e <vfprintf+0x2d6>
    1488:	b8 2c       	mov	r11, r8
    148a:	01 c0       	rjmp	.+2      	; 0x148e <vfprintf+0x2d6>
    148c:	b9 2c       	mov	r11, r9
    148e:	a4 fe       	sbrs	r10, 4
    1490:	0f c0       	rjmp	.+30     	; 0x14b0 <vfprintf+0x2f8>
    1492:	fe 01       	movw	r30, r28
    1494:	e8 0d       	add	r30, r8
    1496:	f1 1d       	adc	r31, r1
    1498:	80 81       	ld	r24, Z
    149a:	80 33       	cpi	r24, 0x30	; 48
    149c:	21 f4       	brne	.+8      	; 0x14a6 <vfprintf+0x2ee>
    149e:	9a 2d       	mov	r25, r10
    14a0:	99 7e       	andi	r25, 0xE9	; 233
    14a2:	a9 2e       	mov	r10, r25
    14a4:	09 c0       	rjmp	.+18     	; 0x14b8 <vfprintf+0x300>
    14a6:	a2 fe       	sbrs	r10, 2
    14a8:	06 c0       	rjmp	.+12     	; 0x14b6 <vfprintf+0x2fe>
    14aa:	b3 94       	inc	r11
    14ac:	b3 94       	inc	r11
    14ae:	04 c0       	rjmp	.+8      	; 0x14b8 <vfprintf+0x300>
    14b0:	8a 2d       	mov	r24, r10
    14b2:	86 78       	andi	r24, 0x86	; 134
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <vfprintf+0x300>
    14b6:	b3 94       	inc	r11
    14b8:	a3 fc       	sbrc	r10, 3
    14ba:	11 c0       	rjmp	.+34     	; 0x14de <vfprintf+0x326>
    14bc:	a0 fe       	sbrs	r10, 0
    14be:	06 c0       	rjmp	.+12     	; 0x14cc <vfprintf+0x314>
    14c0:	b2 14       	cp	r11, r2
    14c2:	88 f4       	brcc	.+34     	; 0x14e6 <vfprintf+0x32e>
    14c4:	28 0c       	add	r2, r8
    14c6:	92 2c       	mov	r9, r2
    14c8:	9b 18       	sub	r9, r11
    14ca:	0e c0       	rjmp	.+28     	; 0x14e8 <vfprintf+0x330>
    14cc:	b2 14       	cp	r11, r2
    14ce:	60 f4       	brcc	.+24     	; 0x14e8 <vfprintf+0x330>
    14d0:	b6 01       	movw	r22, r12
    14d2:	80 e2       	ldi	r24, 0x20	; 32
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
    14da:	b3 94       	inc	r11
    14dc:	f7 cf       	rjmp	.-18     	; 0x14cc <vfprintf+0x314>
    14de:	b2 14       	cp	r11, r2
    14e0:	18 f4       	brcc	.+6      	; 0x14e8 <vfprintf+0x330>
    14e2:	2b 18       	sub	r2, r11
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <vfprintf+0x332>
    14e6:	98 2c       	mov	r9, r8
    14e8:	21 2c       	mov	r2, r1
    14ea:	a4 fe       	sbrs	r10, 4
    14ec:	10 c0       	rjmp	.+32     	; 0x150e <vfprintf+0x356>
    14ee:	b6 01       	movw	r22, r12
    14f0:	80 e3       	ldi	r24, 0x30	; 48
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
    14f8:	a2 fe       	sbrs	r10, 2
    14fa:	17 c0       	rjmp	.+46     	; 0x152a <vfprintf+0x372>
    14fc:	a1 fc       	sbrc	r10, 1
    14fe:	03 c0       	rjmp	.+6      	; 0x1506 <vfprintf+0x34e>
    1500:	88 e7       	ldi	r24, 0x78	; 120
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	02 c0       	rjmp	.+4      	; 0x150a <vfprintf+0x352>
    1506:	88 e5       	ldi	r24, 0x58	; 88
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	b6 01       	movw	r22, r12
    150c:	0c c0       	rjmp	.+24     	; 0x1526 <vfprintf+0x36e>
    150e:	8a 2d       	mov	r24, r10
    1510:	86 78       	andi	r24, 0x86	; 134
    1512:	59 f0       	breq	.+22     	; 0x152a <vfprintf+0x372>
    1514:	a1 fe       	sbrs	r10, 1
    1516:	02 c0       	rjmp	.+4      	; 0x151c <vfprintf+0x364>
    1518:	8b e2       	ldi	r24, 0x2B	; 43
    151a:	01 c0       	rjmp	.+2      	; 0x151e <vfprintf+0x366>
    151c:	80 e2       	ldi	r24, 0x20	; 32
    151e:	a7 fc       	sbrc	r10, 7
    1520:	8d e2       	ldi	r24, 0x2D	; 45
    1522:	b6 01       	movw	r22, r12
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
    152a:	89 14       	cp	r8, r9
    152c:	38 f4       	brcc	.+14     	; 0x153c <vfprintf+0x384>
    152e:	b6 01       	movw	r22, r12
    1530:	80 e3       	ldi	r24, 0x30	; 48
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
    1538:	9a 94       	dec	r9
    153a:	f7 cf       	rjmp	.-18     	; 0x152a <vfprintf+0x372>
    153c:	8a 94       	dec	r8
    153e:	f3 01       	movw	r30, r6
    1540:	e8 0d       	add	r30, r8
    1542:	f1 1d       	adc	r31, r1
    1544:	80 81       	ld	r24, Z
    1546:	b6 01       	movw	r22, r12
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
    154e:	81 10       	cpse	r8, r1
    1550:	f5 cf       	rjmp	.-22     	; 0x153c <vfprintf+0x384>
    1552:	22 20       	and	r2, r2
    1554:	09 f4       	brne	.+2      	; 0x1558 <vfprintf+0x3a0>
    1556:	42 ce       	rjmp	.-892    	; 0x11dc <vfprintf+0x24>
    1558:	b6 01       	movw	r22, r12
    155a:	80 e2       	ldi	r24, 0x20	; 32
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
    1562:	2a 94       	dec	r2
    1564:	f6 cf       	rjmp	.-20     	; 0x1552 <vfprintf+0x39a>
    1566:	f6 01       	movw	r30, r12
    1568:	86 81       	ldd	r24, Z+6	; 0x06
    156a:	97 81       	ldd	r25, Z+7	; 0x07
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <vfprintf+0x3ba>
    156e:	8f ef       	ldi	r24, 0xFF	; 255
    1570:	9f ef       	ldi	r25, 0xFF	; 255
    1572:	2b 96       	adiw	r28, 0x0b	; 11
    1574:	e2 e1       	ldi	r30, 0x12	; 18
    1576:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__epilogue_restores__>

0000157a <calloc>:
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	86 9f       	mul	r24, r22
    1584:	80 01       	movw	r16, r0
    1586:	87 9f       	mul	r24, r23
    1588:	10 0d       	add	r17, r0
    158a:	96 9f       	mul	r25, r22
    158c:	10 0d       	add	r17, r0
    158e:	11 24       	eor	r1, r1
    1590:	c8 01       	movw	r24, r16
    1592:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <malloc>
    1596:	ec 01       	movw	r28, r24
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	29 f0       	breq	.+10     	; 0x15a6 <calloc+0x2c>
    159c:	a8 01       	movw	r20, r16
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <memset>
    15a6:	ce 01       	movw	r24, r28
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	08 95       	ret

000015b2 <strnlen_P>:
    15b2:	fc 01       	movw	r30, r24
    15b4:	05 90       	lpm	r0, Z+
    15b6:	61 50       	subi	r22, 0x01	; 1
    15b8:	70 40       	sbci	r23, 0x00	; 0
    15ba:	01 10       	cpse	r0, r1
    15bc:	d8 f7       	brcc	.-10     	; 0x15b4 <strnlen_P+0x2>
    15be:	80 95       	com	r24
    15c0:	90 95       	com	r25
    15c2:	8e 0f       	add	r24, r30
    15c4:	9f 1f       	adc	r25, r31
    15c6:	08 95       	ret

000015c8 <memset>:
    15c8:	dc 01       	movw	r26, r24
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <memset+0x6>
    15cc:	6d 93       	st	X+, r22
    15ce:	41 50       	subi	r20, 0x01	; 1
    15d0:	50 40       	sbci	r21, 0x00	; 0
    15d2:	e0 f7       	brcc	.-8      	; 0x15cc <memset+0x4>
    15d4:	08 95       	ret

000015d6 <strnlen>:
    15d6:	fc 01       	movw	r30, r24
    15d8:	61 50       	subi	r22, 0x01	; 1
    15da:	70 40       	sbci	r23, 0x00	; 0
    15dc:	01 90       	ld	r0, Z+
    15de:	01 10       	cpse	r0, r1
    15e0:	d8 f7       	brcc	.-10     	; 0x15d8 <strnlen+0x2>
    15e2:	80 95       	com	r24
    15e4:	90 95       	com	r25
    15e6:	8e 0f       	add	r24, r30
    15e8:	9f 1f       	adc	r25, r31
    15ea:	08 95       	ret

000015ec <__ultoa_invert>:
    15ec:	fa 01       	movw	r30, r20
    15ee:	aa 27       	eor	r26, r26
    15f0:	28 30       	cpi	r18, 0x08	; 8
    15f2:	51 f1       	breq	.+84     	; 0x1648 <__ultoa_invert+0x5c>
    15f4:	20 31       	cpi	r18, 0x10	; 16
    15f6:	81 f1       	breq	.+96     	; 0x1658 <__ultoa_invert+0x6c>
    15f8:	e8 94       	clt
    15fa:	6f 93       	push	r22
    15fc:	6e 7f       	andi	r22, 0xFE	; 254
    15fe:	6e 5f       	subi	r22, 0xFE	; 254
    1600:	7f 4f       	sbci	r23, 0xFF	; 255
    1602:	8f 4f       	sbci	r24, 0xFF	; 255
    1604:	9f 4f       	sbci	r25, 0xFF	; 255
    1606:	af 4f       	sbci	r26, 0xFF	; 255
    1608:	b1 e0       	ldi	r27, 0x01	; 1
    160a:	3e d0       	rcall	.+124    	; 0x1688 <__ultoa_invert+0x9c>
    160c:	b4 e0       	ldi	r27, 0x04	; 4
    160e:	3c d0       	rcall	.+120    	; 0x1688 <__ultoa_invert+0x9c>
    1610:	67 0f       	add	r22, r23
    1612:	78 1f       	adc	r23, r24
    1614:	89 1f       	adc	r24, r25
    1616:	9a 1f       	adc	r25, r26
    1618:	a1 1d       	adc	r26, r1
    161a:	68 0f       	add	r22, r24
    161c:	79 1f       	adc	r23, r25
    161e:	8a 1f       	adc	r24, r26
    1620:	91 1d       	adc	r25, r1
    1622:	a1 1d       	adc	r26, r1
    1624:	6a 0f       	add	r22, r26
    1626:	71 1d       	adc	r23, r1
    1628:	81 1d       	adc	r24, r1
    162a:	91 1d       	adc	r25, r1
    162c:	a1 1d       	adc	r26, r1
    162e:	20 d0       	rcall	.+64     	; 0x1670 <__ultoa_invert+0x84>
    1630:	09 f4       	brne	.+2      	; 0x1634 <__ultoa_invert+0x48>
    1632:	68 94       	set
    1634:	3f 91       	pop	r19
    1636:	2a e0       	ldi	r18, 0x0A	; 10
    1638:	26 9f       	mul	r18, r22
    163a:	11 24       	eor	r1, r1
    163c:	30 19       	sub	r19, r0
    163e:	30 5d       	subi	r19, 0xD0	; 208
    1640:	31 93       	st	Z+, r19
    1642:	de f6       	brtc	.-74     	; 0x15fa <__ultoa_invert+0xe>
    1644:	cf 01       	movw	r24, r30
    1646:	08 95       	ret
    1648:	46 2f       	mov	r20, r22
    164a:	47 70       	andi	r20, 0x07	; 7
    164c:	40 5d       	subi	r20, 0xD0	; 208
    164e:	41 93       	st	Z+, r20
    1650:	b3 e0       	ldi	r27, 0x03	; 3
    1652:	0f d0       	rcall	.+30     	; 0x1672 <__ultoa_invert+0x86>
    1654:	c9 f7       	brne	.-14     	; 0x1648 <__ultoa_invert+0x5c>
    1656:	f6 cf       	rjmp	.-20     	; 0x1644 <__ultoa_invert+0x58>
    1658:	46 2f       	mov	r20, r22
    165a:	4f 70       	andi	r20, 0x0F	; 15
    165c:	40 5d       	subi	r20, 0xD0	; 208
    165e:	4a 33       	cpi	r20, 0x3A	; 58
    1660:	18 f0       	brcs	.+6      	; 0x1668 <__ultoa_invert+0x7c>
    1662:	49 5d       	subi	r20, 0xD9	; 217
    1664:	31 fd       	sbrc	r19, 1
    1666:	40 52       	subi	r20, 0x20	; 32
    1668:	41 93       	st	Z+, r20
    166a:	02 d0       	rcall	.+4      	; 0x1670 <__ultoa_invert+0x84>
    166c:	a9 f7       	brne	.-22     	; 0x1658 <__ultoa_invert+0x6c>
    166e:	ea cf       	rjmp	.-44     	; 0x1644 <__ultoa_invert+0x58>
    1670:	b4 e0       	ldi	r27, 0x04	; 4
    1672:	a6 95       	lsr	r26
    1674:	97 95       	ror	r25
    1676:	87 95       	ror	r24
    1678:	77 95       	ror	r23
    167a:	67 95       	ror	r22
    167c:	ba 95       	dec	r27
    167e:	c9 f7       	brne	.-14     	; 0x1672 <__ultoa_invert+0x86>
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	61 05       	cpc	r22, r1
    1684:	71 05       	cpc	r23, r1
    1686:	08 95       	ret
    1688:	9b 01       	movw	r18, r22
    168a:	ac 01       	movw	r20, r24
    168c:	0a 2e       	mov	r0, r26
    168e:	06 94       	lsr	r0
    1690:	57 95       	ror	r21
    1692:	47 95       	ror	r20
    1694:	37 95       	ror	r19
    1696:	27 95       	ror	r18
    1698:	ba 95       	dec	r27
    169a:	c9 f7       	brne	.-14     	; 0x168e <__ultoa_invert+0xa2>
    169c:	62 0f       	add	r22, r18
    169e:	73 1f       	adc	r23, r19
    16a0:	84 1f       	adc	r24, r20
    16a2:	95 1f       	adc	r25, r21
    16a4:	a0 1d       	adc	r26, r0
    16a6:	08 95       	ret

000016a8 <__prologue_saves__>:
    16a8:	2f 92       	push	r2
    16aa:	3f 92       	push	r3
    16ac:	4f 92       	push	r4
    16ae:	5f 92       	push	r5
    16b0:	6f 92       	push	r6
    16b2:	7f 92       	push	r7
    16b4:	8f 92       	push	r8
    16b6:	9f 92       	push	r9
    16b8:	af 92       	push	r10
    16ba:	bf 92       	push	r11
    16bc:	cf 92       	push	r12
    16be:	df 92       	push	r13
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	ca 1b       	sub	r28, r26
    16d2:	db 0b       	sbc	r29, r27
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	09 94       	ijmp

000016e0 <__epilogue_restores__>:
    16e0:	2a 88       	ldd	r2, Y+18	; 0x12
    16e2:	39 88       	ldd	r3, Y+17	; 0x11
    16e4:	48 88       	ldd	r4, Y+16	; 0x10
    16e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    16e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    16ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    16ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    16ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    16f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    16f2:	b9 84       	ldd	r11, Y+9	; 0x09
    16f4:	c8 84       	ldd	r12, Y+8	; 0x08
    16f6:	df 80       	ldd	r13, Y+7	; 0x07
    16f8:	ee 80       	ldd	r14, Y+6	; 0x06
    16fa:	fd 80       	ldd	r15, Y+5	; 0x05
    16fc:	0c 81       	ldd	r16, Y+4	; 0x04
    16fe:	1b 81       	ldd	r17, Y+3	; 0x03
    1700:	aa 81       	ldd	r26, Y+2	; 0x02
    1702:	b9 81       	ldd	r27, Y+1	; 0x01
    1704:	ce 0f       	add	r28, r30
    1706:	d1 1d       	adc	r29, r1
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	ed 01       	movw	r28, r26
    1714:	08 95       	ret

00001716 <_exit>:
    1716:	f8 94       	cli

00001718 <__stop_program>:
    1718:	ff cf       	rjmp	.-2      	; 0x1718 <__stop_program>
