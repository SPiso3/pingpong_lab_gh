
ping-pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000130  00800100  0000166c  00001700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000166c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800230  00800230  00001830  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000188c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025a0  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001327  00000000  00000000  000040e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001438  00000000  00000000  00005407  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000644  00000000  00000000  00006840  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000885  00000000  00000000  00006e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001290  00000000  00000000  00007709  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00008999  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__vector_19>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__vector_23>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <__vector_19+0x5e>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ec e6       	ldi	r30, 0x6C	; 108
     37c:	f6 e1       	ldi	r31, 0x16	; 22
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a0 33       	cpi	r26, 0x30	; 48
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a0 e3       	ldi	r26, 0x30	; 48
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a4 34       	cpi	r26, 0x44	; 68
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 ac 05 	call	0xb58	; 0xb58 <main>
     39e:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_init>:
	uint8_t ret_val = 0;
	for(uint8_t i=0; (i<ADC_CHANNELS) && (i<=channel); i++){
		ret_val = adc[0x0000]; //discard first channel-1 values
	}
	return ret_val;	//return last one
}
     3a6:	87 b3       	in	r24, 0x17	; 23
     3a8:	81 60       	ori	r24, 0x01	; 1
     3aa:	87 bb       	out	0x17, r24	; 23
     3ac:	81 b3       	in	r24, 0x11	; 17
     3ae:	8f 7e       	andi	r24, 0xEF	; 239
     3b0:	81 bb       	out	0x11, r24	; 17
     3b2:	82 b3       	in	r24, 0x12	; 18
     3b4:	80 61       	ori	r24, 0x10	; 16
     3b6:	82 bb       	out	0x12, r24	; 18
     3b8:	08 95       	ret

000003ba <ADC_sample4>:
     3ba:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x11bc>
     3be:	08 95       	ret

000003c0 <ADC_is_busy>:
     3c0:	80 b3       	in	r24, 0x10	; 16
     3c2:	82 95       	swap	r24
     3c4:	81 70       	andi	r24, 0x01	; 1
     3c6:	08 95       	ret

000003c8 <ADC_read>:

uint8_t ADC_read(void){
	volatile char *adc = (char *) ADC_BASE_ADDR;
	while(!ADC_is_busy()); //wait till busy goes up
     3c8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <ADC_is_busy>
     3cc:	88 23       	and	r24, r24
     3ce:	e1 f3       	breq	.-8      	; 0x3c8 <ADC_read>
	return adc[0x0000];
     3d0:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x11bc>
     3d4:	08 95       	ret

000003d6 <CAN_init>:
#include "../include/CAN.h"


void CAN_init(){
	MCP_init(MODE_NORMAL);
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 94 03 	call	0x728	; 0x728 <MCP_init>
	
	cli();
     3dc:	f8 94       	cli
	GICR |= (1 << INT0);					// Enable INT0
     3de:	8b b7       	in	r24, 0x3b	; 59
     3e0:	80 64       	ori	r24, 0x40	; 64
     3e2:	8b bf       	out	0x3b, r24	; 59
	MCUCR &= ~((1 << ISC01)|(0 << ISC00));	// mode:00 = trigger when LOW
     3e4:	85 b7       	in	r24, 0x35	; 53
     3e6:	8d 7f       	andi	r24, 0xFD	; 253
     3e8:	85 bf       	out	0x35, r24	; 53
	DDRD &= ~(1 << PD2);
     3ea:	81 b3       	in	r24, 0x11	; 17
     3ec:	8b 7f       	andi	r24, 0xFB	; 251
     3ee:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << PD2);
     3f0:	82 b3       	in	r24, 0x12	; 18
     3f2:	84 60       	ori	r24, 0x04	; 4
     3f4:	82 bb       	out	0x12, r24	; 18
	sei();
     3f6:	78 94       	sei
     3f8:	08 95       	ret

000003fa <CAN_send>:
}

void CAN_send(message_ptr msg){
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	8c 01       	movw	r16, r24
	//set ID 
	MCP_write(MCP_TXB0SIDH, msg->id >> 3);
     402:	fc 01       	movw	r30, r24
     404:	60 81       	ld	r22, Z
     406:	71 81       	ldd	r23, Z+1	; 0x01
     408:	76 95       	lsr	r23
     40a:	67 95       	ror	r22
     40c:	76 95       	lsr	r23
     40e:	67 95       	ror	r22
     410:	76 95       	lsr	r23
     412:	67 95       	ror	r22
     414:	81 e3       	ldi	r24, 0x31	; 49
     416:	0e 94 47 03 	call	0x68e	; 0x68e <MCP_write>
	MCP_write(MCP_TXB0SIDL, (msg->id % 8) << 5);
     41a:	f8 01       	movw	r30, r16
     41c:	60 81       	ld	r22, Z
     41e:	62 95       	swap	r22
     420:	66 0f       	add	r22, r22
     422:	60 7e       	andi	r22, 0xE0	; 224
     424:	82 e3       	ldi	r24, 0x32	; 50
     426:	0e 94 47 03 	call	0x68e	; 0x68e <MCP_write>
	
	//set length
	MCP_write(MCP_TXB0DLC, msg->length);
     42a:	f8 01       	movw	r30, r16
     42c:	62 81       	ldd	r22, Z+2	; 0x02
     42e:	85 e3       	ldi	r24, 0x35	; 53
     430:	0e 94 47 03 	call	0x68e	; 0x68e <MCP_write>
	
	//store data
	for(uint8_t i = 0; i < msg->length; i++){
     434:	c0 e0       	ldi	r28, 0x00	; 0
     436:	09 c0       	rjmp	.+18     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
		MCP_write(MCP_TXB0D0 + i,msg->unsigned_data[i]);
     438:	f8 01       	movw	r30, r16
     43a:	ec 0f       	add	r30, r28
     43c:	f1 1d       	adc	r31, r1
     43e:	63 81       	ldd	r22, Z+3	; 0x03
     440:	86 e3       	ldi	r24, 0x36	; 54
     442:	8c 0f       	add	r24, r28
     444:	0e 94 47 03 	call	0x68e	; 0x68e <MCP_write>
	
	//set length
	MCP_write(MCP_TXB0DLC, msg->length);
	
	//store data
	for(uint8_t i = 0; i < msg->length; i++){
     448:	cf 5f       	subi	r28, 0xFF	; 255
     44a:	f8 01       	movw	r30, r16
     44c:	82 81       	ldd	r24, Z+2	; 0x02
     44e:	c8 17       	cp	r28, r24
     450:	98 f3       	brcs	.-26     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
		MCP_write(MCP_TXB0D0 + i,msg->unsigned_data[i]);
	}
	
	//request to send
	MCP_request_to_send(0);
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <MCP_request_to_send>
}
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
     45c:	0f 91       	pop	r16
     45e:	08 95       	ret

00000460 <CAN_receive>:

message_t CAN_receive(){
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	8c 01       	movw	r16, r24
	message_t msg = {};
     46c:	8b e0       	ldi	r24, 0x0B	; 11
     46e:	f8 01       	movw	r30, r16
     470:	11 92       	st	Z+, r1
     472:	8a 95       	dec	r24
     474:	e9 f7       	brne	.-6      	; 0x470 <CAN_receive+0x10>
		
	//get ID
	uint8_t id_low = (MCP_read(MCP_RXB0SIDL)>>5);
     476:	82 e6       	ldi	r24, 0x62	; 98
     478:	0e 94 35 03 	call	0x66a	; 0x66a <MCP_read>
     47c:	c8 2f       	mov	r28, r24
     47e:	c2 95       	swap	r28
     480:	c6 95       	lsr	r28
     482:	c7 70       	andi	r28, 0x07	; 7
	uint8_t id_high = MCP_read(MCP_RXB0SIDH);
     484:	81 e6       	ldi	r24, 0x61	; 97
     486:	0e 94 35 03 	call	0x66a	; 0x66a <MCP_read>
	msg.id = (id_high << 3) | id_low;
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	88 0f       	add	r24, r24
     48e:	99 1f       	adc	r25, r25
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	88 0f       	add	r24, r24
     496:	99 1f       	adc	r25, r25
     498:	8c 2b       	or	r24, r28
     49a:	f8 01       	movw	r30, r16
     49c:	91 83       	std	Z+1, r25	; 0x01
     49e:	80 83       	st	Z, r24
	
	//get data length 
	msg.length = MCP_read(MCP_RXB0DLC);
     4a0:	85 e6       	ldi	r24, 0x65	; 101
     4a2:	0e 94 35 03 	call	0x66a	; 0x66a <MCP_read>
     4a6:	f8 2e       	mov	r15, r24
     4a8:	f8 01       	movw	r30, r16
     4aa:	82 83       	std	Z+2, r24	; 0x02
	
	//get data
	for (int i = 0; i < msg.length; i++) {
     4ac:	c0 e0       	ldi	r28, 0x00	; 0
     4ae:	d0 e0       	ldi	r29, 0x00	; 0
     4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <CAN_receive+0x64>
		msg.unsigned_data[i] = MCP_read(MCP_RXB0D0 + i);
     4b2:	8c 2f       	mov	r24, r28
     4b4:	8a 59       	subi	r24, 0x9A	; 154
     4b6:	0e 94 35 03 	call	0x66a	; 0x66a <MCP_read>
     4ba:	f8 01       	movw	r30, r16
     4bc:	ec 0f       	add	r30, r28
     4be:	fd 1f       	adc	r31, r29
     4c0:	83 83       	std	Z+3, r24	; 0x03
	
	//get data length 
	msg.length = MCP_read(MCP_RXB0DLC);
	
	//get data
	for (int i = 0; i < msg.length; i++) {
     4c2:	21 96       	adiw	r28, 0x01	; 1
     4c4:	8f 2d       	mov	r24, r15
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	c8 17       	cp	r28, r24
     4ca:	d9 07       	cpc	r29, r25
     4cc:	94 f3       	brlt	.-28     	; 0x4b2 <CAN_receive+0x52>
		msg.unsigned_data[i] = MCP_read(MCP_RXB0D0 + i);
	}
	
	return msg;
}
     4ce:	c8 01       	movw	r24, r16
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	ff 90       	pop	r15
     4da:	08 95       	ret

000004dc <JOY_calibrate>:
	DDRD &= ~(1<<JOY_BUTTON); //busy input active low
	PORTD |= (1<<JOY_BUTTON); //pull-up resistor
	JOY_calibrate();
	}

void JOY_calibrate(){
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
	//should have already initialized XMEM, UART, ADC
	printf("\n\rcalibrating gamepad... ");
     4e6:	86 e0       	ldi	r24, 0x06	; 6
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	9f 93       	push	r25
     4ec:	8f 93       	push	r24
     4ee:	0e 94 6f 08 	call	0x10de	; 0x10de <printf>
	uint16_t x = 0;
	uint16_t y = 0;
	
	for(uint8_t i=0; i<CALIB_SAMPLES; i++){
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	c0 e0       	ldi	r28, 0x00	; 0

void JOY_calibrate(){
	//should have already initialized XMEM, UART, ADC
	printf("\n\rcalibrating gamepad... ");
	uint16_t x = 0;
	uint16_t y = 0;
     4f8:	00 e0       	ldi	r16, 0x00	; 0
     4fa:	10 e0       	ldi	r17, 0x00	; 0
	}

void JOY_calibrate(){
	//should have already initialized XMEM, UART, ADC
	printf("\n\rcalibrating gamepad... ");
	uint16_t x = 0;
     4fc:	e1 2c       	mov	r14, r1
     4fe:	f1 2c       	mov	r15, r1
	uint16_t y = 0;
	
	for(uint8_t i=0; i<CALIB_SAMPLES; i++){
     500:	0b c0       	rjmp	.+22     	; 0x518 <__stack+0x19>
		ADC_sample4();
     502:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ADC_sample4>
		y += ADC_read(); //in order: vert-horiz- ...
     506:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     50a:	08 0f       	add	r16, r24
     50c:	11 1d       	adc	r17, r1
		x += ADC_read();
     50e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     512:	e8 0e       	add	r14, r24
     514:	f1 1c       	adc	r15, r1
	//should have already initialized XMEM, UART, ADC
	printf("\n\rcalibrating gamepad... ");
	uint16_t x = 0;
	uint16_t y = 0;
	
	for(uint8_t i=0; i<CALIB_SAMPLES; i++){
     516:	cf 5f       	subi	r28, 0xFF	; 255
     518:	c8 30       	cpi	r28, 0x08	; 8
     51a:	98 f3       	brcs	.-26     	; 0x502 <__stack+0x3>
		ADC_sample4();
		y += ADC_read(); //in order: vert-horiz- ...
		x += ADC_read();
	}
	y /= CALIB_SAMPLES;
     51c:	16 95       	lsr	r17
     51e:	07 95       	ror	r16
     520:	16 95       	lsr	r17
     522:	07 95       	ror	r16
     524:	16 95       	lsr	r17
     526:	07 95       	ror	r16
	x /= CALIB_SAMPLES;
     528:	f6 94       	lsr	r15
     52a:	e7 94       	ror	r14
     52c:	f6 94       	lsr	r15
     52e:	e7 94       	ror	r14
     530:	f6 94       	lsr	r15
     532:	e7 94       	ror	r14
	
	printf("done. CENTER = [%d,%d]\n\r",x,y);
     534:	1f 93       	push	r17
     536:	0f 93       	push	r16
     538:	ff 92       	push	r15
     53a:	ef 92       	push	r14
     53c:	80 e2       	ldi	r24, 0x20	; 32
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	9f 93       	push	r25
     542:	8f 93       	push	r24
     544:	0e 94 6f 08 	call	0x10de	; 0x10de <printf>
	gamepad_center.x = x;
     548:	e1 e3       	ldi	r30, 0x31	; 49
     54a:	f2 e0       	ldi	r31, 0x02	; 2
     54c:	f1 82       	std	Z+1, r15	; 0x01
     54e:	e0 82       	st	Z, r14
	gamepad_center.y = y;
     550:	13 83       	std	Z+3, r17	; 0x03
     552:	02 83       	std	Z+2, r16	; 0x02
}
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	08 95       	ret

0000056c <JOY_init>:
#include "../include/gamepad.h"
#include "../../misc/utils.h"
extern pos_t gamepad_center;

void JOY_init(){
	DDRD &= ~(1<<JOY_BUTTON); //busy input active low
     56c:	81 b3       	in	r24, 0x11	; 17
     56e:	8f 7d       	andi	r24, 0xDF	; 223
     570:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<JOY_BUTTON); //pull-up resistor
     572:	82 b3       	in	r24, 0x12	; 18
     574:	80 62       	ori	r24, 0x20	; 32
     576:	82 bb       	out	0x12, r24	; 18
	JOY_calibrate();
     578:	0e 94 6e 02 	call	0x4dc	; 0x4dc <JOY_calibrate>
     57c:	08 95       	ret

0000057e <JOY_get_rel_pos>:
	printf("done. CENTER = [%d,%d]\n\r",x,y);
	gamepad_center.x = x;
	gamepad_center.y = y;
}

pos_t JOY_get_rel_pos(){
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
	ADC_sample4();
     586:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ADC_sample4>
	int16_t y = ADC_read() - gamepad_center.y;
     58a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     58e:	08 2f       	mov	r16, r24
     590:	10 e0       	ldi	r17, 0x00	; 0
     592:	c1 e3       	ldi	r28, 0x31	; 49
     594:	d2 e0       	ldi	r29, 0x02	; 2
     596:	8a 81       	ldd	r24, Y+2	; 0x02
     598:	9b 81       	ldd	r25, Y+3	; 0x03
     59a:	08 1b       	sub	r16, r24
     59c:	19 0b       	sbc	r17, r25
	int16_t x = ADC_read() - gamepad_center.x;
     59e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_read>
     5a2:	28 2f       	mov	r18, r24
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	09 90       	ld	r0, Y+
     5a8:	d8 81       	ld	r29, Y
     5aa:	c0 2d       	mov	r28, r0
     5ac:	2c 1b       	sub	r18, r28
     5ae:	3d 0b       	sbc	r19, r29

	y = y * POS_SCALE / ((y > 0) ? (255-gamepad_center.y) : (0+gamepad_center.y));
     5b0:	c8 01       	movw	r24, r16
     5b2:	96 95       	lsr	r25
     5b4:	98 2f       	mov	r25, r24
     5b6:	88 27       	eor	r24, r24
     5b8:	97 95       	ror	r25
     5ba:	87 95       	ror	r24
     5bc:	80 1b       	sub	r24, r16
     5be:	91 0b       	sbc	r25, r17
     5c0:	10 16       	cp	r1, r16
     5c2:	11 06       	cpc	r1, r17
     5c4:	4c f4       	brge	.+18     	; 0x5d8 <JOY_get_rel_pos+0x5a>
     5c6:	40 91 33 02 	lds	r20, 0x0233	; 0x800233 <gamepad_center+0x2>
     5ca:	50 91 34 02 	lds	r21, 0x0234	; 0x800234 <gamepad_center+0x3>
     5ce:	6f ef       	ldi	r22, 0xFF	; 255
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	64 1b       	sub	r22, r20
     5d4:	75 0b       	sbc	r23, r21
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <JOY_get_rel_pos+0x62>
     5d8:	60 91 33 02 	lds	r22, 0x0233	; 0x800233 <gamepad_center+0x2>
     5dc:	70 91 34 02 	lds	r23, 0x0234	; 0x800234 <gamepad_center+0x3>
     5e0:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__divmodhi4>
     5e4:	16 2f       	mov	r17, r22
     5e6:	47 2f       	mov	r20, r23
     5e8:	e6 2f       	mov	r30, r22
     5ea:	f7 2f       	mov	r31, r23
	x = x * POS_SCALE / ((x > 0) ? (255-gamepad_center.x) : (0+gamepad_center.x));
     5ec:	c9 01       	movw	r24, r18
     5ee:	96 95       	lsr	r25
     5f0:	98 2f       	mov	r25, r24
     5f2:	88 27       	eor	r24, r24
     5f4:	97 95       	ror	r25
     5f6:	87 95       	ror	r24
     5f8:	82 1b       	sub	r24, r18
     5fa:	93 0b       	sbc	r25, r19
     5fc:	12 16       	cp	r1, r18
     5fe:	13 06       	cpc	r1, r19
     600:	34 f4       	brge	.+12     	; 0x60e <JOY_get_rel_pos+0x90>
     602:	2f ef       	ldi	r18, 0xFF	; 255
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	b9 01       	movw	r22, r18
     608:	6c 1b       	sub	r22, r28
     60a:	7d 0b       	sbc	r23, r29
     60c:	eb 01       	movw	r28, r22
     60e:	be 01       	movw	r22, r28
     610:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__divmodhi4>
     614:	86 2f       	mov	r24, r22
     616:	97 2f       	mov	r25, r23
	
	
	y = MAX(-POS_SCALE,MIN(y,POS_SCALE));
     618:	e2 38       	cpi	r30, 0x82	; 130
     61a:	ff 4f       	sbci	r31, 0xFF	; 255
     61c:	44 f0       	brlt	.+16     	; 0x62e <JOY_get_rel_pos+0xb0>
     61e:	21 2f       	mov	r18, r17
     620:	34 2f       	mov	r19, r20
     622:	20 38       	cpi	r18, 0x80	; 128
     624:	31 05       	cpc	r19, r1
     626:	2c f0       	brlt	.+10     	; 0x632 <JOY_get_rel_pos+0xb4>
     628:	2f e7       	ldi	r18, 0x7F	; 127
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	02 c0       	rjmp	.+4      	; 0x632 <JOY_get_rel_pos+0xb4>
     62e:	21 e8       	ldi	r18, 0x81	; 129
     630:	3f ef       	ldi	r19, 0xFF	; 255
	x = MAX(-POS_SCALE,MIN(x,POS_SCALE));
     632:	82 38       	cpi	r24, 0x82	; 130
     634:	9f 4f       	sbci	r25, 0xFF	; 255
     636:	44 f0       	brlt	.+16     	; 0x648 <JOY_get_rel_pos+0xca>
     638:	46 2f       	mov	r20, r22
     63a:	57 2f       	mov	r21, r23
     63c:	40 38       	cpi	r20, 0x80	; 128
     63e:	51 05       	cpc	r21, r1
     640:	2c f0       	brlt	.+10     	; 0x64c <JOY_get_rel_pos+0xce>
     642:	4f e7       	ldi	r20, 0x7F	; 127
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	02 c0       	rjmp	.+4      	; 0x64c <JOY_get_rel_pos+0xce>
     648:	41 e8       	ldi	r20, 0x81	; 129
     64a:	5f ef       	ldi	r21, 0xFF	; 255
	
	return (pos_t){x, y};
     64c:	ba 01       	movw	r22, r20
     64e:	c9 01       	movw	r24, r18
}
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	08 95       	ret

0000065a <MCP_reset>:
	SPI_send(MCP_READ_STATUS);
	char data = SPI_receive();
	
	SPI_SS_high();
	return data;
}
     65a:	0e 94 2b 05 	call	0xa56	; 0xa56 <SPI_SS_low>
     65e:	80 ec       	ldi	r24, 0xC0	; 192
     660:	0e 94 12 05 	call	0xa24	; 0xa24 <SPI_send>
     664:	0e 94 1b 05 	call	0xa36	; 0xa36 <SPI_SS_high>
     668:	08 95       	ret

0000066a <MCP_read>:
     66a:	cf 93       	push	r28
     66c:	c8 2f       	mov	r28, r24
     66e:	0e 94 2b 05 	call	0xa56	; 0xa56 <SPI_SS_low>
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	0e 94 12 05 	call	0xa24	; 0xa24 <SPI_send>
     678:	8c 2f       	mov	r24, r28
     67a:	0e 94 12 05 	call	0xa24	; 0xa24 <SPI_send>
     67e:	0e 94 16 05 	call	0xa2c	; 0xa2c <SPI_receive>
     682:	c8 2f       	mov	r28, r24
     684:	0e 94 1b 05 	call	0xa36	; 0xa36 <SPI_SS_high>
     688:	8c 2f       	mov	r24, r28
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <MCP_write>:
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	d8 2f       	mov	r29, r24
     694:	c6 2f       	mov	r28, r22
     696:	0e 94 2b 05 	call	0xa56	; 0xa56 <SPI_SS_low>
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	0e 94 12 05 	call	0xa24	; 0xa24 <SPI_send>
     6a0:	8d 2f       	mov	r24, r29
     6a2:	0e 94 12 05 	call	0xa24	; 0xa24 <SPI_send>
     6a6:	8c 2f       	mov	r24, r28
     6a8:	0e 94 12 05 	call	0xa24	; 0xa24 <SPI_send>
     6ac:	0e 94 1b 05 	call	0xa36	; 0xa36 <SPI_SS_high>
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret

000006b6 <MCP_request_to_send>:
     6b6:	cf 93       	push	r28
     6b8:	c8 2f       	mov	r28, r24
     6ba:	0e 94 2b 05 	call	0xa56	; 0xa56 <SPI_SS_low>
     6be:	8b ea       	ldi	r24, 0xAB	; 171
     6c0:	c8 9f       	mul	r28, r24
     6c2:	81 2d       	mov	r24, r1
     6c4:	11 24       	eor	r1, r1
     6c6:	86 95       	lsr	r24
     6c8:	98 2f       	mov	r25, r24
     6ca:	99 0f       	add	r25, r25
     6cc:	89 0f       	add	r24, r25
     6ce:	c8 1b       	sub	r28, r24
     6d0:	31 f0       	breq	.+12     	; 0x6de <MCP_request_to_send+0x28>
     6d2:	c1 30       	cpi	r28, 0x01	; 1
     6d4:	31 f0       	breq	.+12     	; 0x6e2 <MCP_request_to_send+0x2c>
     6d6:	c2 30       	cpi	r28, 0x02	; 2
     6d8:	31 f0       	breq	.+12     	; 0x6e6 <MCP_request_to_send+0x30>
     6da:	81 e8       	ldi	r24, 0x81	; 129
     6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <MCP_request_to_send+0x32>
     6de:	81 e8       	ldi	r24, 0x81	; 129
     6e0:	03 c0       	rjmp	.+6      	; 0x6e8 <MCP_request_to_send+0x32>
     6e2:	82 e8       	ldi	r24, 0x82	; 130
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <MCP_request_to_send+0x32>
     6e6:	84 e8       	ldi	r24, 0x84	; 132
     6e8:	0e 94 12 05 	call	0xa24	; 0xa24 <SPI_send>
     6ec:	0e 94 1b 05 	call	0xa36	; 0xa36 <SPI_SS_high>
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <MCP_bit_modify>:

void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data) {
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	18 2f       	mov	r17, r24
     6fc:	d6 2f       	mov	r29, r22
     6fe:	c4 2f       	mov	r28, r20
	SPI_SS_low();
     700:	0e 94 2b 05 	call	0xa56	; 0xa56 <SPI_SS_low>
	
	SPI_send(MCP_BITMOD);
     704:	85 e0       	ldi	r24, 0x05	; 5
     706:	0e 94 12 05 	call	0xa24	; 0xa24 <SPI_send>
	SPI_send(address);
     70a:	81 2f       	mov	r24, r17
     70c:	0e 94 12 05 	call	0xa24	; 0xa24 <SPI_send>
	SPI_send(mask);
     710:	8d 2f       	mov	r24, r29
     712:	0e 94 12 05 	call	0xa24	; 0xa24 <SPI_send>
	SPI_send(data);
     716:	8c 2f       	mov	r24, r28
     718:	0e 94 12 05 	call	0xa24	; 0xa24 <SPI_send>
	
	SPI_SS_high();
     71c:	0e 94 1b 05 	call	0xa36	; 0xa36 <SPI_SS_high>
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	08 95       	ret

00000728 <MCP_init>:
#include "../include/MCP.h"

void MCP_init(uint8_t mode){
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	d8 2f       	mov	r29, r24
	SPI_master_init();
     72e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <SPI_master_init>
	MCP_reset();
     732:	0e 94 2d 03 	call	0x65a	; 0x65a <MCP_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     736:	8f ef       	ldi	r24, 0xFF	; 255
     738:	9f e2       	ldi	r25, 0x2F	; 47
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <MCP_init+0x12>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <MCP_init+0x18>
     740:	00 00       	nop
	_delay_ms(10);
	
	// Self-test
	uint8_t val = MCP_read(MCP_CANSTAT);
     742:	8e e0       	ldi	r24, 0x0E	; 14
     744:	0e 94 35 03 	call	0x66a	; 0x66a <MCP_read>
     748:	c8 2f       	mov	r28, r24
	if((val & MODE_MASK) != MODE_CONFIG) {
     74a:	80 7e       	andi	r24, 0xE0	; 224
     74c:	80 38       	cpi	r24, 0x80	; 128
     74e:	d9 f0       	breq	.+54     	; 0x786 <MCP_init+0x5e>
		printf("\nMCP2515 is NOT in configuration mode after reset!\n\r");
     750:	89 e3       	ldi	r24, 0x39	; 57
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	9f 93       	push	r25
     756:	8f 93       	push	r24
     758:	0e 94 6f 08 	call	0x10de	; 0x10de <printf>
		printf("read value: %x should be: %x\n\r", val, MODE_CONFIG);
     75c:	1f 92       	push	r1
     75e:	80 e8       	ldi	r24, 0x80	; 128
     760:	8f 93       	push	r24
     762:	1f 92       	push	r1
     764:	cf 93       	push	r28
     766:	8e e6       	ldi	r24, 0x6E	; 110
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	9f 93       	push	r25
     76c:	8f 93       	push	r24
     76e:	0e 94 6f 08 	call	0x10de	; 0x10de <printf>
		return;
     772:	2d b7       	in	r18, 0x3d	; 61
     774:	3e b7       	in	r19, 0x3e	; 62
     776:	28 5f       	subi	r18, 0xF8	; 248
     778:	3f 4f       	sbci	r19, 0xFF	; 255
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	3e bf       	out	0x3e, r19	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	2d bf       	out	0x3d, r18	; 61
     784:	6c c0       	rjmp	.+216    	; 0x85e <MCP_init+0x136>
	}
	
	printf("\nMCP2515 is in configuration mode...\n\r");
     786:	8d e8       	ldi	r24, 0x8D	; 141
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	9f 93       	push	r25
     78c:	8f 93       	push	r24
     78e:	0e 94 6f 08 	call	0x10de	; 0x10de <printf>
	//@125kbps - 16TQ = tbit
	MCP_write(MCP_CNF1, 0b11000011); //SJW = 3 | BRP = 3MCP_write(MCP_CNF1, 0b11000011); //SJW = 3 | BRP = 3
     792:	63 ec       	ldi	r22, 0xC3	; 195
     794:	8a e2       	ldi	r24, 0x2A	; 42
     796:	0e 94 47 03 	call	0x68e	; 0x68e <MCP_write>
	MCP_write(MCP_CNF2, 0b10110001); //10 | PH1 = 7(-1) | PROP = 2(-1)
     79a:	61 eb       	ldi	r22, 0xB1	; 177
     79c:	89 e2       	ldi	r24, 0x29	; 41
     79e:	0e 94 47 03 	call	0x68e	; 0x68e <MCP_write>
	MCP_write(MCP_CNF3, 0b00000101); //00 | XXX | PH2 = 6(-1)
     7a2:	65 e0       	ldi	r22, 0x05	; 5
     7a4:	88 e2       	ldi	r24, 0x28	; 40
     7a6:	0e 94 47 03 	call	0x68e	; 0x68e <MCP_write>
	
	printf("CNF1: %x\n\r", MCP_read(MCP_CNF1));
     7aa:	8a e2       	ldi	r24, 0x2A	; 42
     7ac:	0e 94 35 03 	call	0x66a	; 0x66a <MCP_read>
     7b0:	1f 92       	push	r1
     7b2:	8f 93       	push	r24
     7b4:	84 eb       	ldi	r24, 0xB4	; 180
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	9f 93       	push	r25
     7ba:	8f 93       	push	r24
     7bc:	0e 94 6f 08 	call	0x10de	; 0x10de <printf>
	printf("CNF2: %x\n\r", MCP_read(MCP_CNF2));
     7c0:	89 e2       	ldi	r24, 0x29	; 41
     7c2:	0e 94 35 03 	call	0x66a	; 0x66a <MCP_read>
     7c6:	1f 92       	push	r1
     7c8:	8f 93       	push	r24
     7ca:	8f eb       	ldi	r24, 0xBF	; 191
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	9f 93       	push	r25
     7d0:	8f 93       	push	r24
     7d2:	0e 94 6f 08 	call	0x10de	; 0x10de <printf>
	printf("CNF3: %x\n\r", MCP_read(MCP_CNF3));
     7d6:	88 e2       	ldi	r24, 0x28	; 40
     7d8:	0e 94 35 03 	call	0x66a	; 0x66a <MCP_read>
     7dc:	1f 92       	push	r1
     7de:	8f 93       	push	r24
     7e0:	8a ec       	ldi	r24, 0xCA	; 202
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	9f 93       	push	r25
     7e6:	8f 93       	push	r24
     7e8:	0e 94 6f 08 	call	0x10de	; 0x10de <printf>
	
	MCP_bit_modify(MCP_CANINTE, 0xFF, MCP_RX0IF); //enable ONLY rx interrupt on buffer 0
     7ec:	41 e0       	ldi	r20, 0x01	; 1
     7ee:	6f ef       	ldi	r22, 0xFF	; 255
     7f0:	8b e2       	ldi	r24, 0x2B	; 43
     7f2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MCP_bit_modify>
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, mode); //set mode
     7f6:	4d 2f       	mov	r20, r29
     7f8:	60 ee       	ldi	r22, 0xE0	; 224
     7fa:	8f e0       	ldi	r24, 0x0F	; 15
     7fc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MCP_bit_modify>
	
	val = MCP_read(MCP_CANSTAT);
     800:	8e e0       	ldi	r24, 0x0E	; 14
     802:	0e 94 35 03 	call	0x66a	; 0x66a <MCP_read>
     806:	c8 2f       	mov	r28, r24
	if((val & MODE_MASK) != mode) {
     808:	80 7e       	andi	r24, 0xE0	; 224
     80a:	2d b7       	in	r18, 0x3d	; 61
     80c:	3e b7       	in	r19, 0x3e	; 62
     80e:	22 5f       	subi	r18, 0xF2	; 242
     810:	3f 4f       	sbci	r19, 0xFF	; 255
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	3e bf       	out	0x3e, r19	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	2d bf       	out	0x3d, r18	; 61
     81c:	8d 17       	cp	r24, r29
     81e:	c9 f0       	breq	.+50     	; 0x852 <MCP_init+0x12a>
		printf("\nMCP2515 is NOT in DESIRED (loopback or normal)\n\r");
     820:	85 ed       	ldi	r24, 0xD5	; 213
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	9f 93       	push	r25
     826:	8f 93       	push	r24
     828:	0e 94 6f 08 	call	0x10de	; 0x10de <printf>
		printf("read value: %x should be: %x\n\r", val, mode);
     82c:	1f 92       	push	r1
     82e:	df 93       	push	r29
     830:	1f 92       	push	r1
     832:	cf 93       	push	r28
     834:	8e e6       	ldi	r24, 0x6E	; 110
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	9f 93       	push	r25
     83a:	8f 93       	push	r24
     83c:	0e 94 6f 08 	call	0x10de	; 0x10de <printf>
		return;
     840:	8d b7       	in	r24, 0x3d	; 61
     842:	9e b7       	in	r25, 0x3e	; 62
     844:	08 96       	adiw	r24, 0x08	; 8
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	9e bf       	out	0x3e, r25	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	8d bf       	out	0x3d, r24	; 61
     850:	06 c0       	rjmp	.+12     	; 0x85e <MCP_init+0x136>
     852:	8f ef       	ldi	r24, 0xFF	; 255
     854:	9f e2       	ldi	r25, 0x2F	; 47
     856:	01 97       	sbiw	r24, 0x01	; 1
     858:	f1 f7       	brne	.-4      	; 0x856 <MCP_init+0x12e>
     85a:	00 c0       	rjmp	.+0      	; 0x85c <MCP_init+0x134>
     85c:	00 00       	nop
	}
	
	_delay_ms(10);
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <OLED_write_cmd>:
	OLED_goto_pos(0,0);
}

void OLED_invert() {
	OLED_INVERTED ? OLED_write_cmd(0xA6) : OLED_write_cmd(0xA7); //normal : inverted
	OLED_INVERTED = !OLED_INVERTED;
     864:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xdbc>
     868:	08 95       	ret

0000086a <OLED_goto_row>:
     86a:	80 55       	subi	r24, 0x50	; 80
     86c:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
     870:	08 95       	ret

00000872 <OLED_goto_col>:
     872:	cf 93       	push	r28
     874:	c8 2f       	mov	r28, r24
     876:	8f 70       	andi	r24, 0x0F	; 15
     878:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
     87c:	8c 2f       	mov	r24, r28
     87e:	82 95       	swap	r24
     880:	8f 70       	andi	r24, 0x0F	; 15
     882:	80 61       	ori	r24, 0x10	; 16
     884:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
     888:	cf 91       	pop	r28
     88a:	08 95       	ret

0000088c <OLED_goto_pos>:
     88c:	cf 93       	push	r28
     88e:	c6 2f       	mov	r28, r22
     890:	0e 94 35 04 	call	0x86a	; 0x86a <OLED_goto_row>
     894:	8c 2f       	mov	r24, r28
     896:	0e 94 39 04 	call	0x872	; 0x872 <OLED_goto_col>
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <OLED_restrict_cols>:
}

void OLED_restrict_cols(uint8_t init_col, uint8_t end_col) {
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	d8 2f       	mov	r29, r24
     8a4:	c6 2f       	mov	r28, r22
	OLED_write_cmd(0x21);
     8a6:	81 e2       	ldi	r24, 0x21	; 33
     8a8:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(init_col);
     8ac:	8d 2f       	mov	r24, r29
     8ae:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(end_col);
     8b2:	8c 2f       	mov	r24, r28
     8b4:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <OLED_restrict_pages>:

void OLED_restrict_pages(uint8_t init_page, uint8_t end_page) {
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	d8 2f       	mov	r29, r24
     8c4:	c6 2f       	mov	r28, r22
	OLED_write_cmd(0x22);
     8c6:	82 e2       	ldi	r24, 0x22	; 34
     8c8:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(init_page);
     8cc:	8d 2f       	mov	r24, r29
     8ce:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(end_page);
     8d2:	8c 2f       	mov	r24, r28
     8d4:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <OLED_write_data>:
	volatile char *ext_mem = (char *) OLED_CMD_ADDR;
	ext_mem[0x0000] = cmd;
}
void OLED_write_data(uint8_t data){
	volatile char *ext_mem = (char *) OLED_DATA_ADDR;
	ext_mem[0x0000] = data;
     8de:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xfbc>
     8e2:	08 95       	ret

000008e4 <OLED_clear_row>:
	return (oled_pos_t){col, row, bit};
}

//--clearing

void OLED_clear_row(uint8_t row) {
     8e4:	cf 93       	push	r28
	OLED_goto_pos(row,0);
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 46 04 	call	0x88c	; 0x88c <OLED_goto_pos>
	for (uint8_t col = 0; col < 128; col++) {
     8ec:	c0 e0       	ldi	r28, 0x00	; 0
     8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <OLED_clear_row+0x14>
		OLED_write_data(0x00);
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	0e 94 6f 04 	call	0x8de	; 0x8de <OLED_write_data>

//--clearing

void OLED_clear_row(uint8_t row) {
	OLED_goto_pos(row,0);
	for (uint8_t col = 0; col < 128; col++) {
     8f6:	cf 5f       	subi	r28, 0xFF	; 255
     8f8:	cc 23       	and	r28, r28
     8fa:	d4 f7       	brge	.-12     	; 0x8f0 <OLED_clear_row+0xc>
		OLED_write_data(0x00);
	}
}
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <OLED_clear>:
void OLED_clear(){
     900:	cf 93       	push	r28
	//OLED_restrict_cols(0,127);
	//OLED_restrict_pages(0,7);
	for (uint8_t page = 0; page < 8; page++) {
     902:	c0 e0       	ldi	r28, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <OLED_clear+0xe>
		OLED_clear_row(page);
     906:	8c 2f       	mov	r24, r28
     908:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_clear_row>
	}
}
void OLED_clear(){
	//OLED_restrict_cols(0,127);
	//OLED_restrict_pages(0,7);
	for (uint8_t page = 0; page < 8; page++) {
     90c:	cf 5f       	subi	r28, 0xFF	; 255
     90e:	c8 30       	cpi	r28, 0x08	; 8
     910:	d0 f3       	brcs	.-12     	; 0x906 <OLED_clear+0x6>
		OLED_clear_row(page);
	}
}
     912:	cf 91       	pop	r28
     914:	08 95       	ret

00000916 <OLED_reset>:

//--utilities

void OLED_reset() {
	OLED_clear();
     916:	0e 94 80 04 	call	0x900	; 0x900 <OLED_clear>
	OLED_restrict_cols(0,127);
     91a:	6f e7       	ldi	r22, 0x7F	; 127
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	0e 94 4f 04 	call	0x89e	; 0x89e <OLED_restrict_cols>
	OLED_restrict_pages(0,7);
     922:	67 e0       	ldi	r22, 0x07	; 7
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 5f 04 	call	0x8be	; 0x8be <OLED_restrict_pages>
	OLED_goto_pos(0,0);
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	0e 94 46 04 	call	0x88c	; 0x88c <OLED_goto_pos>
     932:	08 95       	ret

00000934 <OLED_init>:
//printf redirection
FILE *oled_output;
bool OLED_INVERTED = false;

void OLED_init(){
	OLED_write_cmd(0xAE);    //OFF
     934:	8e ea       	ldi	r24, 0xAE	; 174
     936:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	
	//!!! DONT TOUCH THESE SETTINGS !!! --------- (from datasheet)
	OLED_write_cmd(0xa1);    //segment remap
     93a:	81 ea       	ldi	r24, 0xA1	; 161
     93c:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0xda);    //common pads hardware: alternative
     940:	8a ed       	ldi	r24, 0xDA	; 218
     942:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0x12);
     946:	82 e1       	ldi	r24, 0x12	; 18
     948:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0xc8);    //common output scan direction:com63~com0
     94c:	88 ec       	ldi	r24, 0xC8	; 200
     94e:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0xa8);    //multiplex ration mode:63
     952:	88 ea       	ldi	r24, 0xA8	; 168
     954:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0x3f);
     958:	8f e3       	ldi	r24, 0x3F	; 63
     95a:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0xd5);    //display divide ratio/osc. freq. mode
     95e:	85 ed       	ldi	r24, 0xD5	; 213
     960:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0x80);
     964:	80 e8       	ldi	r24, 0x80	; 128
     966:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0xd9);	 //set pre-charge period
     96a:	89 ed       	ldi	r24, 0xD9	; 217
     96c:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0x21);
     970:	81 e2       	ldi	r24, 0x21	; 33
     972:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0xdb);    //VCOM deselect level mode
     976:	8b ed       	ldi	r24, 0xDB	; 219
     978:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0x30);
     97c:	80 e3       	ldi	r24, 0x30	; 48
     97e:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0xad);    //master configuration
     982:	8d ea       	ldi	r24, 0xAD	; 173
     984:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0x00);
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	//-------------------------------------------	
	
	OLED_write_cmd(0xD3);	//set display offset
     98e:	83 ed       	ldi	r24, 0xD3	; 211
     990:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0x00);	
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0x40);
     99a:	80 e4       	ldi	r24, 0x40	; 64
     99c:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	
	OLED_write_cmd(0x20);   //Set Memory Addressing Mode
     9a0:	80 e2       	ldi	r24, 0x20	; 32
     9a2:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0b00);	//PAGE addressing mode => HORIZ -- all auto
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	
	OLED_write_cmd(0x81);   //contrast control
     9ac:	81 e8       	ldi	r24, 0x81	; 129
     9ae:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0xFF);	//contr lvl : 0-255
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	
	OLED_write_cmd(0xA6);    //A6 = normal B&W (A7 = inverse W&B)
     9b8:	86 ea       	ldi	r24, 0xA6	; 166
     9ba:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0xA4);    //resume GDDRAM content (A5 = blank screen ON)
     9be:	84 ea       	ldi	r24, 0xA4	; 164
     9c0:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	OLED_write_cmd(0xAF);    //ON
     9c4:	8f ea       	ldi	r24, 0xAF	; 175
     9c6:	0e 94 32 04 	call	0x864	; 0x864 <OLED_write_cmd>
	
	oled_output = fdevopen(OLED_putchar8, NULL);
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	8d e0       	ldi	r24, 0x0D	; 13
     9d0:	95 e0       	ldi	r25, 0x05	; 5
     9d2:	0e 94 a2 07 	call	0xf44	; 0xf44 <fdevopen>
     9d6:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <oled_output+0x1>
     9da:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <oled_output>
	OLED_reset();
     9de:	0e 94 8b 04 	call	0x916	; 0x916 <OLED_reset>
     9e2:	08 95       	ret

000009e4 <OLED_print_8char>:
	OLED_write_cmd(end_page);
}

//----

void OLED_print_8char(char c){
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
	c = c - 32;
     9e8:	d0 ee       	ldi	r29, 0xE0	; 224
     9ea:	d8 0f       	add	r29, r24
	for (uint8_t i=0; i<8; i++){
     9ec:	c0 e0       	ldi	r28, 0x00	; 0
     9ee:	10 c0       	rjmp	.+32     	; 0xa10 <OLED_print_8char+0x2c>
		unsigned char byte = pgm_read_byte(&font8[(uint8_t)c][i]);
     9f0:	ed 2f       	mov	r30, r29
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	ee 0f       	add	r30, r30
     9f6:	ff 1f       	adc	r31, r31
     9f8:	ee 0f       	add	r30, r30
     9fa:	ff 1f       	adc	r31, r31
     9fc:	ee 0f       	add	r30, r30
     9fe:	ff 1f       	adc	r31, r31
     a00:	ec 0f       	add	r30, r28
     a02:	f1 1d       	adc	r31, r1
     a04:	e0 59       	subi	r30, 0x90	; 144
     a06:	ff 4f       	sbci	r31, 0xFF	; 255
     a08:	84 91       	lpm	r24, Z
		OLED_write_data((uint8_t)byte);
     a0a:	0e 94 6f 04 	call	0x8de	; 0x8de <OLED_write_data>

//----

void OLED_print_8char(char c){
	c = c - 32;
	for (uint8_t i=0; i<8; i++){
     a0e:	cf 5f       	subi	r28, 0xFF	; 255
     a10:	c8 30       	cpi	r28, 0x08	; 8
     a12:	70 f3       	brcs	.-36     	; 0x9f0 <OLED_print_8char+0xc>
		unsigned char byte = pgm_read_byte(&font8[(uint8_t)c][i]);
		OLED_write_data((uint8_t)byte);
	}
}
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <OLED_putchar8>:
int OLED_putchar8(char c, FILE *stream){
	OLED_print_8char(c);
     a1a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <OLED_print_8char>
	return 0;
}
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	08 95       	ret

00000a24 <SPI_send>:
	SPI_SS_high(); // !SS to 1 
}

void SPI_send(uint8_t data){ 
	//remember to set SS low before calling
	SPDR = data;
     a24:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))){} //Wait for transmission complete
     a26:	77 9b       	sbis	0x0e, 7	; 14
     a28:	fe cf       	rjmp	.-4      	; 0xa26 <SPI_send+0x2>
}
     a2a:	08 95       	ret

00000a2c <SPI_receive>:

uint8_t SPI_receive() {
	SPI_send(0xAA);		//send dummy
     a2c:	8a ea       	ldi	r24, 0xAA	; 170
     a2e:	0e 94 12 05 	call	0xa24	; 0xa24 <SPI_send>
	return SPDR;		// Return data register
     a32:	8f b1       	in	r24, 0x0f	; 15
}
     a34:	08 95       	ret

00000a36 <SPI_SS_high>:

void SPI_SS_high(){
	PORT_SPI |= (1 << SS);
     a36:	88 b3       	in	r24, 0x18	; 24
     a38:	80 61       	ori	r24, 0x10	; 16
     a3a:	88 bb       	out	0x18, r24	; 24
     a3c:	08 95       	ret

00000a3e <SPI_master_init>:
#include "../include/SPI.h"

void SPI_master_init(){
	// Set MOSI, SCK and !SS output
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SS);
     a3e:	87 b3       	in	r24, 0x17	; 23
     a40:	80 6b       	ori	r24, 0xB0	; 176
     a42:	87 bb       	out	0x17, r24	; 23
	
	// Enable SPI, Master, set clock rate fck/16, TODO? enable interrupts
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//|(1<<SPIE);
     a44:	8d b1       	in	r24, 0x0d	; 13
     a46:	81 65       	ori	r24, 0x51	; 81
     a48:	8d b9       	out	0x0d, r24	; 13
	SPCR &= ~((1 << CPOL) | (1 << CPHA)); // explicitly setting mode 00
     a4a:	8d b1       	in	r24, 0x0d	; 13
     a4c:	83 7f       	andi	r24, 0xF3	; 243
     a4e:	8d b9       	out	0x0d, r24	; 13
	SPI_SS_high(); // !SS to 1 
     a50:	0e 94 1b 05 	call	0xa36	; 0xa36 <SPI_SS_high>
     a54:	08 95       	ret

00000a56 <SPI_SS_low>:
void SPI_SS_high(){
	PORT_SPI |= (1 << SS);
}

void SPI_SS_low(){
	PORT_SPI &= ~(1 << SS);
     a56:	88 b3       	in	r24, 0x18	; 24
     a58:	8f 7e       	andi	r24, 0xEF	; 239
     a5a:	88 bb       	out	0x18, r24	; 24
     a5c:	08 95       	ret

00000a5e <UART_init>:

//--------

void UART_init(unsigned int ubrr) {

	cli(); //disable interrupts
     a5e:	f8 94       	cli

	UBRR0H = (unsigned char)(ubrr>>8);	//set baud rate
     a60:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     a62:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<TXCIE0) | (1<<RXCIE0);  //enable RX,TX and TXC,RXC interrupts
     a64:	88 ed       	ldi	r24, 0xD8	; 216
     a66:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3<<UCSZ00); //frame format: 8 data bits, 2 stop bit, parity: none
     a68:	8e e8       	ldi	r24, 0x8E	; 142
     a6a:	80 bd       	out	0x20, r24	; 32
	
	uart_output = fdevopen(UART_putchar, NULL);
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	82 e6       	ldi	r24, 0x62	; 98
     a72:	95 e0       	ldi	r25, 0x05	; 5
     a74:	0e 94 a2 07 	call	0xf44	; 0xf44 <fdevopen>
     a78:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <uart_output+0x1>
     a7c:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <uart_output>
	stdout = uart_output;
     a80:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <__iob+0x3>
     a84:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__iob+0x2>
	
	sei();  //re-enable global interrupt
     a88:	78 94       	sei
	
	//set led pins
	DDRB |= (1<<TXLED) | (1<<RXLED);	//direction: output
     a8a:	87 b3       	in	r24, 0x17	; 23
     a8c:	86 60       	ori	r24, 0x06	; 6
     a8e:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<TXLED) | (1<<RXLED);	//turn them off (sink-mode)
     a90:	88 b3       	in	r24, 0x18	; 24
     a92:	86 60       	ori	r24, 0x06	; 6
     a94:	88 bb       	out	0x18, r24	; 24
     a96:	08 95       	ret

00000a98 <__vector_23>:
}

//-------- TRANSMISSION -----------

ISR(USART0_TXC_vect) {
     a98:	1f 92       	push	r1
     a9a:	0f 92       	push	r0
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	0f 92       	push	r0
     aa0:	11 24       	eor	r1, r1
     aa2:	8f 93       	push	r24
     aa4:	9f 93       	push	r25
	PORTB ^= (1<<TXLED); //blink as response of successful transmission
     aa6:	98 b3       	in	r25, 0x18	; 24
     aa8:	84 e0       	ldi	r24, 0x04	; 4
     aaa:	89 27       	eor	r24, r25
     aac:	88 bb       	out	0x18, r24	; 24
}
     aae:	9f 91       	pop	r25
     ab0:	8f 91       	pop	r24
     ab2:	0f 90       	pop	r0
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	0f 90       	pop	r0
     ab8:	1f 90       	pop	r1
     aba:	18 95       	reti

00000abc <UART_transmit>:

void UART_transmit(char data){
	while (!(UCSR0A & (1<<UDRE0))); //wait until UDRE->1 = ready
     abc:	5d 9b       	sbis	0x0b, 5	; 11
     abe:	fe cf       	rjmp	.-4      	; 0xabc <UART_transmit>
	UDR0 = data;
     ac0:	8c b9       	out	0x0c, r24	; 12
     ac2:	08 95       	ret

00000ac4 <UART_putchar>:
}

// using two different functions transmit data (maybe unify them under putchar) / maybe adding ring buffer to write data also
int UART_putchar(char c, FILE *stream)
{	UART_transmit(c);
     ac4:	0e 94 5e 05 	call	0xabc	; 0xabc <UART_transmit>
	return 0;
}
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	08 95       	ret

00000ace <UART_receive>:

//---------- RECEIVING ------------

char UART_receive(){
	//frame-error OR data-over-run OR parity-error
	if ( UCSR0A & ((1<<FE0)|(1<<DOR0)|(1<<UPE0)) )
     ace:	8b b1       	in	r24, 0x0b	; 11
     ad0:	8c 71       	andi	r24, 0x1C	; 28
     ad2:	31 f4       	brne	.+12     	; 0xae0 <UART_receive+0x12>
		return -1;
	
	PORTB ^= (1<<RXLED); //blink led to report success of rx
     ad4:	98 b3       	in	r25, 0x18	; 24
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	89 27       	eor	r24, r25
     ada:	88 bb       	out	0x18, r24	; 24
	return UDR0;
     adc:	8c b1       	in	r24, 0x0c	; 12
     ade:	08 95       	ret
//---------- RECEIVING ------------

char UART_receive(){
	//frame-error OR data-over-run OR parity-error
	if ( UCSR0A & ((1<<FE0)|(1<<DOR0)|(1<<UPE0)) )
		return -1;
     ae0:	8f ef       	ldi	r24, 0xFF	; 255
	
	PORTB ^= (1<<RXLED); //blink led to report success of rx
	return UDR0;
}
     ae2:	08 95       	ret

00000ae4 <__vector_19>:

// Interrupt service routine for receiving data
ISR(USART0_RXC_vect) {
     ae4:	1f 92       	push	r1
     ae6:	0f 92       	push	r0
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	0f 92       	push	r0
     aec:	11 24       	eor	r1, r1
     aee:	2f 93       	push	r18
     af0:	3f 93       	push	r19
     af2:	4f 93       	push	r20
     af4:	5f 93       	push	r21
     af6:	6f 93       	push	r22
     af8:	7f 93       	push	r23
     afa:	8f 93       	push	r24
     afc:	9f 93       	push	r25
     afe:	af 93       	push	r26
     b00:	bf 93       	push	r27
     b02:	ef 93       	push	r30
     b04:	ff 93       	push	r31
	received_data = UART_receive();
     b06:	0e 94 67 05 	call	0xace	; 0xace <UART_receive>
     b0a:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <received_data>
	printf("@echo: %c\n\r", received_data);
     b0e:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <received_data>
     b12:	1f 92       	push	r1
     b14:	8f 93       	push	r24
     b16:	87 e0       	ldi	r24, 0x07	; 7
     b18:	92 e0       	ldi	r25, 0x02	; 2
     b1a:	9f 93       	push	r25
     b1c:	8f 93       	push	r24
     b1e:	0e 94 6f 08 	call	0x10de	; 0x10de <printf>
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	ff 91       	pop	r31
     b2c:	ef 91       	pop	r30
     b2e:	bf 91       	pop	r27
     b30:	af 91       	pop	r26
     b32:	9f 91       	pop	r25
     b34:	8f 91       	pop	r24
     b36:	7f 91       	pop	r23
     b38:	6f 91       	pop	r22
     b3a:	5f 91       	pop	r21
     b3c:	4f 91       	pop	r20
     b3e:	3f 91       	pop	r19
     b40:	2f 91       	pop	r18
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	0f 90       	pop	r0
     b48:	1f 90       	pop	r1
     b4a:	18 95       	reti

00000b4c <XMEM_init>:
#include "../include/XMEM.h"

void XMEM_init(){
	MCUCR |= (1<<SRE);
     b4c:	85 b7       	in	r24, 0x35	; 53
     b4e:	80 68       	ori	r24, 0x80	; 128
     b50:	85 bf       	out	0x35, r24	; 53
	SFIOR = (1<<XMM2); //XMM=100 - mask PA7-4 for jtag
     b52:	80 e2       	ldi	r24, 0x20	; 32
     b54:	80 bf       	out	0x30, r24	; 48
     b56:	08 95       	ret

00000b58 <main>:
#include <avr/interrupt.h>

extern FILE *oled_output;
uint8_t score = 0;

int main(void) {
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	2b 97       	sbiw	r28, 0x0b	; 11
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	de bf       	out	0x3e, r29	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	cd bf       	out	0x3d, r28	; 61
	UART_init(MYUBRR);
     b6c:	8f e1       	ldi	r24, 0x1F	; 31
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 2f 05 	call	0xa5e	; 0xa5e <UART_init>
	XMEM_init();
     b74:	0e 94 a6 05 	call	0xb4c	; 0xb4c <XMEM_init>
	ADC_init();
     b78:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	JOY_init();
     b7c:	0e 94 b6 02 	call	0x56c	; 0x56c <JOY_init>
	CAN_init();
     b80:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <CAN_init>
	OLED_init();
     b84:	0e 94 9a 04 	call	0x934	; 0x934 <OLED_init>
	OLED_reset();
     b88:	0e 94 8b 04 	call	0x916	; 0x916 <OLED_reset>
	fprintf(oled_output,"SCORE: 0");
     b8c:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <oled_output>
     b90:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <oled_output+0x1>
     b94:	48 e0       	ldi	r20, 0x08	; 8
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	61 e0       	ldi	r22, 0x01	; 1
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	83 e1       	ldi	r24, 0x13	; 19
     b9e:	92 e0       	ldi	r25, 0x02	; 2
     ba0:	0e 94 3b 08 	call	0x1076	; 0x1076 <fwrite>
     ba4:	8c ec       	ldi	r24, 0xCC	; 204
     ba6:	9c e4       	ldi	r25, 0x4C	; 76
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <main+0x50>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <main+0x56>
     bae:	00 00       	nop
	
	while(1){
		_delay_ms(16);
		pos_t pos = JOY_get_rel_pos();
     bb0:	0e 94 bf 02 	call	0x57e	; 0x57e <JOY_get_rel_pos>
		int8_t x = (int8_t)pos.x;
		int8_t y  = (int8_t)pos.y;
		message_t msg = {0xAA, 2, .signed_data={x,y}};
     bb4:	fe 01       	movw	r30, r28
     bb6:	31 96       	adiw	r30, 0x01	; 1
     bb8:	9b e0       	ldi	r25, 0x0B	; 11
     bba:	df 01       	movw	r26, r30
     bbc:	1d 92       	st	X+, r1
     bbe:	9a 95       	dec	r25
     bc0:	e9 f7       	brne	.-6      	; 0xbbc <main+0x64>
     bc2:	2a ea       	ldi	r18, 0xAA	; 170
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	3a 83       	std	Y+2, r19	; 0x02
     bc8:	29 83       	std	Y+1, r18	; 0x01
     bca:	92 e0       	ldi	r25, 0x02	; 2
     bcc:	9b 83       	std	Y+3, r25	; 0x03
     bce:	6c 83       	std	Y+4, r22	; 0x04
     bd0:	8d 83       	std	Y+5, r24	; 0x05
		CAN_send(&msg);
     bd2:	cf 01       	movw	r24, r30
     bd4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <CAN_send>
     bd8:	e5 cf       	rjmp	.-54     	; 0xba4 <main+0x4c>

00000bda <__vector_1>:
	}
}

ISR(INT0_vect) {
     bda:	1f 92       	push	r1
     bdc:	0f 92       	push	r0
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	0f 92       	push	r0
     be2:	11 24       	eor	r1, r1
     be4:	2f 93       	push	r18
     be6:	3f 93       	push	r19
     be8:	4f 93       	push	r20
     bea:	5f 93       	push	r21
     bec:	6f 93       	push	r22
     bee:	7f 93       	push	r23
     bf0:	8f 93       	push	r24
     bf2:	9f 93       	push	r25
     bf4:	af 93       	push	r26
     bf6:	bf 93       	push	r27
     bf8:	ef 93       	push	r30
     bfa:	ff 93       	push	r31
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	2b 97       	sbiw	r28, 0x0b	; 11
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	cd bf       	out	0x3d, r28	; 61
	message_t rec = CAN_receive();
     c0a:	ce 01       	movw	r24, r28
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	0e 94 30 02 	call	0x460	; 0x460 <CAN_receive>
	if (rec.id==CAN_ID_GOAL){
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	8e 3e       	cpi	r24, 0xEE	; 238
     c18:	91 05       	cpc	r25, r1
     c1a:	e9 f4       	brne	.+58     	; 0xc56 <__vector_1+0x7c>
		OLED_clear();
     c1c:	0e 94 80 04 	call	0x900	; 0x900 <OLED_clear>
		fprintf(oled_output,"SCORE: %d",score++);
     c20:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__data_end>
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	98 0f       	add	r25, r24
     c28:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <__data_end>
     c2c:	1f 92       	push	r1
     c2e:	8f 93       	push	r24
     c30:	8c e1       	ldi	r24, 0x1C	; 28
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	9f 93       	push	r25
     c36:	8f 93       	push	r24
     c38:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <oled_output+0x1>
     c3c:	8f 93       	push	r24
     c3e:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <oled_output>
     c42:	8f 93       	push	r24
     c44:	0e 94 ed 07 	call	0xfda	; 0xfda <fprintf>
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	10 c0       	rjmp	.+32     	; 0xc76 <__vector_1+0x9c>
	}
	else if (rec.id==CAN_ID_PWM){
     c56:	8d 3d       	cpi	r24, 0xDD	; 221
     c58:	91 05       	cpc	r25, r1
     c5a:	69 f4       	brne	.+26     	; 0xc76 <__vector_1+0x9c>
		printf("pwm: %d\n\r",rec.unsigned_data[0]);
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	1f 92       	push	r1
     c60:	8f 93       	push	r24
     c62:	86 e2       	ldi	r24, 0x26	; 38
     c64:	92 e0       	ldi	r25, 0x02	; 2
     c66:	9f 93       	push	r25
     c68:	8f 93       	push	r24
     c6a:	0e 94 6f 08 	call	0x10de	; 0x10de <printf>
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
	}
	MCP_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	8c e2       	ldi	r24, 0x2C	; 44
     c7c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MCP_bit_modify>
     c80:	2b 96       	adiw	r28, 0x0b	; 11
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	ff 91       	pop	r31
     c92:	ef 91       	pop	r30
     c94:	bf 91       	pop	r27
     c96:	af 91       	pop	r26
     c98:	9f 91       	pop	r25
     c9a:	8f 91       	pop	r24
     c9c:	7f 91       	pop	r23
     c9e:	6f 91       	pop	r22
     ca0:	5f 91       	pop	r21
     ca2:	4f 91       	pop	r20
     ca4:	3f 91       	pop	r19
     ca6:	2f 91       	pop	r18
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <__divmodhi4>:
     cb2:	97 fb       	bst	r25, 7
     cb4:	07 2e       	mov	r0, r23
     cb6:	16 f4       	brtc	.+4      	; 0xcbc <__divmodhi4+0xa>
     cb8:	00 94       	com	r0
     cba:	07 d0       	rcall	.+14     	; 0xcca <__divmodhi4_neg1>
     cbc:	77 fd       	sbrc	r23, 7
     cbe:	09 d0       	rcall	.+18     	; 0xcd2 <__divmodhi4_neg2>
     cc0:	0e 94 6d 06 	call	0xcda	; 0xcda <__udivmodhi4>
     cc4:	07 fc       	sbrc	r0, 7
     cc6:	05 d0       	rcall	.+10     	; 0xcd2 <__divmodhi4_neg2>
     cc8:	3e f4       	brtc	.+14     	; 0xcd8 <__divmodhi4_exit>

00000cca <__divmodhi4_neg1>:
     cca:	90 95       	com	r25
     ccc:	81 95       	neg	r24
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	08 95       	ret

00000cd2 <__divmodhi4_neg2>:
     cd2:	70 95       	com	r23
     cd4:	61 95       	neg	r22
     cd6:	7f 4f       	sbci	r23, 0xFF	; 255

00000cd8 <__divmodhi4_exit>:
     cd8:	08 95       	ret

00000cda <__udivmodhi4>:
     cda:	aa 1b       	sub	r26, r26
     cdc:	bb 1b       	sub	r27, r27
     cde:	51 e1       	ldi	r21, 0x11	; 17
     ce0:	07 c0       	rjmp	.+14     	; 0xcf0 <__udivmodhi4_ep>

00000ce2 <__udivmodhi4_loop>:
     ce2:	aa 1f       	adc	r26, r26
     ce4:	bb 1f       	adc	r27, r27
     ce6:	a6 17       	cp	r26, r22
     ce8:	b7 07       	cpc	r27, r23
     cea:	10 f0       	brcs	.+4      	; 0xcf0 <__udivmodhi4_ep>
     cec:	a6 1b       	sub	r26, r22
     cee:	b7 0b       	sbc	r27, r23

00000cf0 <__udivmodhi4_ep>:
     cf0:	88 1f       	adc	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	5a 95       	dec	r21
     cf6:	a9 f7       	brne	.-22     	; 0xce2 <__udivmodhi4_loop>
     cf8:	80 95       	com	r24
     cfa:	90 95       	com	r25
     cfc:	bc 01       	movw	r22, r24
     cfe:	cd 01       	movw	r24, r26
     d00:	08 95       	ret

00000d02 <malloc>:
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	82 30       	cpi	r24, 0x02	; 2
     d0c:	91 05       	cpc	r25, r1
     d0e:	10 f4       	brcc	.+4      	; 0xd14 <malloc+0x12>
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <__flp>
     d18:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <__flp+0x1>
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	a0 e0       	ldi	r26, 0x00	; 0
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	30 97       	sbiw	r30, 0x00	; 0
     d26:	19 f1       	breq	.+70     	; 0xd6e <malloc+0x6c>
     d28:	40 81       	ld	r20, Z
     d2a:	51 81       	ldd	r21, Z+1	; 0x01
     d2c:	02 81       	ldd	r16, Z+2	; 0x02
     d2e:	13 81       	ldd	r17, Z+3	; 0x03
     d30:	48 17       	cp	r20, r24
     d32:	59 07       	cpc	r21, r25
     d34:	c8 f0       	brcs	.+50     	; 0xd68 <malloc+0x66>
     d36:	84 17       	cp	r24, r20
     d38:	95 07       	cpc	r25, r21
     d3a:	69 f4       	brne	.+26     	; 0xd56 <malloc+0x54>
     d3c:	10 97       	sbiw	r26, 0x00	; 0
     d3e:	31 f0       	breq	.+12     	; 0xd4c <malloc+0x4a>
     d40:	12 96       	adiw	r26, 0x02	; 2
     d42:	0c 93       	st	X, r16
     d44:	12 97       	sbiw	r26, 0x02	; 2
     d46:	13 96       	adiw	r26, 0x03	; 3
     d48:	1c 93       	st	X, r17
     d4a:	27 c0       	rjmp	.+78     	; 0xd9a <malloc+0x98>
     d4c:	00 93 3c 02 	sts	0x023C, r16	; 0x80023c <__flp>
     d50:	10 93 3d 02 	sts	0x023D, r17	; 0x80023d <__flp+0x1>
     d54:	22 c0       	rjmp	.+68     	; 0xd9a <malloc+0x98>
     d56:	21 15       	cp	r18, r1
     d58:	31 05       	cpc	r19, r1
     d5a:	19 f0       	breq	.+6      	; 0xd62 <malloc+0x60>
     d5c:	42 17       	cp	r20, r18
     d5e:	53 07       	cpc	r21, r19
     d60:	18 f4       	brcc	.+6      	; 0xd68 <malloc+0x66>
     d62:	9a 01       	movw	r18, r20
     d64:	bd 01       	movw	r22, r26
     d66:	ef 01       	movw	r28, r30
     d68:	df 01       	movw	r26, r30
     d6a:	f8 01       	movw	r30, r16
     d6c:	db cf       	rjmp	.-74     	; 0xd24 <malloc+0x22>
     d6e:	21 15       	cp	r18, r1
     d70:	31 05       	cpc	r19, r1
     d72:	f9 f0       	breq	.+62     	; 0xdb2 <malloc+0xb0>
     d74:	28 1b       	sub	r18, r24
     d76:	39 0b       	sbc	r19, r25
     d78:	24 30       	cpi	r18, 0x04	; 4
     d7a:	31 05       	cpc	r19, r1
     d7c:	80 f4       	brcc	.+32     	; 0xd9e <malloc+0x9c>
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	9b 81       	ldd	r25, Y+3	; 0x03
     d82:	61 15       	cp	r22, r1
     d84:	71 05       	cpc	r23, r1
     d86:	21 f0       	breq	.+8      	; 0xd90 <malloc+0x8e>
     d88:	fb 01       	movw	r30, r22
     d8a:	93 83       	std	Z+3, r25	; 0x03
     d8c:	82 83       	std	Z+2, r24	; 0x02
     d8e:	04 c0       	rjmp	.+8      	; 0xd98 <malloc+0x96>
     d90:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <__flp+0x1>
     d94:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__flp>
     d98:	fe 01       	movw	r30, r28
     d9a:	32 96       	adiw	r30, 0x02	; 2
     d9c:	44 c0       	rjmp	.+136    	; 0xe26 <malloc+0x124>
     d9e:	fe 01       	movw	r30, r28
     da0:	e2 0f       	add	r30, r18
     da2:	f3 1f       	adc	r31, r19
     da4:	81 93       	st	Z+, r24
     da6:	91 93       	st	Z+, r25
     da8:	22 50       	subi	r18, 0x02	; 2
     daa:	31 09       	sbc	r19, r1
     dac:	39 83       	std	Y+1, r19	; 0x01
     dae:	28 83       	st	Y, r18
     db0:	3a c0       	rjmp	.+116    	; 0xe26 <malloc+0x124>
     db2:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <__brkval>
     db6:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <__brkval+0x1>
     dba:	23 2b       	or	r18, r19
     dbc:	41 f4       	brne	.+16     	; 0xdce <malloc+0xcc>
     dbe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     dc2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     dc6:	30 93 3b 02 	sts	0x023B, r19	; 0x80023b <__brkval+0x1>
     dca:	20 93 3a 02 	sts	0x023A, r18	; 0x80023a <__brkval>
     dce:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     dd2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	41 f4       	brne	.+16     	; 0xdec <malloc+0xea>
     ddc:	2d b7       	in	r18, 0x3d	; 61
     dde:	3e b7       	in	r19, 0x3e	; 62
     de0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     de4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     de8:	24 1b       	sub	r18, r20
     dea:	35 0b       	sbc	r19, r21
     dec:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <__brkval>
     df0:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <__brkval+0x1>
     df4:	e2 17       	cp	r30, r18
     df6:	f3 07       	cpc	r31, r19
     df8:	a0 f4       	brcc	.+40     	; 0xe22 <malloc+0x120>
     dfa:	2e 1b       	sub	r18, r30
     dfc:	3f 0b       	sbc	r19, r31
     dfe:	28 17       	cp	r18, r24
     e00:	39 07       	cpc	r19, r25
     e02:	78 f0       	brcs	.+30     	; 0xe22 <malloc+0x120>
     e04:	ac 01       	movw	r20, r24
     e06:	4e 5f       	subi	r20, 0xFE	; 254
     e08:	5f 4f       	sbci	r21, 0xFF	; 255
     e0a:	24 17       	cp	r18, r20
     e0c:	35 07       	cpc	r19, r21
     e0e:	48 f0       	brcs	.+18     	; 0xe22 <malloc+0x120>
     e10:	4e 0f       	add	r20, r30
     e12:	5f 1f       	adc	r21, r31
     e14:	50 93 3b 02 	sts	0x023B, r21	; 0x80023b <__brkval+0x1>
     e18:	40 93 3a 02 	sts	0x023A, r20	; 0x80023a <__brkval>
     e1c:	81 93       	st	Z+, r24
     e1e:	91 93       	st	Z+, r25
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <malloc+0x124>
     e22:	e0 e0       	ldi	r30, 0x00	; 0
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	cf 01       	movw	r24, r30
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	08 95       	ret

00000e32 <free>:
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	09 f4       	brne	.+2      	; 0xe3c <free+0xa>
     e3a:	81 c0       	rjmp	.+258    	; 0xf3e <free+0x10c>
     e3c:	fc 01       	movw	r30, r24
     e3e:	32 97       	sbiw	r30, 0x02	; 2
     e40:	13 82       	std	Z+3, r1	; 0x03
     e42:	12 82       	std	Z+2, r1	; 0x02
     e44:	a0 91 3c 02 	lds	r26, 0x023C	; 0x80023c <__flp>
     e48:	b0 91 3d 02 	lds	r27, 0x023D	; 0x80023d <__flp+0x1>
     e4c:	10 97       	sbiw	r26, 0x00	; 0
     e4e:	81 f4       	brne	.+32     	; 0xe70 <free+0x3e>
     e50:	20 81       	ld	r18, Z
     e52:	31 81       	ldd	r19, Z+1	; 0x01
     e54:	82 0f       	add	r24, r18
     e56:	93 1f       	adc	r25, r19
     e58:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <__brkval>
     e5c:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <__brkval+0x1>
     e60:	28 17       	cp	r18, r24
     e62:	39 07       	cpc	r19, r25
     e64:	51 f5       	brne	.+84     	; 0xeba <free+0x88>
     e66:	f0 93 3b 02 	sts	0x023B, r31	; 0x80023b <__brkval+0x1>
     e6a:	e0 93 3a 02 	sts	0x023A, r30	; 0x80023a <__brkval>
     e6e:	67 c0       	rjmp	.+206    	; 0xf3e <free+0x10c>
     e70:	ed 01       	movw	r28, r26
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	ce 17       	cp	r28, r30
     e78:	df 07       	cpc	r29, r31
     e7a:	40 f4       	brcc	.+16     	; 0xe8c <free+0x5a>
     e7c:	4a 81       	ldd	r20, Y+2	; 0x02
     e7e:	5b 81       	ldd	r21, Y+3	; 0x03
     e80:	9e 01       	movw	r18, r28
     e82:	41 15       	cp	r20, r1
     e84:	51 05       	cpc	r21, r1
     e86:	f1 f0       	breq	.+60     	; 0xec4 <free+0x92>
     e88:	ea 01       	movw	r28, r20
     e8a:	f5 cf       	rjmp	.-22     	; 0xe76 <free+0x44>
     e8c:	d3 83       	std	Z+3, r29	; 0x03
     e8e:	c2 83       	std	Z+2, r28	; 0x02
     e90:	40 81       	ld	r20, Z
     e92:	51 81       	ldd	r21, Z+1	; 0x01
     e94:	84 0f       	add	r24, r20
     e96:	95 1f       	adc	r25, r21
     e98:	c8 17       	cp	r28, r24
     e9a:	d9 07       	cpc	r29, r25
     e9c:	59 f4       	brne	.+22     	; 0xeb4 <free+0x82>
     e9e:	88 81       	ld	r24, Y
     ea0:	99 81       	ldd	r25, Y+1	; 0x01
     ea2:	84 0f       	add	r24, r20
     ea4:	95 1f       	adc	r25, r21
     ea6:	02 96       	adiw	r24, 0x02	; 2
     ea8:	91 83       	std	Z+1, r25	; 0x01
     eaa:	80 83       	st	Z, r24
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	9b 81       	ldd	r25, Y+3	; 0x03
     eb0:	93 83       	std	Z+3, r25	; 0x03
     eb2:	82 83       	std	Z+2, r24	; 0x02
     eb4:	21 15       	cp	r18, r1
     eb6:	31 05       	cpc	r19, r1
     eb8:	29 f4       	brne	.+10     	; 0xec4 <free+0x92>
     eba:	f0 93 3d 02 	sts	0x023D, r31	; 0x80023d <__flp+0x1>
     ebe:	e0 93 3c 02 	sts	0x023C, r30	; 0x80023c <__flp>
     ec2:	3d c0       	rjmp	.+122    	; 0xf3e <free+0x10c>
     ec4:	e9 01       	movw	r28, r18
     ec6:	fb 83       	std	Y+3, r31	; 0x03
     ec8:	ea 83       	std	Y+2, r30	; 0x02
     eca:	49 91       	ld	r20, Y+
     ecc:	59 91       	ld	r21, Y+
     ece:	c4 0f       	add	r28, r20
     ed0:	d5 1f       	adc	r29, r21
     ed2:	ec 17       	cp	r30, r28
     ed4:	fd 07       	cpc	r31, r29
     ed6:	61 f4       	brne	.+24     	; 0xef0 <free+0xbe>
     ed8:	80 81       	ld	r24, Z
     eda:	91 81       	ldd	r25, Z+1	; 0x01
     edc:	84 0f       	add	r24, r20
     ede:	95 1f       	adc	r25, r21
     ee0:	02 96       	adiw	r24, 0x02	; 2
     ee2:	e9 01       	movw	r28, r18
     ee4:	99 83       	std	Y+1, r25	; 0x01
     ee6:	88 83       	st	Y, r24
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	9b 83       	std	Y+3, r25	; 0x03
     eee:	8a 83       	std	Y+2, r24	; 0x02
     ef0:	e0 e0       	ldi	r30, 0x00	; 0
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	12 96       	adiw	r26, 0x02	; 2
     ef6:	8d 91       	ld	r24, X+
     ef8:	9c 91       	ld	r25, X
     efa:	13 97       	sbiw	r26, 0x03	; 3
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	19 f0       	breq	.+6      	; 0xf06 <free+0xd4>
     f00:	fd 01       	movw	r30, r26
     f02:	dc 01       	movw	r26, r24
     f04:	f7 cf       	rjmp	.-18     	; 0xef4 <free+0xc2>
     f06:	8d 91       	ld	r24, X+
     f08:	9c 91       	ld	r25, X
     f0a:	11 97       	sbiw	r26, 0x01	; 1
     f0c:	9d 01       	movw	r18, r26
     f0e:	2e 5f       	subi	r18, 0xFE	; 254
     f10:	3f 4f       	sbci	r19, 0xFF	; 255
     f12:	82 0f       	add	r24, r18
     f14:	93 1f       	adc	r25, r19
     f16:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <__brkval>
     f1a:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <__brkval+0x1>
     f1e:	28 17       	cp	r18, r24
     f20:	39 07       	cpc	r19, r25
     f22:	69 f4       	brne	.+26     	; 0xf3e <free+0x10c>
     f24:	30 97       	sbiw	r30, 0x00	; 0
     f26:	29 f4       	brne	.+10     	; 0xf32 <free+0x100>
     f28:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <__flp+0x1>
     f2c:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <__flp>
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <free+0x104>
     f32:	13 82       	std	Z+3, r1	; 0x03
     f34:	12 82       	std	Z+2, r1	; 0x02
     f36:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <__brkval+0x1>
     f3a:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <__brkval>
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <fdevopen>:
     f44:	0f 93       	push	r16
     f46:	1f 93       	push	r17
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	31 f4       	brne	.+12     	; 0xf5c <fdevopen+0x18>
     f50:	61 15       	cp	r22, r1
     f52:	71 05       	cpc	r23, r1
     f54:	19 f4       	brne	.+6      	; 0xf5c <fdevopen+0x18>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	3a c0       	rjmp	.+116    	; 0xfd0 <fdevopen+0x8c>
     f5c:	8b 01       	movw	r16, r22
     f5e:	ec 01       	movw	r28, r24
     f60:	6e e0       	ldi	r22, 0x0E	; 14
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 66 0a 	call	0x14cc	; 0x14cc <calloc>
     f6c:	fc 01       	movw	r30, r24
     f6e:	89 2b       	or	r24, r25
     f70:	91 f3       	breq	.-28     	; 0xf56 <fdevopen+0x12>
     f72:	80 e8       	ldi	r24, 0x80	; 128
     f74:	83 83       	std	Z+3, r24	; 0x03
     f76:	01 15       	cp	r16, r1
     f78:	11 05       	cpc	r17, r1
     f7a:	71 f0       	breq	.+28     	; 0xf98 <fdevopen+0x54>
     f7c:	13 87       	std	Z+11, r17	; 0x0b
     f7e:	02 87       	std	Z+10, r16	; 0x0a
     f80:	81 e8       	ldi	r24, 0x81	; 129
     f82:	83 83       	std	Z+3, r24	; 0x03
     f84:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__iob>
     f88:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <__iob+0x1>
     f8c:	89 2b       	or	r24, r25
     f8e:	21 f4       	brne	.+8      	; 0xf98 <fdevopen+0x54>
     f90:	f0 93 3f 02 	sts	0x023F, r31	; 0x80023f <__iob+0x1>
     f94:	e0 93 3e 02 	sts	0x023E, r30	; 0x80023e <__iob>
     f98:	20 97       	sbiw	r28, 0x00	; 0
     f9a:	c9 f0       	breq	.+50     	; 0xfce <fdevopen+0x8a>
     f9c:	d1 87       	std	Z+9, r29	; 0x09
     f9e:	c0 87       	std	Z+8, r28	; 0x08
     fa0:	83 81       	ldd	r24, Z+3	; 0x03
     fa2:	82 60       	ori	r24, 0x02	; 2
     fa4:	83 83       	std	Z+3, r24	; 0x03
     fa6:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__iob+0x2>
     faa:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <__iob+0x3>
     fae:	89 2b       	or	r24, r25
     fb0:	71 f4       	brne	.+28     	; 0xfce <fdevopen+0x8a>
     fb2:	f0 93 41 02 	sts	0x0241, r31	; 0x800241 <__iob+0x3>
     fb6:	e0 93 40 02 	sts	0x0240, r30	; 0x800240 <__iob+0x2>
     fba:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__iob+0x4>
     fbe:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <__iob+0x5>
     fc2:	89 2b       	or	r24, r25
     fc4:	21 f4       	brne	.+8      	; 0xfce <fdevopen+0x8a>
     fc6:	f0 93 43 02 	sts	0x0243, r31	; 0x800243 <__iob+0x5>
     fca:	e0 93 42 02 	sts	0x0242, r30	; 0x800242 <__iob+0x4>
     fce:	cf 01       	movw	r24, r30
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	08 95       	ret

00000fda <fprintf>:
     fda:	a0 e0       	ldi	r26, 0x00	; 0
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e3 ef       	ldi	r30, 0xF3	; 243
     fe0:	f7 e0       	ldi	r31, 0x07	; 7
     fe2:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__prologue_saves__+0x20>
     fe6:	ae 01       	movw	r20, r28
     fe8:	47 5f       	subi	r20, 0xF7	; 247
     fea:	5f 4f       	sbci	r21, 0xFF	; 255
     fec:	6f 81       	ldd	r22, Y+7	; 0x07
     fee:	78 85       	ldd	r23, Y+8	; 0x08
     ff0:	8d 81       	ldd	r24, Y+5	; 0x05
     ff2:	9e 81       	ldd	r25, Y+6	; 0x06
     ff4:	0e 94 85 08 	call	0x110a	; 0x110a <vfprintf>
     ff8:	e2 e0       	ldi	r30, 0x02	; 2
     ffa:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__epilogue_restores__+0x20>

00000ffe <fputc>:
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	fb 01       	movw	r30, r22
    1008:	23 81       	ldd	r18, Z+3	; 0x03
    100a:	21 fd       	sbrc	r18, 1
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <fputc+0x16>
    100e:	8f ef       	ldi	r24, 0xFF	; 255
    1010:	9f ef       	ldi	r25, 0xFF	; 255
    1012:	2c c0       	rjmp	.+88     	; 0x106c <fputc+0x6e>
    1014:	22 ff       	sbrs	r18, 2
    1016:	16 c0       	rjmp	.+44     	; 0x1044 <fputc+0x46>
    1018:	46 81       	ldd	r20, Z+6	; 0x06
    101a:	57 81       	ldd	r21, Z+7	; 0x07
    101c:	24 81       	ldd	r18, Z+4	; 0x04
    101e:	35 81       	ldd	r19, Z+5	; 0x05
    1020:	42 17       	cp	r20, r18
    1022:	53 07       	cpc	r21, r19
    1024:	44 f4       	brge	.+16     	; 0x1036 <fputc+0x38>
    1026:	a0 81       	ld	r26, Z
    1028:	b1 81       	ldd	r27, Z+1	; 0x01
    102a:	9d 01       	movw	r18, r26
    102c:	2f 5f       	subi	r18, 0xFF	; 255
    102e:	3f 4f       	sbci	r19, 0xFF	; 255
    1030:	31 83       	std	Z+1, r19	; 0x01
    1032:	20 83       	st	Z, r18
    1034:	8c 93       	st	X, r24
    1036:	26 81       	ldd	r18, Z+6	; 0x06
    1038:	37 81       	ldd	r19, Z+7	; 0x07
    103a:	2f 5f       	subi	r18, 0xFF	; 255
    103c:	3f 4f       	sbci	r19, 0xFF	; 255
    103e:	37 83       	std	Z+7, r19	; 0x07
    1040:	26 83       	std	Z+6, r18	; 0x06
    1042:	14 c0       	rjmp	.+40     	; 0x106c <fputc+0x6e>
    1044:	8b 01       	movw	r16, r22
    1046:	ec 01       	movw	r28, r24
    1048:	fb 01       	movw	r30, r22
    104a:	00 84       	ldd	r0, Z+8	; 0x08
    104c:	f1 85       	ldd	r31, Z+9	; 0x09
    104e:	e0 2d       	mov	r30, r0
    1050:	09 95       	icall
    1052:	89 2b       	or	r24, r25
    1054:	e1 f6       	brne	.-72     	; 0x100e <fputc+0x10>
    1056:	d8 01       	movw	r26, r16
    1058:	16 96       	adiw	r26, 0x06	; 6
    105a:	8d 91       	ld	r24, X+
    105c:	9c 91       	ld	r25, X
    105e:	17 97       	sbiw	r26, 0x07	; 7
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	17 96       	adiw	r26, 0x07	; 7
    1064:	9c 93       	st	X, r25
    1066:	8e 93       	st	-X, r24
    1068:	16 97       	sbiw	r26, 0x06	; 6
    106a:	ce 01       	movw	r24, r28
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	08 95       	ret

00001076 <fwrite>:
    1076:	a0 e0       	ldi	r26, 0x00	; 0
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e1 e4       	ldi	r30, 0x41	; 65
    107c:	f8 e0       	ldi	r31, 0x08	; 8
    107e:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__prologue_saves__+0xc>
    1082:	5b 01       	movw	r10, r22
    1084:	4a 01       	movw	r8, r20
    1086:	79 01       	movw	r14, r18
    1088:	d9 01       	movw	r26, r18
    108a:	13 96       	adiw	r26, 0x03	; 3
    108c:	2c 91       	ld	r18, X
    108e:	21 ff       	sbrs	r18, 1
    1090:	1d c0       	rjmp	.+58     	; 0x10cc <fwrite+0x56>
    1092:	c0 e0       	ldi	r28, 0x00	; 0
    1094:	d0 e0       	ldi	r29, 0x00	; 0
    1096:	c8 15       	cp	r28, r8
    1098:	d9 05       	cpc	r29, r9
    109a:	d9 f0       	breq	.+54     	; 0x10d2 <fwrite+0x5c>
    109c:	8c 01       	movw	r16, r24
    109e:	6c 01       	movw	r12, r24
    10a0:	ca 0c       	add	r12, r10
    10a2:	db 1c       	adc	r13, r11
    10a4:	c8 01       	movw	r24, r16
    10a6:	0c 15       	cp	r16, r12
    10a8:	1d 05       	cpc	r17, r13
    10aa:	71 f0       	breq	.+28     	; 0x10c8 <fwrite+0x52>
    10ac:	0f 5f       	subi	r16, 0xFF	; 255
    10ae:	1f 4f       	sbci	r17, 0xFF	; 255
    10b0:	d7 01       	movw	r26, r14
    10b2:	18 96       	adiw	r26, 0x08	; 8
    10b4:	ed 91       	ld	r30, X+
    10b6:	fc 91       	ld	r31, X
    10b8:	19 97       	sbiw	r26, 0x09	; 9
    10ba:	b7 01       	movw	r22, r14
    10bc:	dc 01       	movw	r26, r24
    10be:	8c 91       	ld	r24, X
    10c0:	09 95       	icall
    10c2:	89 2b       	or	r24, r25
    10c4:	79 f3       	breq	.-34     	; 0x10a4 <fwrite+0x2e>
    10c6:	05 c0       	rjmp	.+10     	; 0x10d2 <fwrite+0x5c>
    10c8:	21 96       	adiw	r28, 0x01	; 1
    10ca:	e5 cf       	rjmp	.-54     	; 0x1096 <fwrite+0x20>
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <fwrite+0x5e>
    10d2:	ce 01       	movw	r24, r28
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	ec e0       	ldi	r30, 0x0C	; 12
    10da:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__epilogue_restores__+0xc>

000010de <printf>:
    10de:	a0 e0       	ldi	r26, 0x00	; 0
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e5 e7       	ldi	r30, 0x75	; 117
    10e4:	f8 e0       	ldi	r31, 0x08	; 8
    10e6:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__prologue_saves__+0x20>
    10ea:	ae 01       	movw	r20, r28
    10ec:	4b 5f       	subi	r20, 0xFB	; 251
    10ee:	5f 4f       	sbci	r21, 0xFF	; 255
    10f0:	fa 01       	movw	r30, r20
    10f2:	61 91       	ld	r22, Z+
    10f4:	71 91       	ld	r23, Z+
    10f6:	af 01       	movw	r20, r30
    10f8:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__iob+0x2>
    10fc:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <__iob+0x3>
    1100:	0e 94 85 08 	call	0x110a	; 0x110a <vfprintf>
    1104:	e2 e0       	ldi	r30, 0x02	; 2
    1106:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__epilogue_restores__+0x20>

0000110a <vfprintf>:
    110a:	ab e0       	ldi	r26, 0x0B	; 11
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	eb e8       	ldi	r30, 0x8B	; 139
    1110:	f8 e0       	ldi	r31, 0x08	; 8
    1112:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__prologue_saves__>
    1116:	6c 01       	movw	r12, r24
    1118:	7b 01       	movw	r14, r22
    111a:	8a 01       	movw	r16, r20
    111c:	fc 01       	movw	r30, r24
    111e:	17 82       	std	Z+7, r1	; 0x07
    1120:	16 82       	std	Z+6, r1	; 0x06
    1122:	83 81       	ldd	r24, Z+3	; 0x03
    1124:	81 ff       	sbrs	r24, 1
    1126:	cc c1       	rjmp	.+920    	; 0x14c0 <vfprintf+0x3b6>
    1128:	ce 01       	movw	r24, r28
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	3c 01       	movw	r6, r24
    112e:	f6 01       	movw	r30, r12
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	f7 01       	movw	r30, r14
    1134:	93 fd       	sbrc	r25, 3
    1136:	85 91       	lpm	r24, Z+
    1138:	93 ff       	sbrs	r25, 3
    113a:	81 91       	ld	r24, Z+
    113c:	7f 01       	movw	r14, r30
    113e:	88 23       	and	r24, r24
    1140:	09 f4       	brne	.+2      	; 0x1144 <vfprintf+0x3a>
    1142:	ba c1       	rjmp	.+884    	; 0x14b8 <vfprintf+0x3ae>
    1144:	85 32       	cpi	r24, 0x25	; 37
    1146:	39 f4       	brne	.+14     	; 0x1156 <vfprintf+0x4c>
    1148:	93 fd       	sbrc	r25, 3
    114a:	85 91       	lpm	r24, Z+
    114c:	93 ff       	sbrs	r25, 3
    114e:	81 91       	ld	r24, Z+
    1150:	7f 01       	movw	r14, r30
    1152:	85 32       	cpi	r24, 0x25	; 37
    1154:	29 f4       	brne	.+10     	; 0x1160 <vfprintf+0x56>
    1156:	b6 01       	movw	r22, r12
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
    115e:	e7 cf       	rjmp	.-50     	; 0x112e <vfprintf+0x24>
    1160:	91 2c       	mov	r9, r1
    1162:	21 2c       	mov	r2, r1
    1164:	31 2c       	mov	r3, r1
    1166:	ff e1       	ldi	r31, 0x1F	; 31
    1168:	f3 15       	cp	r31, r3
    116a:	d8 f0       	brcs	.+54     	; 0x11a2 <vfprintf+0x98>
    116c:	8b 32       	cpi	r24, 0x2B	; 43
    116e:	79 f0       	breq	.+30     	; 0x118e <vfprintf+0x84>
    1170:	38 f4       	brcc	.+14     	; 0x1180 <vfprintf+0x76>
    1172:	80 32       	cpi	r24, 0x20	; 32
    1174:	79 f0       	breq	.+30     	; 0x1194 <vfprintf+0x8a>
    1176:	83 32       	cpi	r24, 0x23	; 35
    1178:	a1 f4       	brne	.+40     	; 0x11a2 <vfprintf+0x98>
    117a:	23 2d       	mov	r18, r3
    117c:	20 61       	ori	r18, 0x10	; 16
    117e:	1d c0       	rjmp	.+58     	; 0x11ba <vfprintf+0xb0>
    1180:	8d 32       	cpi	r24, 0x2D	; 45
    1182:	61 f0       	breq	.+24     	; 0x119c <vfprintf+0x92>
    1184:	80 33       	cpi	r24, 0x30	; 48
    1186:	69 f4       	brne	.+26     	; 0x11a2 <vfprintf+0x98>
    1188:	23 2d       	mov	r18, r3
    118a:	21 60       	ori	r18, 0x01	; 1
    118c:	16 c0       	rjmp	.+44     	; 0x11ba <vfprintf+0xb0>
    118e:	83 2d       	mov	r24, r3
    1190:	82 60       	ori	r24, 0x02	; 2
    1192:	38 2e       	mov	r3, r24
    1194:	e3 2d       	mov	r30, r3
    1196:	e4 60       	ori	r30, 0x04	; 4
    1198:	3e 2e       	mov	r3, r30
    119a:	2a c0       	rjmp	.+84     	; 0x11f0 <vfprintf+0xe6>
    119c:	f3 2d       	mov	r31, r3
    119e:	f8 60       	ori	r31, 0x08	; 8
    11a0:	1d c0       	rjmp	.+58     	; 0x11dc <vfprintf+0xd2>
    11a2:	37 fc       	sbrc	r3, 7
    11a4:	2d c0       	rjmp	.+90     	; 0x1200 <vfprintf+0xf6>
    11a6:	20 ed       	ldi	r18, 0xD0	; 208
    11a8:	28 0f       	add	r18, r24
    11aa:	2a 30       	cpi	r18, 0x0A	; 10
    11ac:	40 f0       	brcs	.+16     	; 0x11be <vfprintf+0xb4>
    11ae:	8e 32       	cpi	r24, 0x2E	; 46
    11b0:	b9 f4       	brne	.+46     	; 0x11e0 <vfprintf+0xd6>
    11b2:	36 fc       	sbrc	r3, 6
    11b4:	81 c1       	rjmp	.+770    	; 0x14b8 <vfprintf+0x3ae>
    11b6:	23 2d       	mov	r18, r3
    11b8:	20 64       	ori	r18, 0x40	; 64
    11ba:	32 2e       	mov	r3, r18
    11bc:	19 c0       	rjmp	.+50     	; 0x11f0 <vfprintf+0xe6>
    11be:	36 fe       	sbrs	r3, 6
    11c0:	06 c0       	rjmp	.+12     	; 0x11ce <vfprintf+0xc4>
    11c2:	8a e0       	ldi	r24, 0x0A	; 10
    11c4:	98 9e       	mul	r9, r24
    11c6:	20 0d       	add	r18, r0
    11c8:	11 24       	eor	r1, r1
    11ca:	92 2e       	mov	r9, r18
    11cc:	11 c0       	rjmp	.+34     	; 0x11f0 <vfprintf+0xe6>
    11ce:	ea e0       	ldi	r30, 0x0A	; 10
    11d0:	2e 9e       	mul	r2, r30
    11d2:	20 0d       	add	r18, r0
    11d4:	11 24       	eor	r1, r1
    11d6:	22 2e       	mov	r2, r18
    11d8:	f3 2d       	mov	r31, r3
    11da:	f0 62       	ori	r31, 0x20	; 32
    11dc:	3f 2e       	mov	r3, r31
    11de:	08 c0       	rjmp	.+16     	; 0x11f0 <vfprintf+0xe6>
    11e0:	8c 36       	cpi	r24, 0x6C	; 108
    11e2:	21 f4       	brne	.+8      	; 0x11ec <vfprintf+0xe2>
    11e4:	83 2d       	mov	r24, r3
    11e6:	80 68       	ori	r24, 0x80	; 128
    11e8:	38 2e       	mov	r3, r24
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <vfprintf+0xe6>
    11ec:	88 36       	cpi	r24, 0x68	; 104
    11ee:	41 f4       	brne	.+16     	; 0x1200 <vfprintf+0xf6>
    11f0:	f7 01       	movw	r30, r14
    11f2:	93 fd       	sbrc	r25, 3
    11f4:	85 91       	lpm	r24, Z+
    11f6:	93 ff       	sbrs	r25, 3
    11f8:	81 91       	ld	r24, Z+
    11fa:	7f 01       	movw	r14, r30
    11fc:	81 11       	cpse	r24, r1
    11fe:	b3 cf       	rjmp	.-154    	; 0x1166 <vfprintf+0x5c>
    1200:	98 2f       	mov	r25, r24
    1202:	9f 7d       	andi	r25, 0xDF	; 223
    1204:	95 54       	subi	r25, 0x45	; 69
    1206:	93 30       	cpi	r25, 0x03	; 3
    1208:	28 f4       	brcc	.+10     	; 0x1214 <vfprintf+0x10a>
    120a:	0c 5f       	subi	r16, 0xFC	; 252
    120c:	1f 4f       	sbci	r17, 0xFF	; 255
    120e:	9f e3       	ldi	r25, 0x3F	; 63
    1210:	99 83       	std	Y+1, r25	; 0x01
    1212:	0d c0       	rjmp	.+26     	; 0x122e <vfprintf+0x124>
    1214:	83 36       	cpi	r24, 0x63	; 99
    1216:	31 f0       	breq	.+12     	; 0x1224 <vfprintf+0x11a>
    1218:	83 37       	cpi	r24, 0x73	; 115
    121a:	71 f0       	breq	.+28     	; 0x1238 <vfprintf+0x12e>
    121c:	83 35       	cpi	r24, 0x53	; 83
    121e:	09 f0       	breq	.+2      	; 0x1222 <vfprintf+0x118>
    1220:	59 c0       	rjmp	.+178    	; 0x12d4 <vfprintf+0x1ca>
    1222:	21 c0       	rjmp	.+66     	; 0x1266 <vfprintf+0x15c>
    1224:	f8 01       	movw	r30, r16
    1226:	80 81       	ld	r24, Z
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	0e 5f       	subi	r16, 0xFE	; 254
    122c:	1f 4f       	sbci	r17, 0xFF	; 255
    122e:	88 24       	eor	r8, r8
    1230:	83 94       	inc	r8
    1232:	91 2c       	mov	r9, r1
    1234:	53 01       	movw	r10, r6
    1236:	13 c0       	rjmp	.+38     	; 0x125e <vfprintf+0x154>
    1238:	28 01       	movw	r4, r16
    123a:	f2 e0       	ldi	r31, 0x02	; 2
    123c:	4f 0e       	add	r4, r31
    123e:	51 1c       	adc	r5, r1
    1240:	f8 01       	movw	r30, r16
    1242:	a0 80       	ld	r10, Z
    1244:	b1 80       	ldd	r11, Z+1	; 0x01
    1246:	36 fe       	sbrs	r3, 6
    1248:	03 c0       	rjmp	.+6      	; 0x1250 <vfprintf+0x146>
    124a:	69 2d       	mov	r22, r9
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <vfprintf+0x14a>
    1250:	6f ef       	ldi	r22, 0xFF	; 255
    1252:	7f ef       	ldi	r23, 0xFF	; 255
    1254:	c5 01       	movw	r24, r10
    1256:	0e 94 94 0a 	call	0x1528	; 0x1528 <strnlen>
    125a:	4c 01       	movw	r8, r24
    125c:	82 01       	movw	r16, r4
    125e:	f3 2d       	mov	r31, r3
    1260:	ff 77       	andi	r31, 0x7F	; 127
    1262:	3f 2e       	mov	r3, r31
    1264:	16 c0       	rjmp	.+44     	; 0x1292 <vfprintf+0x188>
    1266:	28 01       	movw	r4, r16
    1268:	22 e0       	ldi	r18, 0x02	; 2
    126a:	42 0e       	add	r4, r18
    126c:	51 1c       	adc	r5, r1
    126e:	f8 01       	movw	r30, r16
    1270:	a0 80       	ld	r10, Z
    1272:	b1 80       	ldd	r11, Z+1	; 0x01
    1274:	36 fe       	sbrs	r3, 6
    1276:	03 c0       	rjmp	.+6      	; 0x127e <vfprintf+0x174>
    1278:	69 2d       	mov	r22, r9
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <vfprintf+0x178>
    127e:	6f ef       	ldi	r22, 0xFF	; 255
    1280:	7f ef       	ldi	r23, 0xFF	; 255
    1282:	c5 01       	movw	r24, r10
    1284:	0e 94 82 0a 	call	0x1504	; 0x1504 <strnlen_P>
    1288:	4c 01       	movw	r8, r24
    128a:	f3 2d       	mov	r31, r3
    128c:	f0 68       	ori	r31, 0x80	; 128
    128e:	3f 2e       	mov	r3, r31
    1290:	82 01       	movw	r16, r4
    1292:	33 fc       	sbrc	r3, 3
    1294:	1b c0       	rjmp	.+54     	; 0x12cc <vfprintf+0x1c2>
    1296:	82 2d       	mov	r24, r2
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	88 16       	cp	r8, r24
    129c:	99 06       	cpc	r9, r25
    129e:	b0 f4       	brcc	.+44     	; 0x12cc <vfprintf+0x1c2>
    12a0:	b6 01       	movw	r22, r12
    12a2:	80 e2       	ldi	r24, 0x20	; 32
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
    12aa:	2a 94       	dec	r2
    12ac:	f4 cf       	rjmp	.-24     	; 0x1296 <vfprintf+0x18c>
    12ae:	f5 01       	movw	r30, r10
    12b0:	37 fc       	sbrc	r3, 7
    12b2:	85 91       	lpm	r24, Z+
    12b4:	37 fe       	sbrs	r3, 7
    12b6:	81 91       	ld	r24, Z+
    12b8:	5f 01       	movw	r10, r30
    12ba:	b6 01       	movw	r22, r12
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
    12c2:	21 10       	cpse	r2, r1
    12c4:	2a 94       	dec	r2
    12c6:	21 e0       	ldi	r18, 0x01	; 1
    12c8:	82 1a       	sub	r8, r18
    12ca:	91 08       	sbc	r9, r1
    12cc:	81 14       	cp	r8, r1
    12ce:	91 04       	cpc	r9, r1
    12d0:	71 f7       	brne	.-36     	; 0x12ae <vfprintf+0x1a4>
    12d2:	e8 c0       	rjmp	.+464    	; 0x14a4 <vfprintf+0x39a>
    12d4:	84 36       	cpi	r24, 0x64	; 100
    12d6:	11 f0       	breq	.+4      	; 0x12dc <vfprintf+0x1d2>
    12d8:	89 36       	cpi	r24, 0x69	; 105
    12da:	41 f5       	brne	.+80     	; 0x132c <vfprintf+0x222>
    12dc:	f8 01       	movw	r30, r16
    12de:	37 fe       	sbrs	r3, 7
    12e0:	07 c0       	rjmp	.+14     	; 0x12f0 <vfprintf+0x1e6>
    12e2:	60 81       	ld	r22, Z
    12e4:	71 81       	ldd	r23, Z+1	; 0x01
    12e6:	82 81       	ldd	r24, Z+2	; 0x02
    12e8:	93 81       	ldd	r25, Z+3	; 0x03
    12ea:	0c 5f       	subi	r16, 0xFC	; 252
    12ec:	1f 4f       	sbci	r17, 0xFF	; 255
    12ee:	08 c0       	rjmp	.+16     	; 0x1300 <vfprintf+0x1f6>
    12f0:	60 81       	ld	r22, Z
    12f2:	71 81       	ldd	r23, Z+1	; 0x01
    12f4:	07 2e       	mov	r0, r23
    12f6:	00 0c       	add	r0, r0
    12f8:	88 0b       	sbc	r24, r24
    12fa:	99 0b       	sbc	r25, r25
    12fc:	0e 5f       	subi	r16, 0xFE	; 254
    12fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1300:	f3 2d       	mov	r31, r3
    1302:	ff 76       	andi	r31, 0x6F	; 111
    1304:	3f 2e       	mov	r3, r31
    1306:	97 ff       	sbrs	r25, 7
    1308:	09 c0       	rjmp	.+18     	; 0x131c <vfprintf+0x212>
    130a:	90 95       	com	r25
    130c:	80 95       	com	r24
    130e:	70 95       	com	r23
    1310:	61 95       	neg	r22
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	8f 4f       	sbci	r24, 0xFF	; 255
    1316:	9f 4f       	sbci	r25, 0xFF	; 255
    1318:	f0 68       	ori	r31, 0x80	; 128
    131a:	3f 2e       	mov	r3, r31
    131c:	2a e0       	ldi	r18, 0x0A	; 10
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	a3 01       	movw	r20, r6
    1322:	0e 94 9f 0a 	call	0x153e	; 0x153e <__ultoa_invert>
    1326:	88 2e       	mov	r8, r24
    1328:	86 18       	sub	r8, r6
    132a:	45 c0       	rjmp	.+138    	; 0x13b6 <vfprintf+0x2ac>
    132c:	85 37       	cpi	r24, 0x75	; 117
    132e:	31 f4       	brne	.+12     	; 0x133c <vfprintf+0x232>
    1330:	23 2d       	mov	r18, r3
    1332:	2f 7e       	andi	r18, 0xEF	; 239
    1334:	b2 2e       	mov	r11, r18
    1336:	2a e0       	ldi	r18, 0x0A	; 10
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	25 c0       	rjmp	.+74     	; 0x1386 <vfprintf+0x27c>
    133c:	93 2d       	mov	r25, r3
    133e:	99 7f       	andi	r25, 0xF9	; 249
    1340:	b9 2e       	mov	r11, r25
    1342:	8f 36       	cpi	r24, 0x6F	; 111
    1344:	c1 f0       	breq	.+48     	; 0x1376 <vfprintf+0x26c>
    1346:	18 f4       	brcc	.+6      	; 0x134e <vfprintf+0x244>
    1348:	88 35       	cpi	r24, 0x58	; 88
    134a:	79 f0       	breq	.+30     	; 0x136a <vfprintf+0x260>
    134c:	b5 c0       	rjmp	.+362    	; 0x14b8 <vfprintf+0x3ae>
    134e:	80 37       	cpi	r24, 0x70	; 112
    1350:	19 f0       	breq	.+6      	; 0x1358 <vfprintf+0x24e>
    1352:	88 37       	cpi	r24, 0x78	; 120
    1354:	21 f0       	breq	.+8      	; 0x135e <vfprintf+0x254>
    1356:	b0 c0       	rjmp	.+352    	; 0x14b8 <vfprintf+0x3ae>
    1358:	e9 2f       	mov	r30, r25
    135a:	e0 61       	ori	r30, 0x10	; 16
    135c:	be 2e       	mov	r11, r30
    135e:	b4 fe       	sbrs	r11, 4
    1360:	0d c0       	rjmp	.+26     	; 0x137c <vfprintf+0x272>
    1362:	fb 2d       	mov	r31, r11
    1364:	f4 60       	ori	r31, 0x04	; 4
    1366:	bf 2e       	mov	r11, r31
    1368:	09 c0       	rjmp	.+18     	; 0x137c <vfprintf+0x272>
    136a:	34 fe       	sbrs	r3, 4
    136c:	0a c0       	rjmp	.+20     	; 0x1382 <vfprintf+0x278>
    136e:	29 2f       	mov	r18, r25
    1370:	26 60       	ori	r18, 0x06	; 6
    1372:	b2 2e       	mov	r11, r18
    1374:	06 c0       	rjmp	.+12     	; 0x1382 <vfprintf+0x278>
    1376:	28 e0       	ldi	r18, 0x08	; 8
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	05 c0       	rjmp	.+10     	; 0x1386 <vfprintf+0x27c>
    137c:	20 e1       	ldi	r18, 0x10	; 16
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <vfprintf+0x27c>
    1382:	20 e1       	ldi	r18, 0x10	; 16
    1384:	32 e0       	ldi	r19, 0x02	; 2
    1386:	f8 01       	movw	r30, r16
    1388:	b7 fe       	sbrs	r11, 7
    138a:	07 c0       	rjmp	.+14     	; 0x139a <vfprintf+0x290>
    138c:	60 81       	ld	r22, Z
    138e:	71 81       	ldd	r23, Z+1	; 0x01
    1390:	82 81       	ldd	r24, Z+2	; 0x02
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	0c 5f       	subi	r16, 0xFC	; 252
    1396:	1f 4f       	sbci	r17, 0xFF	; 255
    1398:	06 c0       	rjmp	.+12     	; 0x13a6 <vfprintf+0x29c>
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0e 5f       	subi	r16, 0xFE	; 254
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	a3 01       	movw	r20, r6
    13a8:	0e 94 9f 0a 	call	0x153e	; 0x153e <__ultoa_invert>
    13ac:	88 2e       	mov	r8, r24
    13ae:	86 18       	sub	r8, r6
    13b0:	fb 2d       	mov	r31, r11
    13b2:	ff 77       	andi	r31, 0x7F	; 127
    13b4:	3f 2e       	mov	r3, r31
    13b6:	36 fe       	sbrs	r3, 6
    13b8:	0d c0       	rjmp	.+26     	; 0x13d4 <vfprintf+0x2ca>
    13ba:	23 2d       	mov	r18, r3
    13bc:	2e 7f       	andi	r18, 0xFE	; 254
    13be:	a2 2e       	mov	r10, r18
    13c0:	89 14       	cp	r8, r9
    13c2:	58 f4       	brcc	.+22     	; 0x13da <vfprintf+0x2d0>
    13c4:	34 fe       	sbrs	r3, 4
    13c6:	0b c0       	rjmp	.+22     	; 0x13de <vfprintf+0x2d4>
    13c8:	32 fc       	sbrc	r3, 2
    13ca:	09 c0       	rjmp	.+18     	; 0x13de <vfprintf+0x2d4>
    13cc:	83 2d       	mov	r24, r3
    13ce:	8e 7e       	andi	r24, 0xEE	; 238
    13d0:	a8 2e       	mov	r10, r24
    13d2:	05 c0       	rjmp	.+10     	; 0x13de <vfprintf+0x2d4>
    13d4:	b8 2c       	mov	r11, r8
    13d6:	a3 2c       	mov	r10, r3
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <vfprintf+0x2d6>
    13da:	b8 2c       	mov	r11, r8
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <vfprintf+0x2d6>
    13de:	b9 2c       	mov	r11, r9
    13e0:	a4 fe       	sbrs	r10, 4
    13e2:	0f c0       	rjmp	.+30     	; 0x1402 <vfprintf+0x2f8>
    13e4:	fe 01       	movw	r30, r28
    13e6:	e8 0d       	add	r30, r8
    13e8:	f1 1d       	adc	r31, r1
    13ea:	80 81       	ld	r24, Z
    13ec:	80 33       	cpi	r24, 0x30	; 48
    13ee:	21 f4       	brne	.+8      	; 0x13f8 <vfprintf+0x2ee>
    13f0:	9a 2d       	mov	r25, r10
    13f2:	99 7e       	andi	r25, 0xE9	; 233
    13f4:	a9 2e       	mov	r10, r25
    13f6:	09 c0       	rjmp	.+18     	; 0x140a <vfprintf+0x300>
    13f8:	a2 fe       	sbrs	r10, 2
    13fa:	06 c0       	rjmp	.+12     	; 0x1408 <vfprintf+0x2fe>
    13fc:	b3 94       	inc	r11
    13fe:	b3 94       	inc	r11
    1400:	04 c0       	rjmp	.+8      	; 0x140a <vfprintf+0x300>
    1402:	8a 2d       	mov	r24, r10
    1404:	86 78       	andi	r24, 0x86	; 134
    1406:	09 f0       	breq	.+2      	; 0x140a <vfprintf+0x300>
    1408:	b3 94       	inc	r11
    140a:	a3 fc       	sbrc	r10, 3
    140c:	11 c0       	rjmp	.+34     	; 0x1430 <vfprintf+0x326>
    140e:	a0 fe       	sbrs	r10, 0
    1410:	06 c0       	rjmp	.+12     	; 0x141e <vfprintf+0x314>
    1412:	b2 14       	cp	r11, r2
    1414:	88 f4       	brcc	.+34     	; 0x1438 <vfprintf+0x32e>
    1416:	28 0c       	add	r2, r8
    1418:	92 2c       	mov	r9, r2
    141a:	9b 18       	sub	r9, r11
    141c:	0e c0       	rjmp	.+28     	; 0x143a <vfprintf+0x330>
    141e:	b2 14       	cp	r11, r2
    1420:	60 f4       	brcc	.+24     	; 0x143a <vfprintf+0x330>
    1422:	b6 01       	movw	r22, r12
    1424:	80 e2       	ldi	r24, 0x20	; 32
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
    142c:	b3 94       	inc	r11
    142e:	f7 cf       	rjmp	.-18     	; 0x141e <vfprintf+0x314>
    1430:	b2 14       	cp	r11, r2
    1432:	18 f4       	brcc	.+6      	; 0x143a <vfprintf+0x330>
    1434:	2b 18       	sub	r2, r11
    1436:	02 c0       	rjmp	.+4      	; 0x143c <vfprintf+0x332>
    1438:	98 2c       	mov	r9, r8
    143a:	21 2c       	mov	r2, r1
    143c:	a4 fe       	sbrs	r10, 4
    143e:	10 c0       	rjmp	.+32     	; 0x1460 <vfprintf+0x356>
    1440:	b6 01       	movw	r22, r12
    1442:	80 e3       	ldi	r24, 0x30	; 48
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
    144a:	a2 fe       	sbrs	r10, 2
    144c:	17 c0       	rjmp	.+46     	; 0x147c <vfprintf+0x372>
    144e:	a1 fc       	sbrc	r10, 1
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <vfprintf+0x34e>
    1452:	88 e7       	ldi	r24, 0x78	; 120
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 c0       	rjmp	.+4      	; 0x145c <vfprintf+0x352>
    1458:	88 e5       	ldi	r24, 0x58	; 88
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	b6 01       	movw	r22, r12
    145e:	0c c0       	rjmp	.+24     	; 0x1478 <vfprintf+0x36e>
    1460:	8a 2d       	mov	r24, r10
    1462:	86 78       	andi	r24, 0x86	; 134
    1464:	59 f0       	breq	.+22     	; 0x147c <vfprintf+0x372>
    1466:	a1 fe       	sbrs	r10, 1
    1468:	02 c0       	rjmp	.+4      	; 0x146e <vfprintf+0x364>
    146a:	8b e2       	ldi	r24, 0x2B	; 43
    146c:	01 c0       	rjmp	.+2      	; 0x1470 <vfprintf+0x366>
    146e:	80 e2       	ldi	r24, 0x20	; 32
    1470:	a7 fc       	sbrc	r10, 7
    1472:	8d e2       	ldi	r24, 0x2D	; 45
    1474:	b6 01       	movw	r22, r12
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
    147c:	89 14       	cp	r8, r9
    147e:	38 f4       	brcc	.+14     	; 0x148e <vfprintf+0x384>
    1480:	b6 01       	movw	r22, r12
    1482:	80 e3       	ldi	r24, 0x30	; 48
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
    148a:	9a 94       	dec	r9
    148c:	f7 cf       	rjmp	.-18     	; 0x147c <vfprintf+0x372>
    148e:	8a 94       	dec	r8
    1490:	f3 01       	movw	r30, r6
    1492:	e8 0d       	add	r30, r8
    1494:	f1 1d       	adc	r31, r1
    1496:	80 81       	ld	r24, Z
    1498:	b6 01       	movw	r22, r12
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
    14a0:	81 10       	cpse	r8, r1
    14a2:	f5 cf       	rjmp	.-22     	; 0x148e <vfprintf+0x384>
    14a4:	22 20       	and	r2, r2
    14a6:	09 f4       	brne	.+2      	; 0x14aa <vfprintf+0x3a0>
    14a8:	42 ce       	rjmp	.-892    	; 0x112e <vfprintf+0x24>
    14aa:	b6 01       	movw	r22, r12
    14ac:	80 e2       	ldi	r24, 0x20	; 32
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0e 94 ff 07 	call	0xffe	; 0xffe <fputc>
    14b4:	2a 94       	dec	r2
    14b6:	f6 cf       	rjmp	.-20     	; 0x14a4 <vfprintf+0x39a>
    14b8:	f6 01       	movw	r30, r12
    14ba:	86 81       	ldd	r24, Z+6	; 0x06
    14bc:	97 81       	ldd	r25, Z+7	; 0x07
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <vfprintf+0x3ba>
    14c0:	8f ef       	ldi	r24, 0xFF	; 255
    14c2:	9f ef       	ldi	r25, 0xFF	; 255
    14c4:	2b 96       	adiw	r28, 0x0b	; 11
    14c6:	e2 e1       	ldi	r30, 0x12	; 18
    14c8:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__epilogue_restores__>

000014cc <calloc>:
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	86 9f       	mul	r24, r22
    14d6:	80 01       	movw	r16, r0
    14d8:	87 9f       	mul	r24, r23
    14da:	10 0d       	add	r17, r0
    14dc:	96 9f       	mul	r25, r22
    14de:	10 0d       	add	r17, r0
    14e0:	11 24       	eor	r1, r1
    14e2:	c8 01       	movw	r24, r16
    14e4:	0e 94 81 06 	call	0xd02	; 0xd02 <malloc>
    14e8:	ec 01       	movw	r28, r24
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	29 f0       	breq	.+10     	; 0x14f8 <calloc+0x2c>
    14ee:	a8 01       	movw	r20, r16
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	0e 94 8d 0a 	call	0x151a	; 0x151a <memset>
    14f8:	ce 01       	movw	r24, r28
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	08 95       	ret

00001504 <strnlen_P>:
    1504:	fc 01       	movw	r30, r24
    1506:	05 90       	lpm	r0, Z+
    1508:	61 50       	subi	r22, 0x01	; 1
    150a:	70 40       	sbci	r23, 0x00	; 0
    150c:	01 10       	cpse	r0, r1
    150e:	d8 f7       	brcc	.-10     	; 0x1506 <strnlen_P+0x2>
    1510:	80 95       	com	r24
    1512:	90 95       	com	r25
    1514:	8e 0f       	add	r24, r30
    1516:	9f 1f       	adc	r25, r31
    1518:	08 95       	ret

0000151a <memset>:
    151a:	dc 01       	movw	r26, r24
    151c:	01 c0       	rjmp	.+2      	; 0x1520 <memset+0x6>
    151e:	6d 93       	st	X+, r22
    1520:	41 50       	subi	r20, 0x01	; 1
    1522:	50 40       	sbci	r21, 0x00	; 0
    1524:	e0 f7       	brcc	.-8      	; 0x151e <memset+0x4>
    1526:	08 95       	ret

00001528 <strnlen>:
    1528:	fc 01       	movw	r30, r24
    152a:	61 50       	subi	r22, 0x01	; 1
    152c:	70 40       	sbci	r23, 0x00	; 0
    152e:	01 90       	ld	r0, Z+
    1530:	01 10       	cpse	r0, r1
    1532:	d8 f7       	brcc	.-10     	; 0x152a <strnlen+0x2>
    1534:	80 95       	com	r24
    1536:	90 95       	com	r25
    1538:	8e 0f       	add	r24, r30
    153a:	9f 1f       	adc	r25, r31
    153c:	08 95       	ret

0000153e <__ultoa_invert>:
    153e:	fa 01       	movw	r30, r20
    1540:	aa 27       	eor	r26, r26
    1542:	28 30       	cpi	r18, 0x08	; 8
    1544:	51 f1       	breq	.+84     	; 0x159a <__ultoa_invert+0x5c>
    1546:	20 31       	cpi	r18, 0x10	; 16
    1548:	81 f1       	breq	.+96     	; 0x15aa <__ultoa_invert+0x6c>
    154a:	e8 94       	clt
    154c:	6f 93       	push	r22
    154e:	6e 7f       	andi	r22, 0xFE	; 254
    1550:	6e 5f       	subi	r22, 0xFE	; 254
    1552:	7f 4f       	sbci	r23, 0xFF	; 255
    1554:	8f 4f       	sbci	r24, 0xFF	; 255
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	af 4f       	sbci	r26, 0xFF	; 255
    155a:	b1 e0       	ldi	r27, 0x01	; 1
    155c:	3e d0       	rcall	.+124    	; 0x15da <__ultoa_invert+0x9c>
    155e:	b4 e0       	ldi	r27, 0x04	; 4
    1560:	3c d0       	rcall	.+120    	; 0x15da <__ultoa_invert+0x9c>
    1562:	67 0f       	add	r22, r23
    1564:	78 1f       	adc	r23, r24
    1566:	89 1f       	adc	r24, r25
    1568:	9a 1f       	adc	r25, r26
    156a:	a1 1d       	adc	r26, r1
    156c:	68 0f       	add	r22, r24
    156e:	79 1f       	adc	r23, r25
    1570:	8a 1f       	adc	r24, r26
    1572:	91 1d       	adc	r25, r1
    1574:	a1 1d       	adc	r26, r1
    1576:	6a 0f       	add	r22, r26
    1578:	71 1d       	adc	r23, r1
    157a:	81 1d       	adc	r24, r1
    157c:	91 1d       	adc	r25, r1
    157e:	a1 1d       	adc	r26, r1
    1580:	20 d0       	rcall	.+64     	; 0x15c2 <__ultoa_invert+0x84>
    1582:	09 f4       	brne	.+2      	; 0x1586 <__ultoa_invert+0x48>
    1584:	68 94       	set
    1586:	3f 91       	pop	r19
    1588:	2a e0       	ldi	r18, 0x0A	; 10
    158a:	26 9f       	mul	r18, r22
    158c:	11 24       	eor	r1, r1
    158e:	30 19       	sub	r19, r0
    1590:	30 5d       	subi	r19, 0xD0	; 208
    1592:	31 93       	st	Z+, r19
    1594:	de f6       	brtc	.-74     	; 0x154c <__ultoa_invert+0xe>
    1596:	cf 01       	movw	r24, r30
    1598:	08 95       	ret
    159a:	46 2f       	mov	r20, r22
    159c:	47 70       	andi	r20, 0x07	; 7
    159e:	40 5d       	subi	r20, 0xD0	; 208
    15a0:	41 93       	st	Z+, r20
    15a2:	b3 e0       	ldi	r27, 0x03	; 3
    15a4:	0f d0       	rcall	.+30     	; 0x15c4 <__ultoa_invert+0x86>
    15a6:	c9 f7       	brne	.-14     	; 0x159a <__ultoa_invert+0x5c>
    15a8:	f6 cf       	rjmp	.-20     	; 0x1596 <__ultoa_invert+0x58>
    15aa:	46 2f       	mov	r20, r22
    15ac:	4f 70       	andi	r20, 0x0F	; 15
    15ae:	40 5d       	subi	r20, 0xD0	; 208
    15b0:	4a 33       	cpi	r20, 0x3A	; 58
    15b2:	18 f0       	brcs	.+6      	; 0x15ba <__ultoa_invert+0x7c>
    15b4:	49 5d       	subi	r20, 0xD9	; 217
    15b6:	31 fd       	sbrc	r19, 1
    15b8:	40 52       	subi	r20, 0x20	; 32
    15ba:	41 93       	st	Z+, r20
    15bc:	02 d0       	rcall	.+4      	; 0x15c2 <__ultoa_invert+0x84>
    15be:	a9 f7       	brne	.-22     	; 0x15aa <__ultoa_invert+0x6c>
    15c0:	ea cf       	rjmp	.-44     	; 0x1596 <__ultoa_invert+0x58>
    15c2:	b4 e0       	ldi	r27, 0x04	; 4
    15c4:	a6 95       	lsr	r26
    15c6:	97 95       	ror	r25
    15c8:	87 95       	ror	r24
    15ca:	77 95       	ror	r23
    15cc:	67 95       	ror	r22
    15ce:	ba 95       	dec	r27
    15d0:	c9 f7       	brne	.-14     	; 0x15c4 <__ultoa_invert+0x86>
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	61 05       	cpc	r22, r1
    15d6:	71 05       	cpc	r23, r1
    15d8:	08 95       	ret
    15da:	9b 01       	movw	r18, r22
    15dc:	ac 01       	movw	r20, r24
    15de:	0a 2e       	mov	r0, r26
    15e0:	06 94       	lsr	r0
    15e2:	57 95       	ror	r21
    15e4:	47 95       	ror	r20
    15e6:	37 95       	ror	r19
    15e8:	27 95       	ror	r18
    15ea:	ba 95       	dec	r27
    15ec:	c9 f7       	brne	.-14     	; 0x15e0 <__ultoa_invert+0xa2>
    15ee:	62 0f       	add	r22, r18
    15f0:	73 1f       	adc	r23, r19
    15f2:	84 1f       	adc	r24, r20
    15f4:	95 1f       	adc	r25, r21
    15f6:	a0 1d       	adc	r26, r0
    15f8:	08 95       	ret

000015fa <__prologue_saves__>:
    15fa:	2f 92       	push	r2
    15fc:	3f 92       	push	r3
    15fe:	4f 92       	push	r4
    1600:	5f 92       	push	r5
    1602:	6f 92       	push	r6
    1604:	7f 92       	push	r7
    1606:	8f 92       	push	r8
    1608:	9f 92       	push	r9
    160a:	af 92       	push	r10
    160c:	bf 92       	push	r11
    160e:	cf 92       	push	r12
    1610:	df 92       	push	r13
    1612:	ef 92       	push	r14
    1614:	ff 92       	push	r15
    1616:	0f 93       	push	r16
    1618:	1f 93       	push	r17
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	ca 1b       	sub	r28, r26
    1624:	db 0b       	sbc	r29, r27
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	09 94       	ijmp

00001632 <__epilogue_restores__>:
    1632:	2a 88       	ldd	r2, Y+18	; 0x12
    1634:	39 88       	ldd	r3, Y+17	; 0x11
    1636:	48 88       	ldd	r4, Y+16	; 0x10
    1638:	5f 84       	ldd	r5, Y+15	; 0x0f
    163a:	6e 84       	ldd	r6, Y+14	; 0x0e
    163c:	7d 84       	ldd	r7, Y+13	; 0x0d
    163e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1640:	9b 84       	ldd	r9, Y+11	; 0x0b
    1642:	aa 84       	ldd	r10, Y+10	; 0x0a
    1644:	b9 84       	ldd	r11, Y+9	; 0x09
    1646:	c8 84       	ldd	r12, Y+8	; 0x08
    1648:	df 80       	ldd	r13, Y+7	; 0x07
    164a:	ee 80       	ldd	r14, Y+6	; 0x06
    164c:	fd 80       	ldd	r15, Y+5	; 0x05
    164e:	0c 81       	ldd	r16, Y+4	; 0x04
    1650:	1b 81       	ldd	r17, Y+3	; 0x03
    1652:	aa 81       	ldd	r26, Y+2	; 0x02
    1654:	b9 81       	ldd	r27, Y+1	; 0x01
    1656:	ce 0f       	add	r28, r30
    1658:	d1 1d       	adc	r29, r1
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	ed 01       	movw	r28, r26
    1666:	08 95       	ret

00001668 <_exit>:
    1668:	f8 94       	cli

0000166a <__stop_program>:
    166a:	ff cf       	rjmp	.-2      	; 0x166a <__stop_program>
